name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: make test

      - name: Generate coverage report
        run: make coverage

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          if [ $(echo "$COVERAGE < 80" | bc) -eq 1 ]; then
            echo "Coverage ${COVERAGE}% is below 80% threshold"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-orca

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Only run on push to main (not PRs) to save AWS costs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests
        run: make integration-test
        env:
          AWS_REGION: us-west-2

  smoke-test:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [unit-test]
    # Only run on push to main
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: orca-ci

      - name: Build ORCA
        run: make build

      - name: Build Docker image
        run: make docker-build

      - name: Load image into kind
        run: kind load docker-image orca:latest --name orca-ci

      - name: Deploy ORCA
        run: |
          kubectl apply -f deploy/kubernetes/
          kubectl wait --for=condition=ready pod -l app=orca -n kube-system --timeout=2m

      - name: Run smoke tests
        run: make smoke-test
        env:
          CLUSTER: kind-orca-ci

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: make build

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: orca-binary
          path: bin/orca
          retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, unit-test, build]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: orca:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
