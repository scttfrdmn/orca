{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ORCA - Orchestration for Research Cloud Access","text":"<p>ORCA enables research institutions to seamlessly burst Kubernetes workloads from on-premises clusters to AWS, with native support for GPU-intensive AI/ML computing.</p>"},{"location":"#what-is-orca","title":"What is ORCA?","text":"<p>ORCA (Orchestration for Research Cloud Access) is a Kubernetes Virtual Kubelet provider that allows research computing clusters to dynamically extend capacity to AWS when local resources are exhausted.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udf93 Research-First Design - Built for academic and research workloads</li> <li>\ud83d\udda5\ufe0f AI/ML Accelerators - Support for NVIDIA GPUs (P6, P5, P4d, G6e), AWS Trainium, Inferentia, and FPGAs</li> <li>\ud83c\udfaf Explicit Control - Users specify exact instance types, not guessed</li> <li>\ud83d\udcb0 Cost-Aware - Budget controls, cost tracking, spot instance support</li> <li>\ud83d\udd13 Open Source - Apache 2.0 licensed, community-driven</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li> <p> Getting Started</p> <p>Get ORCA up and running in minutes</p> <p> Quick Start</p> </li> <li> <p> User Guide</p> <p>Learn how to use ORCA for your workloads</p> <p> User Guide</p> </li> <li> <p> Architecture</p> <p>Understand how ORCA works</p> <p> Architecture</p> </li> <li> <p> Development</p> <p>Contribute to ORCA development</p> <p> Development</p> </li> </ul>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Research Cluster\"\n        K8S[Kubernetes API]\n        VK[ORCA Virtual Kubelet]\n        POD[Pod with GPU Request]\n    end\n\n    subgraph \"AWS\"\n        EC2[EC2 Instance&lt;br/&gt;P5.48xlarge&lt;br/&gt;8x H100 GPUs]\n        SPOT[Spot Instances]\n        CR[Capacity Reservations]\n    end\n\n    POD --&gt;|Schedule| VK\n    VK --&gt;|Register| K8S\n    VK --&gt;|Launch| EC2\n    VK -.-&gt;|Optional| SPOT\n    VK -.-&gt;|Preferred| CR\n\n    style VK fill:#4285f4,stroke:#333,stroke-width:2px,color:#fff\n    style EC2 fill:#ff9900,stroke:#333,stroke-width:2px\n    style POD fill:#326ce5,stroke:#333,stroke-width:2px,color:#fff</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#aiml-training","title":"AI/ML Training","text":"<p>Burst large model training to AWS GPUs, Trainium, or Inferentia when local clusters are full.</p>"},{"location":"#cost-optimized-computing","title":"Cost-Optimized Computing","text":"<p>Use Trainium for 50% lower training costs or Inferentia for 70% lower inference costs compared to GPUs.</p>"},{"location":"#research-computing","title":"Research Computing","text":"<p>Access specialized hardware on-demand: FPGAs for genomics, latest GPUs for deep learning.</p>"},{"location":"#multi-tenant-research","title":"Multi-Tenant Research","text":"<p>Support multiple departments with separate budgets and cost tracking.</p>"},{"location":"#why-orca","title":"Why ORCA?","text":""},{"location":"#vs-elotl-kip","title":"vs. Elotl Kip","text":"<ul> <li>Kip is EOL (last updated 2021) - stuck on K8s 1.18, AWS SDK v1</li> <li>ORCA is modern - K8s 1.34, AWS SDK v2, Go 1.25, latest instance types (P6, G6e)</li> <li>ORCA prioritizes explicit control - users know their requirements</li> </ul>"},{"location":"#vs-aws-fargate-virtual-kubelet","title":"vs. AWS Fargate Virtual Kubelet","text":"<ul> <li>Fargate provider is unmaintained and doesn't support GPUs</li> <li>ORCA is GPU-first - built for AI/ML research</li> </ul>"},{"location":"#vs-building-on-managed-k8s","title":"vs. Building on Managed K8s","text":"<ul> <li>ORCA extends existing clusters - research institutions already have K8s</li> <li>No migration needed - burst workloads, keep existing infrastructure</li> </ul>"},{"location":"#project-status","title":"Project Status","text":"<p>Current Phase: Active Development (v0.1.0-dev)</p> <ul> <li>\u2705 Core architecture designed and implemented</li> <li>\u2705 AWS EC2 integration complete</li> <li>\u2705 Instance selection (explicit, template, auto)</li> <li>\u2705 Virtual Kubelet integration</li> <li>\ud83d\udea7 Container runtime integration (in progress)</li> <li>\u23f3 GPU capacity reservations (v0.2.0)</li> <li>\u23f3 kubectl logs/exec (v0.2.0)</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub: scttfrdmn/orca</li> <li>Issues: Report bugs or request features</li> <li>License: Apache 2.0</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Read the docs</li> <li>\ud83d\udc1b Report issues</li> <li>\ud83d\udcac Discussions</li> <li>\ud83e\udd1d Contributing guide</li> </ul> <p>Built with \ud83c\udf0a for research computing</p>"},{"location":"AWS-CUSTOM-SILICON/","title":"AWS Custom Silicon and FPGA Support","text":"<p>ORCA supports AWS custom silicon accelerators and FPGAs for specialized AI/ML and compute workloads.</p>"},{"location":"AWS-CUSTOM-SILICON/#aws-trainium-ai-training","title":"AWS Trainium (AI Training)","text":"<p>AWS Trainium is purpose-built for deep learning training, offering cost-effective training for large language models and other AI workloads.</p>"},{"location":"AWS-CUSTOM-SILICON/#trainium-instance-types-2025","title":"Trainium Instance Types (2025)","text":"<ul> <li>Trn2.48xlarge: 16x Trainium2 chips, 192 vCPUs, 2TB RAM</li> <li>~50% cost reduction vs P5 for training</li> <li>Optimized for LLM training</li> <li> <p>NeuronLink interconnect for distributed training</p> </li> <li> <p>Trn2.24xlarge: 8x Trainium2 chips, 96 vCPUs, 1TB RAM</p> </li> <li> <p>Trn1.32xlarge: 16x Trainium1 chips, 128 vCPUs, 512GB RAM (previous generation)</p> </li> <li> <p>Trn1n.32xlarge: 16x Trainium1 chips with enhanced networking</p> </li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#example-llm-training-on-trainium","title":"Example: LLM Training on Trainium","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: llm-training-trainium\n  annotations:\n    orca.research/instance-type: \"trn2.48xlarge\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: trainer\n      image: your-trainium-image:latest\n      resources:\n        requests:\n          aws.amazon.com/neuron: \"16\"  # Request Trainium cores\n        limits:\n          aws.amazon.com/neuron: \"16\"\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#trainium-benefits","title":"Trainium Benefits","text":"<ul> <li>Cost Optimization: ~50% lower cost per training compared to GPU instances</li> <li>Purpose-Built: Optimized for transformer models and LLMs</li> <li>Scale: NeuronLink provides high-bandwidth interconnect</li> <li>PyTorch Support: AWS Neuron SDK with PyTorch integration</li> <li>JAX Support: Native JAX/Flax support for research</li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#when-to-use-trainium","title":"When to Use Trainium","text":"<p>\u2705 Good for: - Large language model training (BERT, GPT, LLaMA, etc.) - Transformer-based models - Cost-sensitive training workloads - Long-running training jobs</p> <p>\u274c Not ideal for: - Models requiring CUDA-specific code - Workloads requiring NVIDIA-specific libraries - Inference (use Inferentia instead) - Short exploratory experiments</p>"},{"location":"AWS-CUSTOM-SILICON/#aws-inferentia-ai-inference","title":"AWS Inferentia (AI Inference)","text":"<p>AWS Inferentia is optimized for high-performance, cost-effective ML inference.</p>"},{"location":"AWS-CUSTOM-SILICON/#inferentia-instance-types-2025","title":"Inferentia Instance Types (2025)","text":"<ul> <li>Inf2.48xlarge: 12x Inferentia2 chips, 192 vCPUs, 384GB RAM</li> <li>Best price/performance for inference</li> <li> <p>Up to 4x throughput vs Inf1</p> </li> <li> <p>Inf2.24xlarge: 6x Inferentia2 chips, 96 vCPUs, 192GB RAM</p> </li> <li> <p>Inf2.8xlarge: 2x Inferentia2 chips, 32 vCPUs, 64GB RAM</p> </li> <li> <p>Inf1.24xlarge: 16x Inferentia1 chips (previous generation, still supported)</p> </li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#example-model-inference-on-inferentia","title":"Example: Model Inference on Inferentia","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: llm-inference\n  annotations:\n    orca.research/instance-type: \"inf2.24xlarge\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: inference\n      image: your-inferentia-image:latest\n      resources:\n        requests:\n          aws.amazon.com/neuron: \"6\"  # Request Inferentia cores\n        limits:\n          aws.amazon.com/neuron: \"6\"\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#inferentia-benefits","title":"Inferentia Benefits","text":"<ul> <li>Cost Effective: Up to 70% lower cost per inference vs GPU</li> <li>High Throughput: Optimized for batched inference</li> <li>Low Latency: Purpose-built for production inference</li> <li>Model Support: Broad framework support (PyTorch, TensorFlow, ONNX)</li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#when-to-use-inferentia","title":"When to Use Inferentia","text":"<p>\u2705 Good for: - Production inference endpoints - High-throughput batch inference - Cost-sensitive deployments - Latency-critical applications - LLM serving (LLaMA, BERT, T5, etc.)</p> <p>\u274c Not ideal for: - Training workloads (use Trainium or GPUs) - Interactive model development - Models requiring CUDA</p>"},{"location":"AWS-CUSTOM-SILICON/#aws-fpgas-custom-acceleration","title":"AWS FPGAs (Custom Acceleration)","text":"<p>FPGAs provide customizable hardware acceleration for specialized compute workloads.</p>"},{"location":"AWS-CUSTOM-SILICON/#fpga-instance-types-2025","title":"FPGA Instance Types (2025)","text":"<ul> <li>F2.48xlarge: 8x Xilinx Alveo U250 FPGAs, 192 vCPUs, 2TB RAM</li> <li>Latest generation (F1 retired in 2025)</li> <li>PCIe Gen 4 support</li> <li> <p>Higher memory bandwidth</p> </li> <li> <p>F2.16xlarge: 4x Xilinx Alveo U250 FPGAs, 64 vCPUs, 1TB RAM</p> </li> <li> <p>F2.4xlarge: 1x Xilinx Alveo U250 FPGA, 16 vCPUs, 122GB RAM</p> </li> <li> <p>F2.2xlarge: 1x Xilinx Alveo U250 FPGA, 8 vCPUs, 61GB RAM</p> </li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#example-fpga-workload","title":"Example: FPGA Workload","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: fpga-acceleration\n  annotations:\n    orca.research/instance-type: \"f2.16xlarge\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: fpga-app\n      image: your-fpga-image:latest\n      resources:\n        requests:\n          aws.amazon.com/fpga: \"4\"  # Request FPGAs\n        limits:\n          aws.amazon.com/fpga: \"4\"\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#fpga-use-cases","title":"FPGA Use Cases","text":"<p>\u2705 Good for: - Custom hardware acceleration - Financial modeling and risk analysis - Genomics and bioinformatics - Video transcoding and processing - Network security and cryptography - Custom ML accelerators - High-frequency trading</p> <p>\u274c Not ideal for: - General-purpose computing - Workloads without FPGA expertise - Short-lived jobs (FPGA programming overhead)</p>"},{"location":"AWS-CUSTOM-SILICON/#fpga-development","title":"FPGA Development","text":"<p>FPGAs require specialized development:</p> <ol> <li>AWS FPGA Developer AMI: Pre-configured development environment</li> <li>Xilinx Vitis: FPGA development tools</li> <li>AFI (Amazon FPGA Image): Pre-built or custom FPGA images</li> <li>OpenCL Support: Higher-level FPGA programming</li> </ol>"},{"location":"AWS-CUSTOM-SILICON/#comparison-matrix","title":"Comparison Matrix","text":"Feature Trainium Inferentia NVIDIA GPU FPGA Primary Use Training Inference Training/Inference Custom Acceleration Cost Low Very Low High Medium Performance High (Training) High (Inference) Highest Customizable Flexibility Medium Medium High Highest Development PyTorch/JAX PyTorch/TF CUDA/PyTorch Xilinx/OpenCL Time to Deploy Fast Fast Fast Slow (FPGA dev) Availability Good Good Limited Good"},{"location":"AWS-CUSTOM-SILICON/#orca-configuration","title":"ORCA Configuration","text":""},{"location":"AWS-CUSTOM-SILICON/#instance-selection-examples","title":"Instance Selection Examples","text":"<pre><code>instances:\n  templates:\n    # Training templates\n    llm-training-gpu:\n      instanceType: p6.48xlarge      # NVIDIA B200\n      launchType: spot\n\n    llm-training-trainium:\n      instanceType: trn2.48xlarge    # AWS Trainium2\n      launchType: on-demand\n\n    # Inference templates\n    inference-gpu:\n      instanceType: g6.xlarge        # NVIDIA L4\n      launchType: on-demand\n\n    inference-inferentia:\n      instanceType: inf2.24xlarge    # AWS Inferentia2\n      launchType: on-demand\n\n    # FPGA templates\n    fpga-acceleration:\n      instanceType: f2.16xlarge      # 4x FPGAs\n      launchType: on-demand\n\n  # Allowed instance types\n  allowedInstanceTypes:\n    # Trainium\n    - trn2.48xlarge\n    - trn2.24xlarge\n    - trn1.32xlarge\n    - trn1n.32xlarge\n\n    # Inferentia\n    - inf2.48xlarge\n    - inf2.24xlarge\n    - inf2.8xlarge\n    - inf1.24xlarge\n\n    # FPGA\n    - f2.48xlarge\n    - f2.16xlarge\n    - f2.4xlarge\n    - f2.2xlarge\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#cost-comparison-approximate-2025-pricing","title":"Cost Comparison (Approximate 2025 Pricing)","text":""},{"location":"AWS-CUSTOM-SILICON/#training-workloads","title":"Training Workloads","text":"<ul> <li>P6.48xlarge (8x B200): ~$115/hour</li> <li>P5.48xlarge (8x H100): ~$98/hour</li> <li>Trn2.48xlarge (16x Trainium2): ~$50/hour \u2705 50% savings</li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#inference-workloads","title":"Inference Workloads","text":"<ul> <li>G6.xlarge (1x L4): ~$1.20/hour</li> <li>Inf2.24xlarge (6x Inferentia2): ~$8/hour \u2705 Better throughput/cost</li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#fpga-workloads","title":"FPGA Workloads","text":"<ul> <li>F2.16xlarge (4x FPGAs): ~$22/hour</li> </ul>"},{"location":"AWS-CUSTOM-SILICON/#best-practices","title":"Best Practices","text":""},{"location":"AWS-CUSTOM-SILICON/#trainium","title":"Trainium","text":"<ol> <li>Use for Large Models: Best ROI for models &gt;1B parameters</li> <li>Batch Training: Optimize batch sizes for Trainium</li> <li>Distributed Training: Use NeuronLink for multi-node</li> <li>Model Compilation: Pre-compile models with Neuron compiler</li> </ol>"},{"location":"AWS-CUSTOM-SILICON/#inferentia","title":"Inferentia","text":"<ol> <li>Batch Inference: Optimize for throughput over latency</li> <li>Model Optimization: Use Neuron compiler optimizations</li> <li>Right-Sizing: Choose instance size based on throughput needs</li> <li>Model Caching: Pre-compile and cache models</li> </ol>"},{"location":"AWS-CUSTOM-SILICON/#fpga","title":"FPGA","text":"<ol> <li>Long-Running Jobs: Amortize FPGA programming time</li> <li>Reuse AFIs: Use pre-built Amazon FPGA Images</li> <li>Custom Acceleration: Only when general compute insufficient</li> <li>Development Time: Budget for FPGA development expertise</li> </ol>"},{"location":"AWS-CUSTOM-SILICON/#aws-neuron-sdk","title":"AWS Neuron SDK","text":"<p>Both Trainium and Inferentia require the AWS Neuron SDK:</p> <pre><code># Example Dockerfile for Neuron workloads\nFROM public.ecr.aws/neuron/pytorch-training-neuronx:2.1.0-neuronx-py310\n\n# Install dependencies\nRUN pip install transformers datasets\n\n# Copy training code\nCOPY train.py /app/\n\n# Run with Neuron\nCMD [\"neuron-train\", \"train.py\"]\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#resource-requests","title":"Resource Requests","text":""},{"location":"AWS-CUSTOM-SILICON/#trainiuminferentia","title":"Trainium/Inferentia","text":"<pre><code>resources:\n  requests:\n    aws.amazon.com/neuron: \"16\"  # Number of Neuron cores\n  limits:\n    aws.amazon.com/neuron: \"16\"\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#fpga_1","title":"FPGA","text":"<pre><code>resources:\n  requests:\n    aws.amazon.com/fpga: \"4\"  # Number of FPGAs\n  limits:\n    aws.amazon.com/fpga: \"4\"\n</code></pre>"},{"location":"AWS-CUSTOM-SILICON/#future-support","title":"Future Support","text":"<p>ORCA will continue to support AWS custom silicon as new generations are released: - Trainium3 (expected 2026) - Inferentia3 (expected 2026) - Next-gen FPGAs</p>"},{"location":"AWS-CUSTOM-SILICON/#references","title":"References","text":"<ul> <li>AWS Trainium</li> <li>AWS Inferentia</li> <li>AWS FPGA Instances</li> <li>AWS Neuron SDK</li> <li>FPGA Developer AMI</li> </ul> <p>Last updated: October 2025</p>"},{"location":"CAPACITY-RESERVATIONS/","title":"AWS Capacity Reservations for ML Workloads","text":""},{"location":"CAPACITY-RESERVATIONS/#critical-requirement-for-modern-gpus","title":"\u26a0\ufe0f Critical Requirement for Modern GPUs","text":"<p>IMPORTANT: AWS Capacity Reservations are not optional for modern NVIDIA GPU instances. They are effectively required to get access to recent GPU hardware (P5, P4d, P4de, G6e).</p> <p>Reality of AWS GPU Availability (October 2025): - P6.48xlarge (Blackwell B200): Latest generation, Capacity Reservations required - P5e.48xlarge (H200 141GB): Capacity Reservations required - P5.48xlarge (H100 80GB): Virtually impossible without Capacity Reservations - P4de.24xlarge (A100 80GB): Capacity Reservations required in most regions - P4d.24xlarge (A100 40GB): Extremely limited on-demand availability - G6e.48xlarge (L40S): Better availability but still constrained during peak - G6.48xlarge (L4): More available but still benefits from reservations</p> <p>Without Capacity Reservations: - <code>InsufficientInstanceCapacity</code> errors are the norm, not the exception - May wait hours/days for spot instances to become available - On-demand launches fail even when willing to pay full price - Cannot plan or schedule research workloads with confidence</p> <p>With Capacity Reservations: - Guaranteed access to reserved capacity - Launch instances immediately when needed - Can schedule and plan research timelines - Essential for any serious ML/AI research</p> <p>Conclusion: For ORCA to be viable for GPU-intensive research, Capacity Reservations support must be a top priority, not a \"nice to have\" feature.</p>"},{"location":"CAPACITY-RESERVATIONS/#what-are-capacity-reservations","title":"What are Capacity Reservations?","text":""},{"location":"CAPACITY-RESERVATIONS/#on-demand-capacity-reservations-odcrs","title":"On-Demand Capacity Reservations (ODCRs)","text":"<p>On-Demand Capacity Reservations let you reserve compute capacity for your EC2 instances in a specific Availability Zone for any duration. This ensures you have access to instances when you need them.</p> <p>Key Benefits: - Guaranteed Availability: Reserve P5, P4d, or other GPU instances in advance - No Commitment: Can be created/canceled anytime (billed when active) - Combine with Savings Plans: Use reserved capacity with spot pricing - Avoid \"InsufficientInstanceCapacity\": Never fail to launch due to capacity constraints</p>"},{"location":"CAPACITY-RESERVATIONS/#capacity-blocks-for-ml","title":"Capacity Blocks for ML","text":"<p>Capacity Blocks for ML provide reserved GPU capacity for future, defined time periods (days or weeks in advance).</p> <p>Key Benefits: - Planned Workloads: Reserve P5.48xlarge months in advance for training - Cost Predictability: Fixed cost for entire reservation period - Guaranteed Access: Lock in capacity during high-demand periods - Bulk Reservations: Reserve multiple instances for distributed training</p>"},{"location":"CAPACITY-RESERVATIONS/#use-cases","title":"Use Cases","text":""},{"location":"CAPACITY-RESERVATIONS/#1-large-model-training","title":"1. Large Model Training","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: llm-training\n  annotations:\n    orca.research/instance-type: \"p5.48xlarge\"\n    orca.research/capacity-reservation-id: \"cr-0123456789abcdef0\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  # ... rest of spec\n</code></pre> <p>Scenario: Training a 70B parameter model over 2 weeks - Solution: Create ODCR for p5.48xlarge for 2 weeks - Benefit: Guaranteed access to 8x H100 GPUs, no interruptions - Cost: Pay for reservation + on-demand pricing</p>"},{"location":"CAPACITY-RESERVATIONS/#2-scheduled-batch-jobs","title":"2. Scheduled Batch Jobs","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: batch-inference\n  annotations:\n    orca.research/instance-type: \"g5.xlarge\"\n    orca.research/capacity-reservation-preference: \"open\"\nspec:\n  # ... rest of spec\n</code></pre> <p>Scenario: Daily inference jobs that must complete by 8am - Solution: Create ODCR for daily 12am-8am window - Benefit: Jobs never fail due to capacity - Cost: Only pay for reservation hours (8 hours/day)</p>"},{"location":"CAPACITY-RESERVATIONS/#3-multi-week-research-projects","title":"3. Multi-Week Research Projects","text":"<p>Scenario: Research team needs 16x P4d.24xlarge for 4-week project - Solution: Purchase Capacity Block 2 months in advance - Benefit: Lock in capacity, predictable costs, no capacity anxiety - Cost: Fixed upfront cost for entire 4-week period</p>"},{"location":"CAPACITY-RESERVATIONS/#pricing-model","title":"Pricing Model","text":""},{"location":"CAPACITY-RESERVATIONS/#odcr-pricing","title":"ODCR Pricing","text":"<pre><code>Total Cost = Reservation Fee + Instance Usage\n</code></pre> <ul> <li>Reservation Fee: Charged per hour reservation is active</li> <li>Instance Usage: Standard on-demand or spot pricing when running</li> <li>Cancellation: Can cancel anytime, stop paying reservation fee</li> </ul> <p>Example: P5.48xlarge (H100) ODCR - ODCR fee: ~\\(1-2/hour (varies by region) - On-demand: ~\\)98/hour when instance running - Total when running: ~\\(99-100/hour - Total when idle: ~\\)1-2/hour (reservation only)</p> <p>Example: P6.48xlarge (B200) ODCR (2025 pricing) - ODCR fee: ~\\(2-3/hour (varies by region) - On-demand: ~\\)115/hour when instance running (estimated) - Total when running: ~\\(117-118/hour - Total when idle: ~\\)2-3/hour (reservation only)</p>"},{"location":"CAPACITY-RESERVATIONS/#capacity-blocks-pricing","title":"Capacity Blocks Pricing","text":"<pre><code>Total Cost = Fixed Block Cost (paid upfront)\n</code></pre> <ul> <li>Fixed Cost: Single payment for entire reservation period</li> <li>No Additional Charges: Instance usage included in block cost</li> <li>Commit to Duration: Cannot cancel once purchased</li> </ul> <p>Example: P5.48xlarge Capacity Block - 2-week block: ~\\(32,000-35,000 (typical) - Equivalent to: ~\\)95-100/hour over 336 hours - Advantage: Guaranteed capacity during high-demand periods</p>"},{"location":"CAPACITY-RESERVATIONS/#implementation-plan-future","title":"Implementation Plan (Future)","text":""},{"location":"CAPACITY-RESERVATIONS/#phase-1-odcr-support","title":"Phase 1: ODCR Support","text":"<pre><code>// internal/aws/capacity.go\ntype CapacityReservation struct {\n    ID               string\n    InstanceType     string\n    AvailabilityZone string\n    TotalInstances   int\n    AvailableInstances int\n    State            string\n}\n\n// Check for available capacity in reservations\nfunc (c *Client) GetAvailableCapacityReservations(\n    ctx context.Context,\n    instanceType string,\n) ([]*CapacityReservation, error)\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#phase-2-pod-annotations","title":"Phase 2: Pod Annotations","text":"<pre><code>annotations:\n  # Target specific reservation\n  orca.research/capacity-reservation-id: \"cr-0123456789abcdef0\"\n\n  # Prefer reservations but allow on-demand if none available\n  orca.research/capacity-reservation-preference: \"open\"\n\n  # Require reservation, fail if none available\n  orca.research/capacity-reservation-preference: \"targeted\"\n\n  # Use Capacity Block\n  orca.research/capacity-block-id: \"cb-0123456789abcdef0\"\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#phase-3-automatic-discovery","title":"Phase 3: Automatic Discovery","text":"<p>ORCA will automatically discover and match pods to available capacity reservations:</p> <ol> <li>Pod requests p5.48xlarge</li> <li>ORCA queries for available ODCRs/Capacity Blocks</li> <li>If match found, use reservation</li> <li>If no match, fall back to on-demand/spot</li> </ol>"},{"location":"CAPACITY-RESERVATIONS/#phase-4-reservation-management","title":"Phase 4: Reservation Management","text":"<pre><code># CLI tool for managing reservations\norca-capacity list\norca-capacity create p5.48xlarge --count 4 --duration 7d\norca-capacity delete cr-0123456789abcdef0\norca-capacity stats  # Show utilization\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#best-practices","title":"Best Practices","text":""},{"location":"CAPACITY-RESERVATIONS/#1-use-odcrs-for-critical-workloads","title":"1. Use ODCRs for Critical Workloads","text":"<p>Reserve capacity for: - \u274c Short experiments (&lt; 1 hour) - use spot - \u2705 Long training runs (&gt; 8 hours) - use ODCR - \u2705 Production inference endpoints - use ODCR - \u2705 Time-sensitive research deadlines - use ODCR</p>"},{"location":"CAPACITY-RESERVATIONS/#2-combine-with-spot-instances","title":"2. Combine with Spot Instances","text":"<pre><code>annotations:\n  orca.research/instance-type: \"p5.48xlarge\"\n  orca.research/capacity-reservation-id: \"cr-xxx\"\n  orca.research/launch-type: \"spot\"\n</code></pre> <p>Strategy: - Reserve capacity to guarantee availability - Use spot pricing for 70% cost savings - Best of both worlds: availability + cost optimization</p>"},{"location":"CAPACITY-RESERVATIONS/#3-monitor-utilization","title":"3. Monitor Utilization","text":"<p>Track reservation usage: - High utilization (&gt;80%): Good ROI, consider more reservations - Low utilization (&lt;30%): Wasting money, cancel or reduce - Peak usage patterns: Adjust reservation schedule</p>"},{"location":"CAPACITY-RESERVATIONS/#4-plan-ahead-for-capacity-blocks","title":"4. Plan Ahead for Capacity Blocks","text":"<p>Capacity Blocks sell out during peak periods: - Plan 2-3 months ahead for major training runs - Book early for popular instances (P5.48xlarge) - Consider multiple AZs if primary is sold out</p>"},{"location":"CAPACITY-RESERVATIONS/#aws-cli-examples","title":"AWS CLI Examples","text":""},{"location":"CAPACITY-RESERVATIONS/#create-on-demand-capacity-reservation","title":"Create On-Demand Capacity Reservation","text":"<pre><code># Create ODCR for 4x p5.48xlarge\naws ec2 create-capacity-reservation \\\n  --instance-type p5.48xlarge \\\n  --instance-platform Linux/UNIX \\\n  --availability-zone us-east-1a \\\n  --instance-count 4 \\\n  --instance-match-criteria targeted \\\n  --end-date-type unlimited\n\n# List reservations\naws ec2 describe-capacity-reservations\n\n# Modify reservation (increase count)\naws ec2 modify-capacity-reservation \\\n  --capacity-reservation-id cr-xxx \\\n  --instance-count 8\n\n# Cancel reservation\naws ec2 cancel-capacity-reservation \\\n  --capacity-reservation-id cr-xxx\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#purchase-capacity-block","title":"Purchase Capacity Block","text":"<pre><code># Find available capacity blocks\naws ec2 describe-capacity-block-offerings \\\n  --instance-type p5.48xlarge \\\n  --instance-count 4 \\\n  --capacity-duration 336  # hours (2 weeks)\n\n# Purchase capacity block\naws ec2 purchase-capacity-block \\\n  --capacity-block-offering-id cbo-xxx \\\n  --instance-platform Linux/UNIX\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#cost-optimization-strategies","title":"Cost Optimization Strategies","text":""},{"location":"CAPACITY-RESERVATIONS/#strategy-1-time-based-reservations","title":"Strategy 1: Time-Based Reservations","text":"<p>Scenario: Training jobs run 8am-8pm weekdays</p> <pre><code># Automation: Create ODCR weekdays 8am, cancel 8pm\n# Cost savings: Only pay 12 hours/day * 5 days = 60 hours/week\n# vs 168 hours/week for always-on reservation\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#strategy-2-burst-reserved","title":"Strategy 2: Burst + Reserved","text":"<p>Normal load: Use spot instances Peak demand: Fail over to reserved capacity</p> <pre><code>annotations:\n  orca.research/launch-type: \"spot\"\n  orca.research/capacity-reservation-preference: \"open\"\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#strategy-3-team-sharing","title":"Strategy 3: Team Sharing","text":"<p>Multiple teams sharing reservation pool: - Create organizational ODCR pool - Teams request from pool via ORCA - Track usage per team with budget-namespace annotation - Charge back based on utilization</p>"},{"location":"CAPACITY-RESERVATIONS/#future-integration-with-orca","title":"Future: Integration with ORCA","text":""},{"location":"CAPACITY-RESERVATIONS/#configuration","title":"Configuration","text":"<pre><code># config.yaml\naws:\n  capacityReservations:\n    enabled: true\n    autoDiscovery: true\n    preferenceDefault: \"open\"\n\n    # Specific reservations for workload types\n    reservations:\n      - id: \"cr-training-p5\"\n        instanceType: \"p5.48xlarge\"\n        workloadType: \"training\"\n\n      - id: \"cr-inference-g5\"\n        instanceType: \"g5.xlarge\"\n        workloadType: \"inference\"\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#metrics","title":"Metrics","text":"<p>ORCA will expose capacity reservation metrics:</p> <pre><code>orca_capacity_reservation_total\norca_capacity_reservation_available\norca_capacity_reservation_utilization_percent\norca_capacity_reservation_cost_per_hour\n</code></pre>"},{"location":"CAPACITY-RESERVATIONS/#references","title":"References","text":"<ul> <li>AWS On-Demand Capacity Reservations</li> <li>AWS Capacity Blocks for ML</li> <li>Capacity Reservations Pricing</li> </ul>"},{"location":"CAPACITY-RESERVATIONS/#timeline","title":"Timeline","text":"<p>REVISED PRIORITY: Given that Capacity Reservations are effectively required for modern GPU instances, this feature timeline is accelerated:</p> <ul> <li>Phase 1 (v0.1.0 - Current): Manual ODCR management outside ORCA</li> <li>Users create reservations manually</li> <li>Document workarounds and best practices</li> <li> <p>ORCA can launch into existing reservations if configured</p> </li> <li> <p>Phase 2 (v0.2.0 - CRITICAL PRIORITY): Basic ODCR support</p> </li> <li>Target specific capacity reservations via annotation</li> <li><code>orca.research/capacity-reservation-id</code> support</li> <li>Fail gracefully with clear error if reservation unavailable</li> <li> <p>Document ODCR setup for P5/P4d instances</p> </li> <li> <p>Phase 3 (v0.3.0 - HIGH PRIORITY): Automatic ODCR discovery</p> </li> <li>Query available capacity reservations for instance type</li> <li>Automatic matching and selection</li> <li>Prefer reserved capacity over on-demand</li> <li> <p>Metrics and monitoring for reservation utilization</p> </li> <li> <p>Phase 4 (v0.4.0): Capacity Blocks support</p> </li> <li>Support Capacity Block targeting</li> <li>Plan ahead for scheduled workloads</li> <li> <p>Integration with workload scheduling</p> </li> <li> <p>Phase 5 (v0.5.0): Advanced capacity management</p> </li> <li>ORCA capacity management CLI</li> <li>Automated reservation lifecycle</li> <li>Team-based reservation pools</li> <li>Cost allocation and chargeback</li> </ul> <p>Status: \ud83d\udea8 CRITICAL FEATURE - Phase 2 (v0.2.0) is essential for GPU workloads</p> <p>Current Workaround: Users must manually create ODCRs and configure ORCA to use them. Without this, modern GPU instances (P5, P4d) are effectively unavailable.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to ORCA","text":"<p>Thank you for your interest in contributing to ORCA! We welcome contributions from the community.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":""},{"location":"CONTRIBUTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.21 or higher</li> <li>Docker (for containerized testing)</li> <li>kubectl (for Kubernetes testing)</li> <li>AWS account (for integration testing)</li> <li>golangci-lint (for linting)</li> </ul>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository <pre><code>git clone https://github.com/scttfrdmn/orca.git\ncd orca\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>make mod-download\n</code></pre></p> </li> <li> <p>Install development tools <pre><code># Install golangci-lint\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n</code></pre></p> </li> <li> <p>Build the project <pre><code>make build\n</code></pre></p> </li> <li> <p>Run tests <pre><code>make test\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#development-workflow","title":"Development Workflow","text":""},{"location":"CONTRIBUTING/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes</p> </li> <li>Write idiomatic Go code</li> <li>Follow the project structure conventions</li> <li>Add tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Format and lint <pre><code>make fmt\nmake lint\nmake vet\n</code></pre></p> </li> <li> <p>Run tests <pre><code>make test\nmake coverage\n</code></pre></p> </li> <li> <p>Commit your changes <pre><code>git add .\ngit commit -m \"feat: add new feature\"\n</code></pre></p> </li> </ol>"},{"location":"CONTRIBUTING/#commit-message-convention","title":"Commit Message Convention","text":"<p>We follow Conventional Commits:</p> <ul> <li><code>feat:</code> - New feature</li> <li><code>fix:</code> - Bug fix</li> <li><code>docs:</code> - Documentation changes</li> <li><code>test:</code> - Adding or updating tests</li> <li><code>refactor:</code> - Code refactoring</li> <li><code>perf:</code> - Performance improvements</li> <li><code>chore:</code> - Maintenance tasks</li> </ul> <p>Examples: <pre><code>feat: add explicit instance selection support\nfix: handle pod deletion edge cases\ndocs: update instance selection guide\ntest: add unit tests for AWS client\n</code></pre></p>"},{"location":"CONTRIBUTING/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update documentation - Ensure README.md and relevant docs are updated</li> <li>Add changelog entry - Add your changes to CHANGELOG.md under [Unreleased]</li> <li>Ensure tests pass - All tests must pass (<code>make test</code>)</li> <li>Ensure linting passes - Code must pass linting (<code>make lint</code>)</li> <li>Create pull request - Provide clear description of changes</li> <li>Request review - Tag maintainers for review</li> </ol>"},{"location":"CONTRIBUTING/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"CONTRIBUTING/#go-code-style","title":"Go Code Style","text":"<ul> <li>Follow Effective Go</li> <li>Use <code>gofmt</code> for formatting (run <code>make fmt</code>)</li> <li>Keep functions focused and small</li> <li>Write self-documenting code with clear variable names</li> <li>Add comments for exported functions and complex logic</li> </ul>"},{"location":"CONTRIBUTING/#error-handling","title":"Error Handling","text":"<pre><code>// Good: Wrap errors with context\nif err != nil {\n    return fmt.Errorf(\"failed to create instance: %w\", err)\n}\n\n// Bad: Generic error\nif err != nil {\n    return err\n}\n</code></pre>"},{"location":"CONTRIBUTING/#logging","title":"Logging","text":"<pre><code>// Use structured logging\nlog.Info(\"creating pod\",\n    \"namespace\", pod.Namespace,\n    \"name\", pod.Name,\n    \"instanceType\", instanceType)\n</code></pre>"},{"location":"CONTRIBUTING/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"CONTRIBUTING/#unit-tests","title":"Unit Tests","text":"<ul> <li>Write tests for all new functionality</li> <li>Aim for &gt;80% code coverage</li> <li>Use table-driven tests where appropriate</li> <li>Mock external dependencies (AWS SDK, Kubernetes API)</li> </ul> <p>Example: <pre><code>func TestSelectInstanceType(t *testing.T) {\n    tests := []struct {\n        name     string\n        pod      *corev1.Pod\n        expected string\n    }{\n        {\n            name: \"explicit instance type\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{\n                        \"orca.research/instance-type\": \"p5.48xlarge\",\n                    },\n                },\n            },\n            expected: \"p5.48xlarge\",\n        },\n        // More test cases...\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result := selectInstanceType(tt.pod)\n            if result != tt.expected {\n                t.Errorf(\"expected %s, got %s\", tt.expected, result)\n            }\n        })\n    }\n}\n</code></pre></p>"},{"location":"CONTRIBUTING/#integration-tests","title":"Integration Tests","text":"<ul> <li>Test against real AWS services when possible</li> <li>Use AWS localstack for local testing</li> <li>Clean up resources after tests</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":""},{"location":"CONTRIBUTING/#code-documentation","title":"Code Documentation","text":"<ul> <li>Document all exported functions, types, and constants</li> <li>Use godoc format</li> </ul> <pre><code>// CreatePod creates a new pod by launching an EC2 instance.\n// It returns an error if the instance cannot be created.\nfunc (p *Provider) CreatePod(ctx context.Context, pod *corev1.Pod) error {\n    // Implementation\n}\n</code></pre>"},{"location":"CONTRIBUTING/#user-documentation","title":"User Documentation","text":"<ul> <li>Update README.md for user-facing changes</li> <li>Add examples in <code>examples/</code> directory</li> <li>Update relevant docs in <code>docs/</code> directory</li> </ul>"},{"location":"CONTRIBUTING/#architecture-guidelines","title":"Architecture Guidelines","text":""},{"location":"CONTRIBUTING/#project-structure","title":"Project Structure","text":"<pre><code>cmd/orca/           # Main application entry point\npkg/                # Public libraries\n  provider/         # Virtual Kubelet provider implementation\n  config/           # Configuration management\n  instances/        # Instance selection logic\ninternal/           # Private application code\n  aws/              # AWS SDK integration\n  container/        # Container runtime integration\n  metrics/          # Metrics and monitoring\n</code></pre>"},{"location":"CONTRIBUTING/#design-principles","title":"Design Principles","text":"<ol> <li>Explicit over Implicit - Users should specify what they want</li> <li>Research-First - Optimize for research computing workflows</li> <li>Production-Grade - Write code as if it will run at scale</li> <li>Testability - Design for testability from the start</li> <li>Observability - Include metrics, logging, tracing</li> </ol>"},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues - Bug reports and feature requests</li> <li>GitHub Discussions - Questions and general discussion</li> <li>Research Partners - Reach out to NRP, SDSU contacts</li> </ul>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Focus on constructive feedback</li> <li>Welcome newcomers</li> <li>Assume good intentions</li> </ul>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing to ORCA, you agree that your contributions will be licensed under the Apache License 2.0.</p>"},{"location":"DEVELOPMENT/","title":"ORCA Development Guide","text":"<p>This guide covers local development setup, testing, and contribution workflows for ORCA.</p>"},{"location":"DEVELOPMENT/#prerequisites","title":"Prerequisites","text":""},{"location":"DEVELOPMENT/#required-tools","title":"Required Tools","text":"<ul> <li>Go 1.21+ - Install Go</li> <li>Docker - Install Docker</li> <li>kubectl - Install kubectl</li> <li>kind (optional) - For local Kubernetes testing</li> <li>golangci-lint - For code linting</li> </ul>"},{"location":"DEVELOPMENT/#install-development-tools","title":"Install Development Tools","text":"<pre><code># Install golangci-lint\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n\n# Install kind (Kubernetes in Docker) - optional\ngo install sigs.k8s.io/kind@latest\n</code></pre>"},{"location":"DEVELOPMENT/#getting-started","title":"Getting Started","text":""},{"location":"DEVELOPMENT/#1-clone-and-setup","title":"1. Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/scttfrdmn/orca.git\ncd orca\n\n# Download dependencies\nmake mod-download\n\n# Verify setup\nmake test\n</code></pre>"},{"location":"DEVELOPMENT/#2-project-structure","title":"2. Project Structure","text":"<pre><code>orca/\n\u251c\u2500\u2500 cmd/orca/              # Main application entry point\n\u251c\u2500\u2500 pkg/                   # Public packages\n\u2502   \u251c\u2500\u2500 provider/          # Virtual Kubelet provider\n\u2502   \u251c\u2500\u2500 config/            # Configuration management\n\u2502   \u2514\u2500\u2500 instances/         # Instance selection logic\n\u251c\u2500\u2500 internal/              # Private packages\n\u2502   \u251c\u2500\u2500 aws/               # AWS SDK integration\n\u2502   \u251c\u2500\u2500 container/         # Container runtime\n\u2502   \u2514\u2500\u2500 metrics/           # Metrics and monitoring\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 deploy/                # Deployment manifests\n\u251c\u2500\u2500 examples/              # User examples\n\u2514\u2500\u2500 scripts/               # Utility scripts\n</code></pre>"},{"location":"DEVELOPMENT/#development-workflow","title":"Development Workflow","text":""},{"location":"DEVELOPMENT/#building","title":"Building","text":"<pre><code># Build the binary\nmake build\n\n# Output: bin/orca\n</code></pre>"},{"location":"DEVELOPMENT/#testing","title":"Testing","text":"<pre><code># Run all tests\nmake test\n\n# Run tests with coverage\nmake coverage\n\n# Run tests for specific package\ngo test -v ./pkg/provider/...\n</code></pre>"},{"location":"DEVELOPMENT/#code-quality","title":"Code Quality","text":"<pre><code># Format code\nmake fmt\n\n# Run linter\nmake lint\n\n# Run go vet\nmake vet\n\n# Run all quality checks\nmake fmt &amp;&amp; make lint &amp;&amp; make vet &amp;&amp; make test\n</code></pre>"},{"location":"DEVELOPMENT/#running-locally","title":"Running Locally","text":"<pre><code># Create a config file\ncat &gt; config.yaml &lt;&lt;EOF\naws:\n  region: us-west-2\n  credentials:\n    accessKeyID: AKIA...\n    secretAccessKey: your-secret-key\n\nnode:\n  name: orca-dev-node\n  operatingSystem: Linux\n  cpu: 1000\n  memory: 1Ti\n  pods: 1000\n\nlogging:\n  level: debug\nEOF\n\n# Run ORCA\nmake run\n\n# Or run directly\n./bin/orca --config config.yaml --kubeconfig ~/.kube/config\n</code></pre>"},{"location":"DEVELOPMENT/#testing-with-local-kubernetes","title":"Testing with Local Kubernetes","text":""},{"location":"DEVELOPMENT/#setup-kind-cluster","title":"Setup kind Cluster","text":"<pre><code># Create a kind cluster\nkind create cluster --name orca-dev\n\n# Verify\nkubectl cluster-info --context kind-orca-dev\n</code></pre>"},{"location":"DEVELOPMENT/#deploy-orca-to-kind","title":"Deploy ORCA to kind","text":"<pre><code># Build Docker image\nmake docker-build\n\n# Load image into kind\nkind load docker-image orca:latest --name orca-dev\n\n# Deploy\nkubectl apply -f deploy/kubernetes/\n\n# Verify\nkubectl get pods -n kube-system | grep orca\n</code></pre>"},{"location":"DEVELOPMENT/#test-pod-creation","title":"Test Pod Creation","text":"<pre><code># Create a test pod\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-burst-pod\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n  - key: orca.research/burst-node\n    operator: Equal\n    value: \"true\"\n    effect: NoSchedule\n  containers:\n  - name: test\n    image: busybox\n    command: [\"sleep\", \"3600\"]\nEOF\n\n# Check pod status\nkubectl get pod test-burst-pod -o wide\n\n# Check ORCA logs\nkubectl logs -n kube-system -l app=orca\n</code></pre>"},{"location":"DEVELOPMENT/#aws-configuration","title":"AWS Configuration","text":""},{"location":"DEVELOPMENT/#using-aws-cli-credentials","title":"Using AWS CLI Credentials","text":"<pre><code># Configure AWS CLI\naws configure\n\n# ORCA will use ~/.aws/credentials automatically\n</code></pre>"},{"location":"DEVELOPMENT/#using-iam-role-recommended-for-production","title":"Using IAM Role (Recommended for Production)","text":"<pre><code># config.yaml\naws:\n  region: us-west-2\n  # No credentials needed - uses IAM role\n</code></pre>"},{"location":"DEVELOPMENT/#required-iam-permissions","title":"Required IAM Permissions","text":"<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:RunInstances\",\n        \"ec2:TerminateInstances\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceTypes\",\n        \"ec2:CreateTags\",\n        \"ec2:DescribeTags\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"DEVELOPMENT/#debugging","title":"Debugging","text":""},{"location":"DEVELOPMENT/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Via config file\ncat &gt; config.yaml &lt;&lt;EOF\nlogging:\n  level: debug\nEOF\n\n# Via command line\n./bin/orca --log-level=debug\n</code></pre>"},{"location":"DEVELOPMENT/#common-issues","title":"Common Issues","text":""},{"location":"DEVELOPMENT/#issue-cannot-connect-to-kubernetes-cluster","title":"Issue: Cannot connect to Kubernetes cluster","text":"<pre><code># Verify kubeconfig\nkubectl cluster-info\n\n# Specify kubeconfig explicitly\n./bin/orca --kubeconfig ~/.kube/config\n</code></pre>"},{"location":"DEVELOPMENT/#issue-aws-credentials-not-found","title":"Issue: AWS credentials not found","text":"<pre><code># Verify AWS credentials\naws sts get-caller-identity\n\n# Set credentials explicitly in config.yaml\n</code></pre>"},{"location":"DEVELOPMENT/#issue-pod-stuck-in-pending-state","title":"Issue: Pod stuck in Pending state","text":"<pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt;\n\n# Check ORCA logs\nkubectl logs -n kube-system -l app=orca\n\n# Check AWS instance creation\naws ec2 describe-instances --filters \"Name=tag:orca.research/pod,Values=&lt;pod-name&gt;\"\n</code></pre>"},{"location":"DEVELOPMENT/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"DEVELOPMENT/#provider-interface","title":"Provider Interface","text":"<pre><code>// pkg/provider/provider.go\n\ntype Provider interface {\n    // Pod lifecycle\n    CreatePod(ctx context.Context, pod *corev1.Pod) error\n    UpdatePod(ctx context.Context, pod *corev1.Pod) error\n    DeletePod(ctx context.Context, pod *corev1.Pod) error\n    GetPod(ctx context.Context, namespace, name string) (*corev1.Pod, error)\n    GetPodStatus(ctx context.Context, namespace, name string) (*corev1.PodStatus, error)\n    GetPods(ctx context.Context) ([]*corev1.Pod, error)\n}\n</code></pre>"},{"location":"DEVELOPMENT/#instance-selection","title":"Instance Selection","text":"<pre><code>// pkg/instances/selector.go\n\n// Selector chooses the appropriate EC2 instance type\ntype Selector interface {\n    // Select returns instance type for pod\n    Select(pod *corev1.Pod) (string, error)\n}\n\n// Three selection strategies\ntype ExplicitSelector struct{}  // Priority 1: User-specified\ntype TemplateSelector struct{}  // Priority 2: Named templates\ntype AutoSelector struct{}      // Priority 3: Auto-selection\n</code></pre>"},{"location":"DEVELOPMENT/#configuration-management","title":"Configuration Management","text":"<pre><code>// pkg/config/config.go\n\ntype Config struct {\n    AWS       AWSConfig       `yaml:\"aws\"`\n    Node      NodeConfig      `yaml:\"node\"`\n    Instances InstancesConfig `yaml:\"instances\"`\n    Logging   LoggingConfig   `yaml:\"logging\"`\n}\n</code></pre>"},{"location":"DEVELOPMENT/#writing-tests","title":"Writing Tests","text":""},{"location":"DEVELOPMENT/#unit-test-example","title":"Unit Test Example","text":"<pre><code>// pkg/instances/selector_test.go\n\nfunc TestExplicitSelector(t *testing.T) {\n    tests := []struct {\n        name        string\n        annotations map[string]string\n        expected    string\n        expectError bool\n    }{\n        {\n            name: \"explicit p5.48xlarge\",\n            annotations: map[string]string{\n                \"orca.research/instance-type\": \"p5.48xlarge\",\n            },\n            expected:    \"p5.48xlarge\",\n            expectError: false,\n        },\n        {\n            name:        \"no annotation\",\n            annotations: map[string]string{},\n            expected:    \"\",\n            expectError: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            pod := &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: tt.annotations,\n                },\n            }\n\n            selector := NewExplicitSelector()\n            result, err := selector.Select(pod)\n\n            if tt.expectError &amp;&amp; err == nil {\n                t.Error(\"expected error, got nil\")\n            }\n            if !tt.expectError &amp;&amp; err != nil {\n                t.Errorf(\"unexpected error: %v\", err)\n            }\n            if result != tt.expected {\n                t.Errorf(\"expected %s, got %s\", tt.expected, result)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"DEVELOPMENT/#integration-test-example","title":"Integration Test Example","text":"<pre><code>// internal/aws/client_test.go\n\n// +build integration\n\nfunc TestCreateInstance(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"skipping integration test\")\n    }\n\n    // Setup\n    client := NewClient(/* config */)\n    pod := createTestPod()\n\n    // Execute\n    err := client.CreateInstance(context.Background(), pod)\n    if err != nil {\n        t.Fatalf(\"failed to create instance: %v\", err)\n    }\n\n    // Verify\n    instances, err := client.DescribeInstances(context.Background(), pod)\n    if err != nil || len(instances) != 1 {\n        t.Errorf(\"expected 1 instance, got %d\", len(instances))\n    }\n\n    // Cleanup\n    defer client.TerminateInstance(context.Background(), instances[0].ID)\n}\n</code></pre>"},{"location":"DEVELOPMENT/#performance-profiling","title":"Performance Profiling","text":""},{"location":"DEVELOPMENT/#cpu-profiling","title":"CPU Profiling","text":"<pre><code># Build with profiling\ngo build -o bin/orca ./cmd/orca\n\n# Run with CPU profiling\n./bin/orca --cpuprofile=cpu.prof\n\n# Analyze profile\ngo tool pprof cpu.prof\n</code></pre>"},{"location":"DEVELOPMENT/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Run with memory profiling\n./bin/orca --memprofile=mem.prof\n\n# Analyze profile\ngo tool pprof mem.prof\n</code></pre>"},{"location":"DEVELOPMENT/#release-process","title":"Release Process","text":""},{"location":"DEVELOPMENT/#version-bump","title":"Version Bump","text":"<pre><code># Update VERSION file\necho \"0.2.0\" &gt; VERSION\n\n# Update CHANGELOG.md\n# Move [Unreleased] items to [0.2.0] section\n\n# Commit\ngit add VERSION CHANGELOG.md\ngit commit -m \"chore: bump version to 0.2.0\"\n\n# Tag\ngit tag -a v0.2.0 -m \"Release v0.2.0\"\ngit push origin v0.2.0\n</code></pre>"},{"location":"DEVELOPMENT/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues - Report bugs or request features</li> <li>GitHub Discussions - Ask questions</li> <li>Research Partners - Contact NRP, SDSU teams</li> </ul>"},{"location":"DEVELOPMENT/#additional-resources","title":"Additional Resources","text":"<ul> <li>Virtual Kubelet Documentation</li> <li>AWS SDK for Go v2</li> <li>Kubernetes Client Go</li> <li>Effective Go</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/","title":"Project-Template-Go Documentation Summary","text":""},{"location":"DOCUMENTATION_SUMMARY/#documents-created","title":"Documents Created","text":"<p>This folder now contains comprehensive documentation about the project-template-go repository and how to apply its standards to ORCA.</p>"},{"location":"DOCUMENTATION_SUMMARY/#1-project_template_go_analysismd-22-kb-837-lines","title":"1. PROJECT_TEMPLATE_GO_ANALYSIS.md (22 KB, 837 lines)","text":"<p>Comprehensive Technical Analysis</p> <p>A detailed examination of the project-template-go repository covering:</p> <ul> <li>Overall Directory Structure - Three-layer architecture (cmd/, internal/, pkg/)</li> <li>GitHub Pages Setup - Documentation hosting recommendations</li> <li>Documentation Structure - README, CONTRIBUTING, CODE_OF_CONDUCT, SECURITY</li> <li>Build and Deployment - Dockerfile (multi-stage), Makefile (20+ targets)</li> <li>Testing Setup - Table-driven tests, test organization, coverage</li> <li>CI/CD Pipeline - GitHub Actions with matrix testing (2 Go versions \u00d7 3 OS)</li> <li>Standardized Files - Pre-commit hooks, golangci-lint (28 linters), EditorConfig</li> <li>Icons/Images Organization - Recommendations for asset storage</li> <li>GitHub Configuration - 22 labels, issue templates, PR template, Dependabot</li> <li>Setup Scripts - Installation and setup automation</li> <li>Application Code Structure - Layered architecture patterns</li> <li>Key Takeaways - What to replicate vs. customize</li> <li>Dependencies and Tools - Build and dev requirements</li> <li>Versioning and Changelog - Semantic versioning, Keep a Changelog format</li> <li>Security Considerations - Implemented practices and recommendations</li> </ul> <p>Use this for: Deep understanding of every aspect of the template</p>"},{"location":"DOCUMENTATION_SUMMARY/#2-template_quick_referencemd-9-kb-323-lines","title":"2. TEMPLATE_QUICK_REFERENCE.md (9 KB, 323 lines)","text":"<p>Quick Lookup and Checklists</p> <p>Fast-reference guide with tables and organized information:</p> <ul> <li>Key Files Location Reference - Table of all critical files</li> <li>Essential Make Targets - All build commands organized by category</li> <li>GitHub Configuration Structure - Labels organized by type</li> <li>Pre-Commit Hooks - Table of all automated checks</li> <li>Directory Structure Pattern - Visual tree of proper organization</li> <li>Critical Configuration Settings - Docker, CI/CD, Go versions</li> <li>Environment Variables - Default values and purposes</li> <li>API Endpoints - Example REST endpoints</li> <li>Testing Patterns - Code examples for table-driven tests</li> <li>Key Implementation Details - Architecture layers, shutdown, error handling</li> <li>Tools Required - Checklist of development tools</li> <li>Setup Checklist - Step-by-step initial setup</li> <li>Common Workflows - Feature development, releases, dependency updates</li> <li>Performance Considerations - Build optimization tips</li> <li>Security Practices - Key security implementations</li> <li>Customization for ORCA - What needs to change</li> </ul> <p>Use this for: Quick lookup, checklists, and quick reminders</p>"},{"location":"DOCUMENTATION_SUMMARY/#3-template_implementation_guidemd-14-kb-440-lines","title":"3. TEMPLATE_IMPLEMENTATION_GUIDE.md (14 KB, 440 lines)","text":"<p>Step-by-Step Implementation Guide</p> <p>Practical guide to apply the template to ORCA:</p> <ul> <li>Phase 1: Directory Structure - Reorganizing code (cmd/, internal/, pkg/)</li> <li>Phase 2: Configuration Files - Makefile, pre-commit, .gitignore setup</li> <li>Phase 3: GitHub Configuration - Labels, issue templates, PR template, Dependabot</li> <li>Phase 4: CI/CD Pipeline - GitHub Actions workflow setup</li> <li>Phase 5: Documentation - README, CONTRIBUTING, CODE_OF_CONDUCT, SECURITY</li> <li>Phase 6: Setup Scripts - Install hooks, setup automation</li> <li>Phase 7: Go Module Setup - Module path updates</li> <li>Phase 8: Code Quality - Linting, testing, coverage setup</li> <li>Phase 9: Docker Setup - Dockerfile and docker-compose</li> <li>Phase 10: Verification - Testing and validation</li> <li>Phase 11: Repository Configuration - Branch protection, features</li> <li>Phase 12: Documentation Updates - Architecture, API docs</li> </ul> <p>Additional sections: - Customization Checklist (12 items) - Post-Implementation Validation (7-step checklist) - Common Issues and Solutions (4 problems with fixes) - Timeline Estimate (5-10 hours total) - Next Steps After Implementation</p> <p>Use this for: Step-by-step implementation, checking progress, troubleshooting</p>"},{"location":"DOCUMENTATION_SUMMARY/#4-documentation_summarymd-this-file","title":"4. DOCUMENTATION_SUMMARY.md (This File)","text":"<p>Overview and Navigation Guide</p> <p>This document providing: - Overview of all documentation - What each document contains - How to use each document - Quick navigation between documents - Source repository location</p>"},{"location":"DOCUMENTATION_SUMMARY/#document-usage-guide","title":"Document Usage Guide","text":""},{"location":"DOCUMENTATION_SUMMARY/#if-you-need","title":"If You Need...","text":"<p>Complete Understanding: - Start with PROJECT_TEMPLATE_GO_ANALYSIS.md - Reference specific sections as needed - Use Quick Reference for specific details</p> <p>Quick Answers: - Use TEMPLATE_QUICK_REFERENCE.md - Search for tables and checklists - Look up specific commands or patterns</p> <p>Implementation Plan: - Follow TEMPLATE_IMPLEMENTATION_GUIDE.md - Work through 12 phases sequentially - Use checklists to track progress - Refer to analysis for deeper context</p> <p>Specific Feature: - Quick Reference: Find in tables - Analysis: Find in appropriate section (1-15) - Implementation: Find in phase description</p>"},{"location":"DOCUMENTATION_SUMMARY/#key-information-at-a-glance","title":"Key Information at a Glance","text":""},{"location":"DOCUMENTATION_SUMMARY/#repository-structure","title":"Repository Structure","text":"<pre><code>project-template-go/\n\u251c\u2500\u2500 cmd/app/              # Application entry point\n\u251c\u2500\u2500 internal/             # Private packages (config, handler, service)\n\u251c\u2500\u2500 pkg/                  # Public packages (optional)\n\u251c\u2500\u2500 tests/                # Test organization\n\u251c\u2500\u2500 .github/              # GitHub configuration\n\u251c\u2500\u2500 scripts/              # Utility scripts\n\u251c\u2500\u2500 Dockerfile            # Multi-stage container build\n\u251c\u2500\u2500 Makefile              # 20+ build targets\n\u251c\u2500\u2500 .pre-commit-config.yaml # 7 local + generic hooks\n\u251c\u2500\u2500 .golangci.yml         # 28 linters configuration\n\u2514\u2500\u2500 docs/                 # Documentation (CONTRIBUTING, CODE_OF_CONDUCT, SECURITY)\n</code></pre>"},{"location":"DOCUMENTATION_SUMMARY/#essential-tools","title":"Essential Tools","text":"<ul> <li>Go 1.23+</li> <li>Make</li> <li>Docker</li> <li>pre-commit (Python)</li> <li>golangci-lint</li> <li>staticcheck</li> <li>gosec</li> <li>air (hot-reload)</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#critical-numbers","title":"Critical Numbers","text":"<ul> <li>28 linters in golangci-lint</li> <li>22 GitHub labels across 6 categories</li> <li>4 jobs in CI/CD pipeline (test, lint, build, docker)</li> <li>6 test runs in matrix (2 Go versions \u00d7 3 OS)</li> <li>7 pre-commit hooks (local) + 5 generic</li> <li>20+ Make targets for development</li> <li>5-10 hours for full implementation</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#template-repository-location","title":"Template Repository Location","text":"<ul> <li>Path: <code>/Users/scttfrdmn/src/project-template-go</code></li> <li>Reference for all patterns and examples</li> <li>Can be copied for new projects</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#how-to-reference-template-files","title":"How to Reference Template Files","text":"<p>When implementing, refer back to:</p> <ol> <li>Makefile - Build patterns</li> <li>.pre-commit-config.yaml - Hook setup</li> <li>.golangci.yml - Linting rules</li> <li>.github/workflows/ci.yml - CI/CD patterns</li> <li>Dockerfile - Container patterns</li> <li>docs/* - Documentation templates</li> <li>cmd/app/main.go - Application structure</li> <li>internal/* - Layered architecture examples</li> </ol>"},{"location":"DOCUMENTATION_SUMMARY/#orca-customization-points","title":"ORCA Customization Points","text":"<p>Before implementing, identify ORCA-specific needs:</p> <ol> <li>Module Path - What's your Go module name?</li> <li>Structure - What are your main components/services?</li> <li>Environment Variables - What does ORCA need?</li> <li>API Endpoints - What are your main APIs?</li> <li>Labels - What area labels fit your structure?</li> <li>Go Versions - What versions must you support?</li> <li>Documentation - What's specific to ORCA?</li> </ol>"},{"location":"DOCUMENTATION_SUMMARY/#next-steps","title":"Next Steps","text":"<ol> <li>Review Analysis - Understand the template fully</li> <li>Check Quick Reference - Familiarize with structure</li> <li>Plan Implementation - Go through Implementation Guide phases</li> <li>Execute - Follow checklists in Implementation Guide</li> <li>Validate - Use post-implementation validation checklist</li> <li>Train Team - Share documentation with team</li> <li>Maintain - Keep ORCA standards aligned with template</li> </ol>"},{"location":"DOCUMENTATION_SUMMARY/#document-cross-references","title":"Document Cross-References","text":""},{"location":"DOCUMENTATION_SUMMARY/#in-project_template_go_analysismd","title":"In PROJECT_TEMPLATE_GO_ANALYSIS.md","text":"<ul> <li>Section 1: Directory Structure Overview</li> <li>Section 4: Build Configuration (Makefile, Dockerfile)</li> <li>Section 6: CI/CD Pipeline Details</li> <li>Section 7: Configuration Files Explanation</li> <li>Section 9: GitHub Configuration Complete Reference</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#in-template_quick_referencemd","title":"In TEMPLATE_QUICK_REFERENCE.md","text":"<ul> <li>Key Files Table: File location reference</li> <li>Essential Make Targets: All build commands</li> <li>Directory Structure Pattern: Visual organization</li> <li>Customization for ORCA: What to change</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#in-template_implementation_guidemd","title":"In TEMPLATE_IMPLEMENTATION_GUIDE.md","text":"<ul> <li>Phase 1-2: Setup and Configuration</li> <li>Phase 3-4: GitHub and CI/CD</li> <li>Phase 5-9: Documentation and Code</li> <li>Phase 10-12: Verification and Polish</li> <li>Customization Checklist: Track progress</li> <li>Common Issues: Troubleshooting</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#version-information","title":"Version Information","text":"<ul> <li>Template Version: 1.0.0 (September 2025)</li> <li>Go Version: 1.23 (minimum)</li> <li>Documentation Created: October 2025</li> <li>Target Project: ORCA</li> </ul>"},{"location":"DOCUMENTATION_SUMMARY/#questions-or-issues","title":"Questions or Issues?","text":"<p>Refer to:</p> <ol> <li>Specific command question \u2192 Quick Reference</li> <li>How does this work? \u2192 Analysis document</li> <li>Where do I start? \u2192 Implementation Guide</li> <li>Example code \u2192 Template repository files</li> <li>Implementation stuck \u2192 Implementation Guide common issues</li> </ol>"},{"location":"DOCUMENTATION_SUMMARY/#final-notes","title":"Final Notes","text":"<p>The project-template-go repository represents a comprehensive, production-ready approach to Go project structure and automation. The three documents created here provide:</p> <ul> <li>Analysis: Understand WHY and HOW the template works</li> <li>Reference: Quick lookup for specific items</li> <li>Implementation: Step-by-step HOW to apply to ORCA</li> </ul> <p>Together, they provide everything needed to successfully adopt these best practices in the ORCA project.</p> <p>Estimated time to implement: 5-10 hours Team familiarity: 1-2 hours Expected improvement: Significant (standards, automation, quality)</p>"},{"location":"LOCALSTACK-TESTING/","title":"LocalStack Testing Guide","text":"<p>This guide explains how to use LocalStack for local development and testing of ORCA without incurring AWS costs.</p>"},{"location":"LOCALSTACK-TESTING/#overview","title":"Overview","text":"<p>LocalStack is a fully functional local AWS cloud stack that emulates AWS services on your local machine. This allows you to:</p> <ul> <li>Develop and test AWS integrations without AWS costs</li> <li>Test faster (no internet latency)</li> <li>Test in isolation (no conflicts with production resources)</li> <li>Run integration tests in CI/CD pipelines</li> </ul>"},{"location":"LOCALSTACK-TESTING/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>AWS CLI installed (for awslocal commands)</li> <li>Python 3 and pip3 (for awslocal wrapper)</li> </ul>"},{"location":"LOCALSTACK-TESTING/#installing-awslocal","title":"Installing awslocal","text":"<p>The <code>awslocal</code> CLI is a wrapper around the AWS CLI that automatically configures it to use LocalStack:</p> <pre><code>pip3 install awscli-local\n</code></pre> <p>Alternatively, you can use the regular AWS CLI with LocalStack by setting environment variables:</p> <pre><code>export AWS_ACCESS_KEY_ID=test\nexport AWS_SECRET_ACCESS_KEY=test\nexport AWS_DEFAULT_REGION=us-west-2\nexport AWS_ENDPOINT_URL=http://localhost:4566\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#quick-start","title":"Quick Start","text":""},{"location":"LOCALSTACK-TESTING/#1-start-localstack","title":"1. Start LocalStack","text":"<pre><code>make localstack-start\n</code></pre> <p>This will: - Start LocalStack in a Docker container - Expose the LocalStack gateway on port 4566 - Automatically run initialization scripts to create test resources - Store data in <code>/tmp/localstack</code> for persistence</p>"},{"location":"LOCALSTACK-TESTING/#2-check-initialization-status","title":"2. Check Initialization Status","text":"<pre><code># View LocalStack logs\nmake localstack-logs\n\n# Check resource IDs\nmake localstack-status\n</code></pre> <p>The initialization script creates: - VPC with DNS support - Internet Gateway - Public subnet in us-west-2a - Route table with internet access - Security group with SSH access - Test AMI for launching instances</p>"},{"location":"LOCALSTACK-TESTING/#3-verify-localstack-is-ready","title":"3. Verify LocalStack is Ready","text":"<pre><code>./scripts/wait-for-localstack.sh\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#4-run-tests","title":"4. Run Tests","text":"<pre><code># Run integration tests\nmake test-integration\n\n# Or run all tests\nmake test\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#5-run-orca-locally","title":"5. Run ORCA Locally","text":"<pre><code>make run-local\n</code></pre> <p>This starts ORCA with the LocalStack configuration (<code>config.localstack.yaml</code>).</p>"},{"location":"LOCALSTACK-TESTING/#6-stop-localstack","title":"6. Stop LocalStack","text":"<pre><code>make localstack-stop\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#configuration","title":"Configuration","text":""},{"location":"LOCALSTACK-TESTING/#localstack-configuration","title":"LocalStack Configuration","text":"<p>The LocalStack environment is configured in <code>docker-compose.localstack.yml</code>:</p> <ul> <li>Services: EC2, IAM, STS, CloudWatch, CloudWatch Logs</li> <li>Endpoint: http://localhost:4566</li> <li>Persistence: Enabled (data survives container restarts)</li> <li>VM Manager: Docker (for EC2 instances)</li> </ul>"},{"location":"LOCALSTACK-TESTING/#orca-configuration","title":"ORCA Configuration","text":"<p>ORCA uses <code>config.localstack.yaml</code> for LocalStack testing:</p> <pre><code>aws:\n  region: us-west-2\n  localStackEndpoint: http://localhost:4566\n  credentials:\n    accessKeyID: test\n    secretAccessKey: test\n  # ... other settings\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#working-with-localstack","title":"Working with LocalStack","text":""},{"location":"LOCALSTACK-TESTING/#querying-resources","title":"Querying Resources","text":"<pre><code># List EC2 instances\nawslocal ec2 describe-instances --region us-west-2\n\n# List VPCs\nawslocal ec2 describe-vpcs --region us-west-2\n\n# List security groups\nawslocal ec2 describe-security-groups --region us-west-2\n\n# List subnets\nawslocal ec2 describe-subnets --region us-west-2\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#launching-test-instances","title":"Launching Test Instances","text":"<pre><code># Get resource IDs from initialization\nsource /tmp/localstack-orca-resources.env\n\n# Launch an instance\nawslocal ec2 run-instances \\\n  --image-id $LOCALSTACK_AMI_ID \\\n  --instance-type t3.medium \\\n  --subnet-id $LOCALSTACK_SUBNET_ID \\\n  --security-group-ids $LOCALSTACK_SG_ID \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=test-instance}]'\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#viewing-logs","title":"Viewing Logs","text":"<pre><code># Follow all LocalStack logs\nmake localstack-logs\n\n# View specific service logs\ndocker exec orca-localstack cat /var/log/localstack/ec2.log\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#opening-a-shell-in-localstack","title":"Opening a Shell in LocalStack","text":"<pre><code>make localstack-shell\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#testing-workflow","title":"Testing Workflow","text":""},{"location":"LOCALSTACK-TESTING/#unit-tests","title":"Unit Tests","text":"<p>Unit tests don't require LocalStack and use mocks:</p> <pre><code>make test\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#integration-tests","title":"Integration Tests","text":"<p>Integration tests connect to LocalStack and test real AWS SDK interactions:</p> <pre><code># Start LocalStack\nmake localstack-start\n\n# Wait for it to be ready\n./scripts/wait-for-localstack.sh\n\n# Run integration tests\nmake test-integration\n\n# Stop LocalStack when done\nmake localstack-stop\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#testing-orca-end-to-end","title":"Testing ORCA End-to-End","text":"<pre><code># 1. Start LocalStack\nmake localstack-start\n\n# 2. Build ORCA\nmake build\n\n# 3. Run ORCA with LocalStack config\nmake run-local\n\n# 4. In another terminal, deploy a test pod\nkubectl apply -f examples/test-pod.yaml\n\n# 5. Check ORCA logs to see instance creation\n# 6. Verify instance in LocalStack\nawslocal ec2 describe-instances\n\n# 7. Stop ORCA (Ctrl+C)\n# 8. Stop LocalStack\nmake localstack-stop\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#makefile-targets","title":"Makefile Targets","text":"Target Description <code>make localstack-start</code> Start LocalStack container <code>make localstack-stop</code> Stop LocalStack container <code>make localstack-restart</code> Restart LocalStack <code>make localstack-logs</code> Follow LocalStack logs <code>make localstack-status</code> Show created resource IDs <code>make localstack-shell</code> Open bash in LocalStack container <code>make test-integration</code> Run integration tests <code>make run-local</code> Run ORCA with LocalStack config"},{"location":"LOCALSTACK-TESTING/#troubleshooting","title":"Troubleshooting","text":""},{"location":"LOCALSTACK-TESTING/#localstack-wont-start","title":"LocalStack Won't Start","text":"<pre><code># Check if port 4566 is already in use\nlsof -i :4566\n\n# Check Docker status\ndocker ps -a | grep localstack\n\n# View container logs\ndocker logs orca-localstack\n\n# Remove and restart\nmake localstack-stop\ndocker rm -f orca-localstack\nmake localstack-start\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#resources-not-initialized","title":"Resources Not Initialized","text":"<pre><code># Check initialization logs\nmake localstack-logs | grep -A 20 \"Initializing LocalStack\"\n\n# Resource IDs are saved here\ncat /tmp/localstack-orca-resources.env\n\n# Re-run initialization manually\ndocker exec orca-localstack /docker-entrypoint-initaws.d/01-init-ec2.sh\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#tests-fail-with-connection-errors","title":"Tests Fail with Connection Errors","text":"<pre><code># Verify LocalStack is running\ndocker ps | grep localstack\n\n# Check LocalStack health\ncurl http://localhost:4566/_localstack/health\n\n# Verify EC2 service is available\nawslocal ec2 describe-regions --region us-west-2\n\n# Wait for LocalStack to be fully ready\n./scripts/wait-for-localstack.sh\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#ec2-instances-dont-start","title":"EC2 Instances Don't Start","text":"<p>LocalStack uses Docker-in-Docker for EC2 instances. Ensure:</p> <pre><code># Docker socket is mounted (in docker-compose.localstack.yml)\nvolumes:\n  - \"/var/run/docker.sock:/var/run/docker.sock\"\n\n# Check LocalStack EC2 logs\ndocker exec orca-localstack cat /var/log/localstack/ec2.log\n</code></pre> <p>Note: LocalStack's EC2 emulation has limitations compared to real AWS: - Instance types are simulated (no real resource limits) - Networking is simplified - Some advanced EC2 features may not work</p>"},{"location":"LOCALSTACK-TESTING/#clear-all-localstack-data","title":"Clear All LocalStack Data","text":"<pre><code># Stop LocalStack\nmake localstack-stop\n\n# Clear persistent data\nrm -rf /tmp/localstack/*\n\n# Clear resource IDs\nrm -f /tmp/localstack-orca-resources.env\n\n# Restart fresh\nmake localstack-start\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"LOCALSTACK-TESTING/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: Integration Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.23'\n\n      - name: Start LocalStack\n        run: make localstack-start\n\n      - name: Wait for LocalStack\n        run: ./scripts/wait-for-localstack.sh\n\n      - name: Run Integration Tests\n        run: make test-integration\n\n      - name: Stop LocalStack\n        if: always()\n        run: make localstack-stop\n</code></pre>"},{"location":"LOCALSTACK-TESTING/#differences-from-real-aws","title":"Differences from Real AWS","text":"<p>Be aware of these differences when using LocalStack:</p>"},{"location":"LOCALSTACK-TESTING/#supported-features","title":"Supported Features","text":"<ul> <li>\u2705 EC2 instance launch/terminate</li> <li>\u2705 VPC, subnets, security groups</li> <li>\u2705 Tags and resource filtering</li> <li>\u2705 IAM roles and policies (basic)</li> <li>\u2705 CloudWatch Logs</li> <li>\u2705 Basic networking</li> </ul>"},{"location":"LOCALSTACK-TESTING/#limitedunsupported-features","title":"Limited/Unsupported Features","text":"<ul> <li>\u274c Spot instance pricing (spot launches work, but no real pricing)</li> <li>\u274c Capacity Reservations</li> <li>\u274c Real instance resource limits</li> <li>\u274c Some advanced networking features</li> <li>\u274c AWS-specific instance metadata</li> <li>\u274c Real GPU support</li> </ul>"},{"location":"LOCALSTACK-TESTING/#testing-strategy","title":"Testing Strategy","text":"<p>Use LocalStack for: - Unit-level integration tests: Testing AWS SDK calls - Logic validation: Testing tag application, instance selection - Error handling: Testing timeout, failure scenarios - Development: Fast iteration without AWS costs</p> <p>Use real AWS for: - End-to-end testing: Full production-like validation - Performance testing: Real instance performance - Advanced features: Capacity Reservations, Spot, GPUs - Pre-production validation: Final testing before release</p>"},{"location":"LOCALSTACK-TESTING/#best-practices","title":"Best Practices","text":"<ol> <li>Always wait for initialization: Use <code>./scripts/wait-for-localstack.sh</code></li> <li>Use resource IDs from env file: Source <code>/tmp/localstack-orca-resources.env</code></li> <li>Check logs frequently: LocalStack logs reveal issues quickly</li> <li>Clear data between test runs: Ensure clean state</li> <li>Don't rely on persistence for CI: Treat as ephemeral</li> <li>Test failures locally first: LocalStack makes debugging easier</li> <li>Validate against real AWS: LocalStack is a simulation</li> </ol>"},{"location":"LOCALSTACK-TESTING/#additional-resources","title":"Additional Resources","text":"<ul> <li>LocalStack Documentation</li> <li>LocalStack AWS Service Coverage</li> <li>awslocal CLI Reference</li> <li>LocalStack GitHub</li> </ul>"},{"location":"LOCALSTACK-TESTING/#getting-help","title":"Getting Help","text":"<p>If you encounter issues with LocalStack:</p> <ol> <li>Check LocalStack logs: <code>make localstack-logs</code></li> <li>Verify health: <code>curl http://localhost:4566/_localstack/health</code></li> <li>Check GitHub issues: https://github.com/localstack/localstack/issues</li> <li>LocalStack Community: https://discuss.localstack.cloud/</li> </ol>"},{"location":"LOCALSTACK/","title":"LocalStack Testing Guide","text":"<p>ORCA supports LocalStack for local AWS testing without charges. This enables rapid development and testing without touching real AWS resources.</p>"},{"location":"LOCALSTACK/#what-is-localstack","title":"What is LocalStack?","text":"<p>LocalStack is a fully functional local AWS cloud stack that provides drop-in replacements for AWS services including EC2, S3, Lambda, and more.</p>"},{"location":"LOCALSTACK/#quick-start","title":"Quick Start","text":""},{"location":"LOCALSTACK/#1-start-localstack","title":"1. Start LocalStack","text":"<pre><code>./scripts/setup-localstack.sh\n</code></pre> <p>This script will: - Start LocalStack Docker container - Create VPC, subnet, and security group - Update <code>config.localstack.yaml</code> with resource IDs - Display configuration details</p>"},{"location":"LOCALSTACK/#2-run-orca-with-localstack","title":"2. Run ORCA with LocalStack","text":"<pre><code># Build ORCA\nmake build\n\n# Run with LocalStack config\n./bin/orca --config config.localstack.yaml\n</code></pre>"},{"location":"LOCALSTACK/#3-test-pod-creation","title":"3. Test Pod Creation","text":"<pre><code># In another terminal, create a test pod\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: localstack-test-pod\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n  - key: orca.research/burst-node\n    operator: Equal\n    value: \"true\"\n    effect: NoSchedule\n  containers:\n  - name: test\n    image: busybox\n    command: [\"sleep\", \"300\"]\nEOF\n\n# Watch pod status\nkubectl get pod localstack-test-pod -w\n</code></pre>"},{"location":"LOCALSTACK/#localstack-vs-real-aws","title":"LocalStack vs Real AWS","text":"Feature LocalStack Real AWS Cost Free Pay per use Speed Fast (local) Network latency Data Ephemeral Persistent Instances Simulated Real VMs Networking Mocked Full AWS networking AMIs Any ID works Must be valid"},{"location":"LOCALSTACK/#configuration","title":"Configuration","text":""},{"location":"LOCALSTACK/#localstack-endpoint","title":"LocalStack Endpoint","text":"<pre><code># config.localstack.yaml\naws:\n  region: us-east-1\n  localStackEndpoint: \"http://localhost:4566\"\n  credentials:\n    accessKeyID: \"test\"\n    secretAccessKey: \"test\"\n</code></pre>"},{"location":"LOCALSTACK/#environment-variables","title":"Environment Variables","text":"<p>LocalStack requires these environment variables:</p> <pre><code>export AWS_ACCESS_KEY_ID=test\nexport AWS_SECRET_ACCESS_KEY=test\nexport AWS_DEFAULT_REGION=us-east-1\nexport AWS_ENDPOINT_URL=http://localhost:4566\n</code></pre>"},{"location":"LOCALSTACK/#testing-workflow","title":"Testing Workflow","text":""},{"location":"LOCALSTACK/#development-cycle","title":"Development Cycle","text":"<ol> <li>Write code - Implement feature</li> <li>Unit tests - Test in isolation with mocks</li> <li>LocalStack tests - Test AWS integration locally</li> <li>Real AWS tests - Final validation (minimal)</li> </ol>"},{"location":"LOCALSTACK/#example-testing-instance-creation","title":"Example: Testing Instance Creation","text":"<pre><code># 1. Start LocalStack\n./scripts/setup-localstack.sh\n\n# 2. Run ORCA\n./bin/orca --config config.localstack.yaml &amp;\nORCA_PID=$!\n\n# 3. Create test pod\nkubectl apply -f examples/test-pod.yaml\n\n# 4. Verify instance created in LocalStack\naws ec2 describe-instances \\\n  --endpoint-url http://localhost:4566 \\\n  --filters \"Name=tag:orca.research/provider,Values=orca\"\n\n# 5. Cleanup\nkubectl delete pod localstack-test-pod\nkill $ORCA_PID\n</code></pre>"},{"location":"LOCALSTACK/#debugging-localstack","title":"Debugging LocalStack","text":""},{"location":"LOCALSTACK/#check-localstack-health","title":"Check LocalStack Health","text":"<pre><code>curl http://localhost:4566/_localstack/health\n</code></pre>"},{"location":"LOCALSTACK/#view-localstack-logs","title":"View LocalStack Logs","text":"<pre><code>docker logs orca-localstack\n</code></pre>"},{"location":"LOCALSTACK/#list-resources-in-localstack","title":"List Resources in LocalStack","text":"<pre><code># List instances\naws ec2 describe-instances \\\n  --endpoint-url http://localhost:4566\n\n# List VPCs\naws ec2 describe-vpcs \\\n  --endpoint-url http://localhost:4566\n\n# List security groups\naws ec2 describe-security-groups \\\n  --endpoint-url http://localhost:4566\n</code></pre>"},{"location":"LOCALSTACK/#common-issues","title":"Common Issues","text":""},{"location":"LOCALSTACK/#localstack-not-starting","title":"LocalStack not starting","text":"<pre><code># Check Docker\ndocker ps | grep localstack\n\n# Restart LocalStack\ndocker restart orca-localstack\n\n# Check logs\ndocker logs orca-localstack\n</code></pre>"},{"location":"LOCALSTACK/#connection-refused","title":"Connection refused","text":"<pre><code># Verify endpoint\ncurl http://localhost:4566/_localstack/health\n\n# Check port forwarding\ndocker port orca-localstack\n</code></pre>"},{"location":"LOCALSTACK/#invalid-vpcsubnet-ids","title":"Invalid VPC/Subnet IDs","text":"<pre><code># Recreate resources\n./scripts/setup-localstack.sh\n</code></pre>"},{"location":"LOCALSTACK/#cleanup","title":"Cleanup","text":""},{"location":"LOCALSTACK/#stop-localstack","title":"Stop LocalStack","text":"<pre><code>docker stop orca-localstack\ndocker rm orca-localstack\n</code></pre>"},{"location":"LOCALSTACK/#full-cleanup","title":"Full Cleanup","text":"<pre><code># Stop and remove LocalStack\ndocker stop orca-localstack\ndocker rm orca-localstack\n\n# Remove images (optional)\ndocker rmi localstack/localstack:latest\n</code></pre>"},{"location":"LOCALSTACK/#integration-tests-with-localstack","title":"Integration Tests with LocalStack","text":"<p>Integration tests can use LocalStack automatically:</p> <pre><code>// +build integration\n\nfunc TestCreateInstance_LocalStack(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"skipping integration test\")\n    }\n\n    // Load LocalStack config\n    cfg, err := config.LoadConfig(\"../../config.localstack.yaml\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Create client (will use LocalStack endpoint)\n    client, err := aws.NewClient(context.Background(), cfg)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Create test pod\n    pod := createTestPod()\n\n    // Create instance\n    instanceID, err := client.CreateInstance(context.Background(), pod, \"t3.small\")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Verify instance exists\n    instance, err := client.DescribeInstance(context.Background(), instanceID)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    if instance.State != \"running\" &amp;&amp; instance.State != \"pending\" {\n        t.Errorf(\"expected running/pending, got %s\", instance.State)\n    }\n\n    // Cleanup\n    defer client.TerminateInstance(context.Background(), instanceID)\n}\n</code></pre>"},{"location":"LOCALSTACK/#cicd-with-localstack","title":"CI/CD with LocalStack","text":"<p>GitHub Actions can use LocalStack in CI:</p> <pre><code># .github/workflows/integration-test.yml\njobs:\n  integration-test:\n    runs-on: ubuntu-latest\n    services:\n      localstack:\n        image: localstack/localstack:latest\n        ports:\n          - 4566:4566\n        env:\n          SERVICES: ec2\n          DEBUG: 1\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n\n      - name: Setup LocalStack\n        run: ./scripts/setup-localstack.sh\n\n      - name: Run integration tests\n        run: make integration-test\n        env:\n          AWS_ENDPOINT_URL: http://localhost:4566\n</code></pre>"},{"location":"LOCALSTACK/#best-practices","title":"Best Practices","text":"<ol> <li>Always use LocalStack first - Test locally before real AWS</li> <li>Reset between tests - Restart LocalStack for clean state</li> <li>Check health - Verify LocalStack is ready before tests</li> <li>Use realistic data - Test with production-like configurations</li> <li>Document assumptions - Note LocalStack behavior differences</li> </ol>"},{"location":"LOCALSTACK/#limitations","title":"Limitations","text":"<p>LocalStack is not a perfect AWS replica:</p> <ul> <li>\u274c No real networking between instances</li> <li>\u274c No real VM creation</li> <li>\u274c No actual GPU hardware</li> <li>\u274c Some API features may differ</li> <li>\u274c Performance characteristics differ</li> </ul> <p>For production validation, always test on real AWS after LocalStack testing.</p>"},{"location":"LOCALSTACK/#further-reading","title":"Further Reading","text":"<ul> <li>LocalStack Documentation</li> <li>LocalStack AWS Coverage</li> <li>LocalStack GitHub</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/","title":"Project-Template-Go Repository Analysis","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#executive-summary","title":"Executive Summary","text":"<p>The <code>project-template-go</code> repository is a comprehensive, production-ready Go project template following best practices as of September 2025. It provides a complete structure for creating high-quality Go applications with built-in quality assurance, CI/CD pipelines, and community contribution standards.</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#1-overall-directory-structure-and-organization","title":"1. Overall Directory Structure and Organization","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#root-level-structure","title":"Root Level Structure","text":"<pre><code>project-template-go/\n\u251c\u2500\u2500 .github/                    # GitHub configuration and automation\n\u251c\u2500\u2500 .air.toml                   # Development hot-reload config\n\u251c\u2500\u2500 .editorconfig               # Cross-editor code formatting standards\n\u251c\u2500\u2500 .gitignore                  # Git exclusion rules\n\u251c\u2500\u2500 .golangci.yml               # Linting configuration\n\u251c\u2500\u2500 .pre-commit-config.yaml     # Git hooks for code quality\n\u251c\u2500\u2500 CHANGELOG.md                # Versioning changelog (Keep a Changelog format)\n\u251c\u2500\u2500 cmd/                        # Executable commands\n\u251c\u2500\u2500 Dockerfile                  # Container configuration (multi-stage)\n\u251c\u2500\u2500 docs/                       # Documentation files\n\u251c\u2500\u2500 go.mod                      # Go module definition\n\u251c\u2500\u2500 go.sum                      # Dependency lock file\n\u251c\u2500\u2500 internal/                   # Internal packages (not exported)\n\u251c\u2500\u2500 Makefile                    # Build automation\n\u251c\u2500\u2500 pkg/                        # Public packages (optional)\n\u251c\u2500\u2500 README.md                   # Project overview\n\u251c\u2500\u2500 scripts/                    # Utility scripts\n\u251c\u2500\u2500 tests/                      # Test structure\n\u2514\u2500\u2500 LICENSE                     # MIT License template\n</code></pre>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#key-design-principles","title":"Key Design Principles","text":"<p>Three-Layer Package Organization (Industry Standard):</p> <ol> <li>cmd/ - Application entry points</li> <li>Contains executable commands</li> <li>One subdirectory per executable</li> <li> <p>Example: <code>cmd/app/main.go</code></p> </li> <li> <p>internal/ - Internal implementation packages</p> </li> <li>Cannot be imported by external packages</li> <li>Contains:<ul> <li><code>config/</code> - Configuration management</li> <li><code>handler/</code> - HTTP/API handlers</li> <li><code>service/</code> - Business logic layer</li> </ul> </li> <li> <p>Enforces API boundaries</p> </li> <li> <p>pkg/ - Public packages</p> </li> <li>Optional directory for shareable libraries</li> <li>Packages here can be imported externally</li> <li>Should be used carefully for public APIs</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#2-github-pages-setup","title":"2. GitHub Pages Setup","text":"<p>Current Status: Not explicitly configured in this template</p> <p>Recommendations Based on Structure: - The template does NOT include a dedicated GitHub Pages configuration - However, the structure supports adding GitHub Pages by:   - Creating a <code>docs/</code> directory at repository root with markdown files   - Enabling GitHub Pages in repository settings to use <code>docs/</code> folder   - Or using GitHub Actions to build and deploy to <code>gh-pages</code> branch</p> <p>Documentation Files Present: - <code>README.md</code> - Main project documentation - <code>docs/CONTRIBUTING.md</code> - Contribution guidelines - <code>docs/CODE_OF_CONDUCT.md</code> - Community standards - <code>docs/SECURITY.md</code> - Security policy - <code>.github/README.md</code> - Project management structure</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#3-documentation-structure","title":"3. Documentation Structure","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#documentation-organization","title":"Documentation Organization","text":"<pre><code>docs/\n\u251c\u2500\u2500 CODE_OF_CONDUCT.md          # Community conduct standards\n\u251c\u2500\u2500 CONTRIBUTING.md             # How to contribute to project\n\u251c\u2500\u2500 SECURITY.md                 # Security policy and reporting\n</code></pre>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#key-documentation-files","title":"Key Documentation Files","text":"<p>README.md (Project Root) - Feature overview - Installation instructions - Quick start guide - Development prerequisites - Available Make targets - Environment variables documentation - API endpoints documentation - Acknowledgments</p> <p>docs/CONTRIBUTING.md - Getting started for contributors - Development setup - Code style guidelines - Pull request process - Commit message conventions - Issue reporting guidelines</p> <p>docs/CODE_OF_CONDUCT.md - Based on Contributor Covenant v1.4 - Behavioral standards - Enforcement procedures - Scope clarification</p> <p>docs/SECURITY.md - Vulnerability reporting procedures (NOT public GitHub issues) - Email-based reporting (template includes placeholder) - Supported versions table - 48-hour response guarantee - Coordinated vulnerability disclosure principles</p> <p>tests/README.md - Test structure explanation - Test running commands (note: uses npm commands, should be <code>make test</code>) - Test writing guidelines - Coverage recommendations</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#documentation-best-practices-implemented","title":"Documentation Best Practices Implemented","text":"<ul> <li>Keep a Changelog format (CHANGELOG.md)</li> <li>Semantic Versioning</li> <li>Clear contribution guidelines</li> <li>Security reporting procedures</li> <li>Code of conduct integration</li> <li>Multiple entry points for different audiences</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#4-build-and-deployment-configurations","title":"4. Build and Deployment Configurations","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#dockerfile-multi-stage-build","title":"Dockerfile (Multi-Stage Build)","text":"<p>Build Stage: <pre><code>FROM golang:1.23-alpine AS builder\n</code></pre> - Uses Alpine Linux for minimal base size - Installs <code>git</code> and <code>ca-certificates</code> for module downloads and HTTPS - Creates non-root user (<code>appuser</code>) for security - Downloads and verifies dependencies - Builds with optimizations: <code>-w -s -extldflags \"-static\"</code></p> <p>Runtime Stage: <pre><code>FROM scratch\n</code></pre> - Starts from empty image for minimal footprint - Copies SSL certificates for HTTPS - Copies user info for permission handling - Uses non-root user execution - Exposes port 8080 - Includes HEALTHCHECK</p> <p>Security Features: - Non-root user execution - Static linking (no external library dependencies) - Health check endpoint - Minimal attack surface</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#makefile-targets","title":"Makefile Targets","text":"<p>Build Targets: <pre><code>make build              # Build binary\nmake build-linux       # Cross-compile for Linux\nmake clean             # Remove build artifacts\nmake run               # Build and run\nmake docker-build      # Build Docker image\n</code></pre></p> <p>Testing Targets: <pre><code>make test              # Run tests\nmake test-race         # Run with race detector\nmake coverage          # Generate coverage report\n</code></pre></p> <p>Quality Targets: <pre><code>make fmt               # Format code with gofmt\nmake lint              # Run golangci-lint\nmake vet               # Run go vet\nmake staticcheck       # Run staticcheck\nmake gosec             # Run security scanner\nmake pre-commit        # Run all quality checks\n</code></pre></p> <p>Installation/Dependency Targets: <pre><code>make deps              # Download/tidy dependencies\nmake install-tools    # Install dev tools\nmake install-air      # Install air for hot-reload\n</code></pre></p> <p>Development Target: <pre><code>make dev               # Run with hot-reload (requires air)\n</code></pre></p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#build-information-integration","title":"Build Information Integration","text":"<p>Linker flags capture: <pre><code>VERSION    = git describe --tags --always --dirty\nBUILD_TIME = date -u +\"%Y-%m-%dT%H:%M:%SZ\"\nGIT_COMMIT = git rev-parse --short HEAD\n</code></pre></p> <p>These are injected at compile time for version tracking.</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#5-testing-setup","title":"5. Testing Setup","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#test-directory-structure","title":"Test Directory Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/              # Unit tests directory\n\u251c\u2500\u2500 integration/       # Integration tests directory\n\u251c\u2500\u2500 e2e/               # End-to-end tests directory\n\u251c\u2500\u2500 fixtures/          # Shared test data\n\u2514\u2500\u2500 README.md          # Testing guidelines\n</code></pre>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#test-files-located","title":"Test Files Located","text":"<p>Most test files are co-located with source code (not in tests/ directory): - <code>internal/config/config_test.go</code> - <code>internal/service/service_test.go</code></p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#testing-patterns-implemented","title":"Testing Patterns Implemented","text":"<p>Unit Test Example (service_test.go):</p> <ol> <li>Table-driven tests for multiple scenarios</li> <li>Subtests using <code>t.Run()</code></li> <li>Arrange-Act-Assert pattern</li> <li>Context-based testing</li> <li>Error case handling</li> <li>Dependency injection for testability</li> </ol> <p>Sample Test Function: <pre><code>func TestProcessData(t *testing.T) {\n    tests := []struct {\n        name        string\n        input       string\n        expected    string\n        expectError bool\n    }{\n        // Test cases...\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test implementation\n        })\n    }\n}\n</code></pre></p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#make-test-commands","title":"Make Test Commands","text":"<pre><code>make test              # go test -v ./...\nmake test-race        # go test -race -v ./...\nmake coverage         # Coverage report with HTML output\n</code></pre>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#testing-best-practices","title":"Testing Best Practices","text":"<ul> <li>Use descriptive test names</li> <li>Follow Arrange-Act-Assert pattern</li> <li>Mock external dependencies</li> <li>Use fixtures for consistent test data</li> <li>Focus on critical paths and edge cases</li> <li>Aim for high coverage, not 100% for its own sake</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#6-cicd-pipeline-structure","title":"6. CI/CD Pipeline Structure","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#github-actions-workflow-githubworkflowsciyml","title":"GitHub Actions Workflow (.github/workflows/ci.yml)","text":"<p>Triggers: - Push to: main, develop branches - Pull request to: main branch</p> <p>Jobs:</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#1-test-job","title":"1. Test Job","text":"<ul> <li>Matrix Strategy:</li> <li>Go versions: 1.22.x, 1.23.x</li> <li>Operating systems: ubuntu-latest, macos-latest, windows-latest</li> <li> <p>Total: 6 concurrent test runs</p> </li> <li> <p>Steps:</p> </li> <li>Checkout code (actions/checkout@v4)</li> <li>Set up Go (actions/setup-go@v5)</li> <li>Cache Go modules for performance</li> <li>Download and verify dependencies</li> <li>Run go vet</li> <li>Install and run staticcheck</li> <li>Install and run gosec</li> <li>Run tests with race detector and coverage</li> <li>Upload coverage to Codecov (Ubuntu + Go 1.23 only)</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#2-lint-job","title":"2. Lint Job","text":"<ul> <li>Runs on ubuntu-latest only</li> <li>Uses golangci-lint-action@v4</li> <li>Timeout: 5 minutes</li> <li>Runs only linting (not duplicating test validation)</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#3-build-job","title":"3. Build Job","text":"<ul> <li>Depends on: test and lint jobs pass</li> <li>Builds final binary</li> <li>Tests binary execution</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#4-docker-job","title":"4. Docker Job","text":"<ul> <li>Depends on: test and lint jobs pass</li> <li>Sets up Docker Buildx</li> <li>Builds Docker image</li> <li>Uses GitHub Actions cache for layer caching</li> <li>Does NOT push (useful for PR validation)</li> </ul> <p>Cache Strategy: <pre><code>key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}\n</code></pre> - OS-specific caching - Go version-specific caching - Invalidates on dependency changes</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#7-standardized-files-and-conventions","title":"7. Standardized Files and Conventions","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#pre-commit-configuration-pre-commit-configyaml","title":"Pre-Commit Configuration (.pre-commit-config.yaml)","text":"<p>Local Hooks (Go-specific):</p> <ol> <li>go-fmt - Format code with <code>gofmt -s -w</code></li> <li>go-mod-tidy - Automatically tidy dependencies</li> <li>golangci-lint - Comprehensive linting with <code>--fix</code></li> <li>go-vet - Suspicious construct detection</li> <li>staticcheck - Advanced static analysis</li> <li>gosec - Security vulnerability scanning</li> <li>go-test - Run full test suite before commit</li> </ol> <p>Generic Hooks (pre-commit/pre-commit-hooks): - trailing-whitespace - end-of-file-fixer - check-yaml - check-added-large-files - check-merge-conflict</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#golangci-lint-configuration-golangciyml","title":"Golangci-Lint Configuration (.golangci.yml)","text":"<p>Linters Enabled (28 total): - bodyclose, deadcode, depguard, dogsled, dupl - errcheck, exportloopref, exhaustive, funlen - gochecknoinits, goconst, gocritic, gocyclo - gofmt, goimports, golint, gomnd, goprintffuncname - gosec, gosimple, govet, ineffassign, interfacer - lll, maligned, misspell, nakedret, noctx - nolintlint, rowserrcheck, scopelint, staticcheck - structcheck, stylecheck, typecheck, unconvert - unparam, unused, varcheck, whitespace</p> <p>Key Settings: - Line length: 120 characters (configurable) - Cyclomatic complexity: max 10 - Naked return: max 30 lines - Tests excluded from certain linters (gocyclo, errcheck, dupl, gosec, funlen)</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#editorconfig-editorconfig","title":"EditorConfig (.editorconfig)","text":"<p>Root Settings: <pre><code>charset = utf-8\nend_of_line = lf\nindent_style = space\nindent_size = 2\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n</code></pre></p> <p>Exceptions: - Markdown: trim_trailing_whitespace = false (preserve formatting) - Python: indent_size = 4 - Makefile: indent_style = tab (required by Make)</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#air-configuration-airtoml","title":"Air Configuration (.air.toml)","text":"<p>Development hot-reload setup: - Build command: <code>go build -o ./tmp/main ./cmd/app</code> - Watch directories: Excludes assets, tmp, vendor, testdata - Include extensions: go, tpl, tmpl, html - Exclude patterns: _test.go files - Delay: 1000ms between recompiles - Colored output for different components</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#gitignore","title":".gitignore","text":"<p>Comprehensive Ignores: - node_modules/ (legacy, not used in Go project) - Build artifacts: /build, /dist, /out - Environment: .env, .env.* (all variations) - IDEs: .vscode/, .idea/, vim swapfiles - OS: .DS_Store, Windows thumbs.db - Logs: logs/, *.log - Runtime: pids, *.pid, *.seed - Coverage: coverage/ - Python artifacts (if scripts present) - Temporary files: *.tmp, *.temp</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#8-iconsimages-organization","title":"8. Icons/Images Organization","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#current-status","title":"Current Status","text":"<p>No dedicated images/icons directory exists in the template.</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#organization-recommendations","title":"Organization Recommendations","text":"<p>If images/icons are needed, follow these patterns:</p> <p>Option 1: GitHub Assets - Store in <code>.github/assets/</code> or <code>.github/images/</code> - Reference via absolute GitHub URLs in markdown</p> <p>Option 2: Documentation Assets - Store in <code>docs/assets/</code> or <code>docs/images/</code> - Reference relative to markdown files</p> <p>Option 3: Project Assets - Store in <code>assets/</code> or <code>resources/</code> at root level - Include in <code>.gitignore</code> if they're generated - Exclude if they're version-controlled</p> <p>Example Organization: <pre><code>project-template-go/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 logo.svg\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 architecture-diagram.png\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 workflow-diagram.png\n\u2502   \u2502   \u2514\u2500\u2500 icons/\n\u2502   \u2502       \u251c\u2500\u2500 feature1.svg\n\u2502   \u2502       \u2514\u2500\u2500 feature2.svg\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u2514\u2500\u2500 images/\n\u2502   \u2502       \u251c\u2500\u2500 setup-guide.png\n\u2502   \u2502       \u2514\u2500\u2500 architecture.png\n</code></pre></p> <p>GitHub Markdown Reference Example: <pre><code>![Logo](/.github/assets/images/logo.svg)\n![Architecture](./.github/assets/images/architecture.png)\n</code></pre></p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#9-github-configuration-files","title":"9. GitHub Configuration Files","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#github-labels-githublabelsyml","title":"GitHub Labels (.github/labels.yml)","text":"<p>Comprehensive Label System (22 total):</p> <p>Type Labels (5): - bug (red #d73a4a) - enhancement (light blue #a2eeef) - documentation (blue #0075ca) - question (purple #d876e3) - technical-debt (yellow #fbca04)</p> <p>Priority Labels (3): - priority: high (red #d93f0b) - priority: medium (yellow #fbca04) - priority: low (green #0e8a16)</p> <p>Area Labels (7 - Go-specific): - area: cmd (light blue #c5def5) - area: pkg (light blue #c5def5) - area: internal (light blue #c5def5) - area: build (light blue #c5def5) - area: tests (light blue #c5def5) - area: docs (light blue #c5def5) - area: deps (light blue #c5def5)</p> <p>Status Labels (4): - triage (gray #ededed) - ready (green #0e8a16) - in-progress (yellow #fbca04) - blocked (red #b60205)</p> <p>Resolution Labels (3): - duplicate (gray #cfd3d7) - wontfix (white #ffffff) - invalid (yellow #e4e669)</p> <p>Special Labels (6): - good first issue (purple #7057ff) - help wanted (teal #008672) - breaking-change (red #d73a4a) - security (red #ee0701) - performance (blue #1d76db) - dependencies (blue #0366d6)</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#github-issue-templates","title":"GitHub Issue Templates","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#bug-report-template-bug_reportyml","title":"Bug Report Template (bug_report.yml)","text":"<p>Fields: - Component dropdown (cmd/, pkg/, internal/, Build, Tests, Docs, Dependencies) - Bug description (required) - Steps to reproduce (required) - Expected behavior (required) - Actual behavior (required) - Version (required) - Go version dropdown (1.23, 1.22, 1.21, Other) - OS dropdown (macOS, Linux, Windows, Other) - Architecture (optional, e.g., amd64, arm64) - CGO status (optional) - Logs/stack trace - Additional context</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#feature-request-template-feature_requestyml","title":"Feature Request Template (feature_request.yml)","text":"<p>Fields: - Who benefits dropdown (CLI users, Library consumers, API users, Maintainers, All, Other) - Component dropdown (6 options) - Problem statement (required) - Proposed solution (required) - Alternatives considered (optional) - Example workflow (required) - Priority dropdown (Critical, High, Medium, Low) - Additional context</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#pull-request-template","title":"Pull Request Template","text":"<p>Sections: - Description - Related Issues (with Closes #123 format) - Type of Change (7 types with emojis) - User Impact (7 options) - Testing (6 checkboxes + test steps) - Checklist (9 items including style, tests, docs, changelog) - Breaking Changes - Performance Impact - Benchmarks (if applicable) - Additional Context</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#dependabot-configuration-githubdependabotyml","title":"Dependabot Configuration (.github/dependabot.yml)","text":"<p>Go Modules Updates: - Schedule: Weekly, Monday at 09:00 UTC - Open PR limit: 10 - Reviewer: scttfrdmn - Commit prefix: \"deps\"</p> <p>GitHub Actions Updates: - Schedule: Weekly, Monday at 09:00 UTC - Open PR limit: 5 - Reviewer: scttfrdmn - Commit prefix: \"ci\"</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#funding-configuration-githubfundingyml","title":"Funding Configuration (.github/FUNDING.yml)","text":"<ul> <li>Ko-fi: scttfrdmn (sponsor link)</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#10-setup-and-installation-scripts","title":"10. Setup and Installation Scripts","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#install-hooks-script-scriptsinstall-hookssh","title":"Install Hooks Script (scripts/install-hooks.sh)","text":"<p>Functionality:</p> <ol> <li>Prerequisite Checks:</li> <li>Verifies pre-commit is installed</li> <li> <p>Provides installation instructions if missing</p> </li> <li> <p>Installs Go Tools:</p> </li> <li>golangci-lint</li> <li>staticcheck</li> <li>gosec</li> <li> <p>air (optional, for development)</p> </li> <li> <p>Sets Up Pre-Commit Hooks:</p> </li> <li>Runs <code>pre-commit install</code></li> <li>Runs hooks on all files to verify setup</li> <li> <p>Handles expected failures gracefully</p> </li> <li> <p>Success Output:</p> </li> <li>Confirms all tools installed</li> <li>Lists what's configured</li> <li>Reminds user of manual command</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#github-labels-setup-script-githubscriptssetup-github-labelssh","title":"GitHub Labels Setup Script (.github/scripts/setup-github-labels.sh)","text":"<ul> <li>Syncs labels from <code>.github/labels.yml</code></li> <li>Uses GitHub CLI (<code>gh label sync</code>)</li> <li>Can be run after cloning</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#11-application-code-structure","title":"11. Application Code Structure","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#entry-point-cmdappmaingo","title":"Entry Point (cmd/app/main.go)","text":"<p>Pattern: - Load configuration - Initialize services - Setup graceful shutdown - Start application - Handle signals (SIGTERM, SIGINT) - Shutdown with timeout (30 seconds)</p> <p>Key Features: - Context-based control - Signal handling - Graceful shutdown - Error propagation</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#configuration-package-internalconfigconfiggo","title":"Configuration Package (internal/config/config.go)","text":"<p>Config Struct: <pre><code>type Config struct {\n    Port        int\n    Host        string\n    Environment string\n    LogLevel    string\n    Debug       bool\n}\n</code></pre></p> <p>Loading Strategy: - Sensible defaults - Environment variable overrides - String to int conversion for PORT - Boolean parsing for DEBUG</p> <p>Environment Variables: - PORT (default: 8080) - HOST (default: 0.0.0.0) - ENVIRONMENT (default: development) - LOG_LEVEL (default: info) - DEBUG (default: false)</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#service-layer-internalserviceservicego","title":"Service Layer (internal/service/service.go)","text":"<p>Responsibilities: - Business logic implementation - Service interface definition - Context-based execution</p> <p>Example Methods: - Health() - Service health check - GetInfo() - Service information - ProcessData() - Example business logic</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#handler-layer-internalhandlerhandlergo","title":"Handler Layer (internal/handler/handler.go)","text":"<p>HTTP Server Setup: - HTTP handlers registration - Timeouts: Read(15s), Write(15s), Idle(60s) - Graceful shutdown support</p> <p>Endpoints: - GET /health - Health check - GET /info - Service information - POST /api/process - Data processing</p> <p>Error Handling: - Method validation - JSON parsing errors - Business logic errors - Service errors</p>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#12-key-takeaways-for-orca-project","title":"12. Key Takeaways for ORCA Project","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#what-to-replicate","title":"What to Replicate","text":"<ol> <li>Directory Structure</li> <li>Use cmd/, internal/, pkg/ organization</li> <li> <p>Keep internal/ for non-exported packages</p> </li> <li> <p>Build System</p> </li> <li>Comprehensive Makefile with quality targets</li> <li>Multi-stage Docker build</li> <li> <p>Version/build info capture</p> </li> <li> <p>Quality Assurance</p> </li> <li>Pre-commit hooks for automated checks</li> <li>Multiple linting tools (golangci-lint, staticcheck, gosec)</li> <li> <p>Test execution before commit</p> </li> <li> <p>CI/CD Pipeline</p> </li> <li>Matrix testing across Go versions and OS</li> <li>Separate lint and test jobs</li> <li>Docker build validation</li> <li> <p>Coverage upload</p> </li> <li> <p>Documentation</p> </li> <li>Clear CONTRIBUTING guidelines</li> <li>CODE_OF_CONDUCT adoption</li> <li>Security policy</li> <li> <p>Environment variables documentation</p> </li> <li> <p>GitHub Management</p> </li> <li>Comprehensive label system</li> <li>Bug and feature templates</li> <li>Detailed PR template</li> <li> <p>Dependabot automation</p> </li> <li> <p>Development Experience</p> </li> <li>Hot-reload setup with Air</li> <li>Easy tool installation</li> <li>Clear Make targets</li> <li>EditorConfig standardization</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#whats-optional-for-orca","title":"What's Optional for ORCA","text":"<ol> <li>GitHub Pages (if not using existing docs)</li> <li>Specific label colors and names (customize for ORCA)</li> <li>Ko-fi funding link (replace with appropriate sponsor)</li> <li>Specific Go versions (update to match ORCA's support)</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#customization-points","title":"Customization Points","text":"<ol> <li>Update module path in go.mod and all imports</li> <li>Replace <code>scttfrdmn</code> with ORCA organization</li> <li>Update area labels to match ORCA's structure</li> <li>Adjust Go version matrix for CI/CD</li> <li>Update environment variables for ORCA's needs</li> <li>Customize API endpoints for ORCA services</li> <li>Update FUNDING.yml with ORCA's sponsor link</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#13-dependencies-and-tools","title":"13. Dependencies and Tools","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#build-requirements","title":"Build Requirements","text":"<ul> <li>Go 1.23 or higher</li> <li>Make</li> <li>Docker (optional)</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#development-tools","title":"Development Tools","text":"<ul> <li>pre-commit (Python-based)</li> <li>golangci-lint</li> <li>staticcheck</li> <li>gosec</li> <li>air (hot-reload)</li> <li>gh CLI (for label sync)</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#cicd-services","title":"CI/CD Services","text":"<ul> <li>GitHub Actions (native)</li> <li>Codecov (coverage tracking)</li> <li>Docker Hub (optional, for images)</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#14-versioning-and-changelog","title":"14. Versioning and Changelog","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#semantic-versioning","title":"Semantic Versioning","text":"<ul> <li>Format: MAJOR.MINOR.PATCH</li> <li>All versions tracked in CHANGELOG.md</li> <li>Keep a Changelog format</li> </ul>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#changelog-structure","title":"Changelog Structure","text":"<pre><code>## [Unreleased]\n### Added / Changed / Deprecated / Removed / Fixed / Security\n\n## [Version] - YYYY-MM-DD\n### Categories...\n</code></pre>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#15-security-considerations","title":"15. Security Considerations","text":""},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#implemented","title":"Implemented","text":"<ol> <li>Non-root container execution</li> <li>Static linking in Docker</li> <li>HTTPS certificate inclusion</li> <li>Security scanning (gosec)</li> <li>Vulnerability reporting policy</li> <li>Dependency verification</li> <li>Code review via PR workflow</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#recommendations-for-orca","title":"Recommendations for ORCA","text":"<ol> <li>Set up CodeQL analysis in GitHub</li> <li>Enable branch protection rules</li> <li>Require PR reviews before merge</li> <li>Use CODEOWNERS file for code ownership</li> <li>Regular security audits (<code>go audit</code>)</li> <li>Monitor for vulnerable dependencies</li> </ol>"},{"location":"PROJECT_TEMPLATE_GO_ANALYSIS/#conclusion","title":"Conclusion","text":"<p>The project-template-go repository provides a complete, production-ready template for Go projects. It demonstrates best practices in:</p> <ul> <li>Code organization and structure</li> <li>Build automation and deployment</li> <li>Quality assurance and testing</li> <li>CI/CD pipeline design</li> <li>Community contribution standards</li> <li>Security practices</li> <li>Developer experience</li> </ul> <p>This template can serve as an excellent reference for implementing similar standards in the ORCA project, with customizations to match ORCA's specific architecture and requirements.</p>"},{"location":"QUICK-START/","title":"ORCA Quick Start Guide","text":"<p>This guide will help you get ORCA up and running in your Kubernetes cluster.</p>"},{"location":"QUICK-START/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (1.28+)</li> <li>AWS account with appropriate permissions</li> <li>kubectl configured to access your cluster</li> <li>Go 1.21+ (if building from source)</li> </ul>"},{"location":"QUICK-START/#installation-steps","title":"Installation Steps","text":""},{"location":"QUICK-START/#1-build-orca","title":"1. Build ORCA","text":"<pre><code># Clone the repository\ngit clone https://github.com/scttfrdmn/orca.git\ncd orca\n\n# Build the binary\ngo build -o orca ./cmd/orca\n\n# Or build with version info\nVERSION=$(git describe --tags --always --dirty)\nGIT_COMMIT=$(git rev-parse HEAD)\nBUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)\n\ngo build \\\n  -ldflags=\"-X main.version=${VERSION} -X main.gitCommit=${GIT_COMMIT} -X main.buildDate=${BUILD_DATE}\" \\\n  -o orca \\\n  ./cmd/orca\n</code></pre>"},{"location":"QUICK-START/#2-configure-aws-credentials","title":"2. Configure AWS Credentials","text":"<p>ORCA needs AWS credentials to create EC2 instances. Three options:</p> <p>Option A: AWS Profile (Development) <pre><code>export AWS_PROFILE=orca\n./orca --config config.yaml --kubeconfig ~/.kube/config\n</code></pre></p> <p>Option B: Environment Variables <pre><code>export AWS_ACCESS_KEY_ID=AKIA...\nexport AWS_SECRET_ACCESS_KEY=...\nexport AWS_REGION=us-west-2\n</code></pre></p> <p>Option C: IRSA (Production - Recommended) Create IAM role and service account (see deploy/README.md)</p>"},{"location":"QUICK-START/#3-create-configuration-file","title":"3. Create Configuration File","text":"<p>Create <code>config.yaml</code>:</p> <pre><code>aws:\n  region: us-west-2\n  vpcID: vpc-xxxxx\n  subnetID: subnet-xxxxx\n  securityGroupIDs:\n    - sg-xxxxx\n  tags:\n    Environment: production\n    Project: orca\n\nnode:\n  name: orca-aws-node\n  labels:\n    orca.research/provider: \"aws\"\n    orca.research/region: \"us-west-2\"\n  taints:\n    - key: orca.research/burst-node\n      value: \"true\"\n      effect: NoSchedule\n  cpu: \"1000\"\n  memory: \"4Ti\"\n  pods: \"1000\"\n  gpu: \"100\"\n\ninstances:\n  selectionMode: explicit\n  defaultLaunchType: on-demand\n\nlogging:\n  level: info\n  format: json\n\nmetrics:\n  enabled: true\n  port: 8080\n  path: /metrics\n</code></pre>"},{"location":"QUICK-START/#4-run-orca-locally-testing","title":"4. Run ORCA Locally (Testing)","text":"<pre><code># Start ORCA\n./orca \\\n  --config config.yaml \\\n  --kubeconfig ~/.kube/config \\\n  --namespace kube-system \\\n  --log-level debug\n\n# You should see:\n# {\"level\":\"info\",\"time\":\"...\",\"message\":\"Starting ORCA\",\"version\":\"...\"}\n# {\"level\":\"info\",\"message\":\"Starting HTTP server\",\"port\":8080}\n# {\"level\":\"info\",\"message\":\"Starting ORCA Virtual Kubelet node\"}\n# {\"level\":\"info\",\"message\":\"ORCA is running. Press Ctrl+C to stop.\",\"http_port\":8080}\n</code></pre>"},{"location":"QUICK-START/#5-verify-node-registration","title":"5. Verify Node Registration","text":"<p>In another terminal:</p> <pre><code># Check that orca-aws-node appears\nkubectl get nodes\n\n# Should show:\n# NAME              STATUS   ROLES    AGE   VERSION\n# orca-aws-node     Ready    &lt;none&gt;   10s   v1.0.0-orca\n# ...\n\n# Check node details\nkubectl describe node orca-aws-node\n</code></pre>"},{"location":"QUICK-START/#6-deploy-a-test-pod","title":"6. Deploy a Test Pod","text":"<p>Create <code>test-pod.yaml</code>:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-burst\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: test\n      image: nginx:latest\n      ports:\n        - containerPort: 80\n</code></pre> <p>Deploy and watch:</p> <pre><code># Deploy pod\nkubectl apply -f test-pod.yaml\n\n# Watch pod status\nkubectl get pods -w\n\n# You should see:\n# test-burst   0/1     Pending   0          1s\n# test-burst   0/1     Pending   0          5s\n# test-burst   0/1     Running   0          65s  # After EC2 instance starts\n</code></pre>"},{"location":"QUICK-START/#7-verify-ec2-instance-created","title":"7. Verify EC2 Instance Created","text":"<pre><code># List ORCA-managed instances\naws ec2 describe-instances \\\n  --filters \"Name=tag:ManagedBy,Values=ORCA\" \\\n  --query 'Reservations[*].Instances[*].[InstanceId,InstanceType,State.Name,Tags[?Key==`Name`].Value|[0]]' \\\n  --output table\n\n# Should show:\n# |  i-0123456789abcdef  |  t3.small  |  running  |  orca-default-test-burst  |\n</code></pre>"},{"location":"QUICK-START/#8-test-health-checks","title":"8. Test Health Checks","text":"<pre><code># Liveness check\ncurl http://localhost:8080/healthz\n# {\"status\":\"ok\",\"service\":\"orca\"}\n\n# Readiness check  \ncurl http://localhost:8080/readyz\n# {\"status\":\"ready\",\"service\":\"orca\"}\n\n# Prometheus metrics\ncurl http://localhost:8080/metrics\n# HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\n# go_goroutines 42\n# ...\n</code></pre>"},{"location":"QUICK-START/#9-clean-up","title":"9. Clean Up","text":"<pre><code># Delete the test pod\nkubectl delete pod test-burst\n\n# The EC2 instance will be automatically terminated\n\n# Stop ORCA\n# Press Ctrl+C in the ORCA terminal\n\n# Verify instance terminated\naws ec2 describe-instances \\\n  --filters \"Name=tag:ManagedBy,Values=ORCA\" \\\n  --query 'Reservations[*].Instances[*].State.Name'\n</code></pre>"},{"location":"QUICK-START/#production-deployment","title":"Production Deployment","text":"<p>For production deployment as a Kubernetes Deployment:</p>"},{"location":"QUICK-START/#1-create-namespace","title":"1. Create Namespace","text":"<pre><code>kubectl create namespace orca-system\n</code></pre>"},{"location":"QUICK-START/#2-create-rbac-resources","title":"2. Create RBAC Resources","text":"<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: orca\n  namespace: orca-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: orca-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"nodes\", \"nodes/status\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"pods/status\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"get\", \"create\", \"update\", \"patch\", \"delete\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: orca-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: orca-role\nsubjects:\n  - kind: ServiceAccount\n    name: orca\n    namespace: orca-system\n</code></pre>"},{"location":"QUICK-START/#3-create-configmap","title":"3. Create ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: orca-config\n  namespace: orca-system\ndata:\n  config.yaml: |\n    aws:\n      region: us-west-2\n      vpcID: vpc-xxxxx\n      subnetID: subnet-xxxxx\n      securityGroupIDs:\n        - sg-xxxxx\n      tags:\n        Environment: production\n        Project: orca\n    node:\n      name: orca-aws-node\n      # ... rest of config\n</code></pre>"},{"location":"QUICK-START/#4-create-deployment","title":"4. Create Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orca\n  namespace: orca-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: orca\n  template:\n    metadata:\n      labels:\n        app: orca\n    spec:\n      serviceAccountName: orca\n      containers:\n        - name: orca\n          image: orca:latest  # Build and push your image\n          command:\n            - /orca\n          args:\n            - --config=/config/config.yaml\n            - --namespace=orca-system\n          volumeMounts:\n            - name: config\n              mountPath: /config\n          ports:\n            - name: http\n              containerPort: 8080\n          livenessProbe:\n            httpGet:\n              path: /healthz\n              port: 8080\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          readinessProbe:\n            httpGet:\n              path: /readyz\n              port: 8080\n            initialDelaySeconds: 5\n            periodSeconds: 10\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n      volumes:\n        - name: config\n          configMap:\n            name: orca-config\n</code></pre>"},{"location":"QUICK-START/#5-deploy","title":"5. Deploy","text":"<pre><code>kubectl apply -f deploy/\n</code></pre>"},{"location":"QUICK-START/#troubleshooting","title":"Troubleshooting","text":""},{"location":"QUICK-START/#node-not-appearing","title":"Node Not Appearing","text":"<pre><code># Check ORCA logs\nkubectl logs -n orca-system deployment/orca\n\n# Check RBAC permissions\nkubectl auth can-i create nodes --as=system:serviceaccount:orca-system:orca\n</code></pre>"},{"location":"QUICK-START/#pods-stuck-in-pending","title":"Pods Stuck in Pending","text":"<pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt;\n\n# Check ORCA logs for instance creation errors\nkubectl logs -n orca-system deployment/orca | grep \"CreateInstance\"\n\n# Verify AWS credentials\nkubectl exec -n orca-system deployment/orca -- env | grep AWS\n</code></pre>"},{"location":"QUICK-START/#ec2-instances-not-terminating","title":"EC2 Instances Not Terminating","text":"<pre><code># Check ORCA logs\nkubectl logs -n orca-system deployment/orca | grep \"DeletePod\"\n\n# Manually check instances\naws ec2 describe-instances --filters \"Name=tag:ManagedBy,Values=ORCA\"\n\n# Manually terminate if needed\naws ec2 terminate-instances --instance-ids i-xxxxx\n</code></pre>"},{"location":"QUICK-START/#next-steps","title":"Next Steps","text":"<ul> <li>GPU Training Example</li> <li>Spot Instance Example</li> <li>Architecture Documentation</li> <li>Virtual Kubelet Integration</li> <li>Instance Selection Guide</li> </ul>"},{"location":"QUICK-START/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: https://github.com/scttfrdmn/orca/issues</li> <li>Documentation: https://github.com/scttfrdmn/orca/tree/main/docs</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/","title":"Project-Template-Go Documentation Index","text":"<p>Welcome! This directory contains comprehensive documentation about the project-template-go repository and how to apply its best practices to ORCA.</p>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#quick-navigation","title":"Quick Navigation","text":""},{"location":"README_PROJECT_TEMPLATE_DOCS/#start-here","title":"Start Here","text":"<ul> <li>New to the template? \u2192 Read <code>DOCUMENTATION_SUMMARY.md</code> (5 min read)</li> <li>Need quick answers? \u2192 Check <code>TEMPLATE_QUICK_REFERENCE.md</code> (look up in tables)</li> <li>Ready to implement? \u2192 Follow <code>TEMPLATE_IMPLEMENTATION_GUIDE.md</code> (step-by-step)</li> <li>Deep dive needed? \u2192 Read <code>PROJECT_TEMPLATE_GO_ANALYSIS.md</code> (comprehensive)</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#document-overview","title":"Document Overview","text":"Document Size Lines Best For PROJECT_TEMPLATE_GO_ANALYSIS.md 22 KB 837 Complete understanding, deep technical details TEMPLATE_QUICK_REFERENCE.md 8.9 KB 323 Quick lookups, tables, checklists TEMPLATE_IMPLEMENTATION_GUIDE.md 15 KB 762 Step-by-step implementation, 12 phases DOCUMENTATION_SUMMARY.md 9.4 KB 283 Navigation, overview, document usage README_PROJECT_TEMPLATE_DOCS.md This - Quick index and navigation <p>Total: 55.3 KB | 2,205 lines | 4 comprehensive documents</p>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#what-youll-learn","title":"What You'll Learn","text":""},{"location":"README_PROJECT_TEMPLATE_DOCS/#from-project_template_go_analysismd","title":"From PROJECT_TEMPLATE_GO_ANALYSIS.md","text":"<ul> <li>Overall directory structure (cmd/, internal/, pkg/)</li> <li>GitHub Pages and documentation setup</li> <li>Build configurations (Dockerfile, Makefile with 20+ targets)</li> <li>Testing patterns and organization</li> <li>CI/CD pipeline (GitHub Actions with matrix testing)</li> <li>Quality assurance tools (28 linters, pre-commit hooks)</li> <li>GitHub configuration (22 labels, templates)</li> <li>Security best practices</li> <li>And 7 more detailed sections</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#from-template_quick_referencemd","title":"From TEMPLATE_QUICK_REFERENCE.md","text":"<ul> <li>File location reference table</li> <li>All Make targets organized by category</li> <li>GitHub labels organized by type (5+3+7+4+3+6 = 22 total)</li> <li>Pre-commit hooks table</li> <li>Directory structure visual</li> <li>Environment variables</li> <li>Testing patterns with code examples</li> <li>Tools required checklist</li> <li>Common workflows (feature dev, releases, deps)</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#from-template_implementation_guidemd","title":"From TEMPLATE_IMPLEMENTATION_GUIDE.md","text":"<ul> <li>12-phase implementation plan</li> <li>Directory reorganization instructions</li> <li>Configuration file setup</li> <li>GitHub setup (labels, templates, actions)</li> <li>CI/CD pipeline configuration</li> <li>Documentation creation</li> <li>Code quality setup</li> <li>Docker configuration</li> <li>Verification and validation steps</li> <li>Troubleshooting common issues</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#key-statistics","title":"Key Statistics","text":"<ul> <li>Go Minimum Version: 1.23</li> <li>Linters Enabled: 28</li> <li>GitHub Labels: 22</li> <li>Pre-commit Hooks: 7 local + 5 generic</li> <li>CI/CD Jobs: 4 (test, lint, build, docker)</li> <li>Test Matrix: 2 Go versions \u00d7 3 OS = 6 runs</li> <li>Makefile Targets: 20+</li> <li>Implementation Time: 5-10 hours</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#orca-customization-checklist","title":"ORCA Customization Checklist","text":"<p>Before starting implementation, identify:</p> <ul> <li> ORCA Go module path (e.g., github.com/orca-project/orca)</li> <li> ORCA main components/services</li> <li> ORCA-specific environment variables</li> <li> ORCA main API endpoints</li> <li> ORCA area labels (replace: cli, api, core, plugins, etc.)</li> <li> Go versions ORCA must support</li> <li> ORCA-specific documentation needs</li> <li> Team member assignments for CODEOWNERS</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#implementation-phases-from-guide","title":"Implementation Phases (From Guide)","text":"<ol> <li>Phase 1-2 (1-2 hours) - Directory structure and configuration</li> <li>Phase 3-4 (1-2 hours) - GitHub configuration and CI/CD</li> <li>Phase 5-6 (1-2 hours) - Documentation and scripts</li> <li>Phase 7-9 (1-2 hours) - Go modules, quality, Docker</li> <li>Phase 10-12 (1-2 hours) - Verification and polish</li> </ol>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#template-repository","title":"Template Repository","text":"<p>Location: <code>/Users/scttfrdmn/src/project-template-go</code></p> <p>Reference these files directly for patterns: - <code>Makefile</code> - Build automation examples - <code>.pre-commit-config.yaml</code> - Hook setup - <code>.golangci.yml</code> - Linting configuration - <code>.github/workflows/ci.yml</code> - CI/CD patterns - <code>Dockerfile</code> - Container patterns - <code>docs/</code> - Documentation templates - <code>cmd/app/main.go</code> - Application structure - <code>internal/</code> - Layered architecture examples</p>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#common-questions","title":"Common Questions","text":"<p>Q: Where should I start? A: Read DOCUMENTATION_SUMMARY.md, then follow TEMPLATE_IMPLEMENTATION_GUIDE.md phases 1-2.</p> <p>Q: How long will implementation take? A: 5-10 hours for full implementation, plus 1-2 hours for team training.</p> <p>Q: What's most important to replicate? A: Directory structure \u2192 Build system \u2192 Pre-commit hooks \u2192 CI/CD pipeline \u2192 Testing setup</p> <p>Q: What can we customize? A: Go module path, area labels, environment variables, API endpoints, documentation</p> <p>Q: Do we need all 22 GitHub labels? A: No, customize the area labels to match ORCA's actual structure.</p> <p>Q: Do we need to support both 1.22 and 1.23? A: Update the Go version matrix in CI/CD to match ORCA's support policy.</p>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#document-usage-patterns","title":"Document Usage Patterns","text":""},{"location":"README_PROJECT_TEMPLATE_DOCS/#quick-answer-needed","title":"Quick Answer Needed?","text":"<pre><code>1. Check TEMPLATE_QUICK_REFERENCE.md\n2. Search for tables with your keywords\n3. Find the answer in organized format\n</code></pre>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#deep-understanding-needed","title":"Deep Understanding Needed?","text":"<pre><code>1. Start with PROJECT_TEMPLATE_GO_ANALYSIS.md\n2. Find the relevant section (1-15)\n3. Read the detailed explanation\n4. Reference back to quick reference for specifics\n</code></pre>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#ready-to-implement","title":"Ready to Implement?","text":"<pre><code>1. Open TEMPLATE_IMPLEMENTATION_GUIDE.md\n2. Find the relevant phase (1-12)\n3. Follow the step-by-step instructions\n4. Use checklists to track progress\n5. Reference analysis for deeper context\n</code></pre>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#got-stuck","title":"Got Stuck?","text":"<pre><code>1. Check TEMPLATE_IMPLEMENTATION_GUIDE.md \"Common Issues\"\n2. Look up your issue type\n3. Follow the solution\n4. Re-read relevant phase if needed\n5. Check template repository directly\n</code></pre>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#next-steps","title":"Next Steps","text":"<ol> <li>Understand the Template</li> <li>Read DOCUMENTATION_SUMMARY.md</li> <li> <p>Review TEMPLATE_QUICK_REFERENCE.md</p> </li> <li> <p>Plan Implementation</p> </li> <li>Read TEMPLATE_IMPLEMENTATION_GUIDE.md</li> <li>Identify ORCA customization points</li> <li> <p>Create project timeline</p> </li> <li> <p>Execute Implementation</p> </li> <li>Follow phases 1-12 sequentially</li> <li>Use checklists to track progress</li> <li> <p>Reference template files for patterns</p> </li> <li> <p>Validate Implementation</p> </li> <li>Run full quality suite (make all)</li> <li>Test pre-commit hooks</li> <li>Test CI/CD pipeline</li> <li> <p>Verify documentation</p> </li> <li> <p>Team Training</p> </li> <li>Share these documents with team</li> <li>Explain new workflow</li> <li>Gather feedback</li> <li> <p>Iterate based on team input</p> </li> <li> <p>Continuous Improvement</p> </li> <li>Monitor first PRs with new workflow</li> <li>Adjust labels based on usage</li> <li>Refine ORCA-specific patterns</li> <li>Keep aligned with template updates</li> </ol>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#document-features","title":"Document Features","text":""},{"location":"README_PROJECT_TEMPLATE_DOCS/#project_template_go_analysismd","title":"PROJECT_TEMPLATE_GO_ANALYSIS.md","text":"<ul> <li>15 comprehensive sections</li> <li>Complete coverage of all aspects</li> <li>Detailed explanations</li> <li>Code examples</li> <li>Key takeaways</li> <li>Best for: In-depth learning</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#template_quick_referencemd","title":"TEMPLATE_QUICK_REFERENCE.md","text":"<ul> <li>Organized tables and lists</li> <li>Quick lookups</li> <li>Visual trees</li> <li>Checklists</li> <li>Essential information only</li> <li>Best for: Fast reference</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#template_implementation_guidemd","title":"TEMPLATE_IMPLEMENTATION_GUIDE.md","text":"<ul> <li>12 sequential phases</li> <li>Step-by-step instructions</li> <li>Code examples for customization</li> <li>Validation checklists</li> <li>Troubleshooting section</li> <li>Timeline estimates</li> <li>Best for: Practical implementation</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#documentation_summarymd","title":"DOCUMENTATION_SUMMARY.md","text":"<ul> <li>Overview of all documents</li> <li>Navigation guide</li> <li>Usage recommendations</li> <li>Cross-references</li> <li>Key statistics</li> <li>Best for: Getting oriented</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#file-locations-in-usersscttfrdmnsrcorcadocs","title":"File Locations in /Users/scttfrdmn/src/orca/docs/","text":"<pre><code>docs/\n\u251c\u2500\u2500 PROJECT_TEMPLATE_GO_ANALYSIS.md        (837 lines, comprehensive)\n\u251c\u2500\u2500 TEMPLATE_QUICK_REFERENCE.md            (323 lines, quick lookup)\n\u251c\u2500\u2500 TEMPLATE_IMPLEMENTATION_GUIDE.md       (762 lines, step-by-step)\n\u251c\u2500\u2500 DOCUMENTATION_SUMMARY.md               (283 lines, overview)\n\u2514\u2500\u2500 README_PROJECT_TEMPLATE_DOCS.md        (this file, navigation)\n</code></pre>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#version-information","title":"Version Information","text":"<ul> <li>Template Version: 1.0.0 (September 2025)</li> <li>Go Version: 1.23 (minimum)</li> <li>Documentation Created: October 2025</li> <li>Target Project: ORCA</li> <li>Documentation Status: Complete and ready for use</li> </ul>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#support-and-feedback","title":"Support and Feedback","text":"<p>If you have questions about: - Specific commands \u2192 Check TEMPLATE_QUICK_REFERENCE.md - How something works \u2192 Read PROJECT_TEMPLATE_GO_ANALYSIS.md - Implementation steps \u2192 Follow TEMPLATE_IMPLEMENTATION_GUIDE.md - Getting started \u2192 Read DOCUMENTATION_SUMMARY.md - Live examples \u2192 Check <code>/Users/scttfrdmn/src/project-template-go</code></p>"},{"location":"README_PROJECT_TEMPLATE_DOCS/#final-notes","title":"Final Notes","text":"<p>These documents provide everything needed to successfully apply project-template-go standards to ORCA. The template represents best practices for Go projects as of September 2025 and includes:</p> <ul> <li>Modern project structure</li> <li>Automated quality assurance</li> <li>Professional CI/CD pipeline</li> <li>Community contribution standards</li> <li>Security best practices</li> <li>Developer-friendly tooling</li> </ul> <p>Combined with ORCA's specific requirements, this foundation will provide a solid, professional, and maintainable project structure.</p> <p>Ready to begin? Start with DOCUMENTATION_SUMMARY.md, then follow TEMPLATE_IMPLEMENTATION_GUIDE.md!</p>"},{"location":"SETUP_SUMMARY/","title":"ORCA Project Standardization Summary","text":"<p>This document summarizes the project structure updates applied to ORCA to match the standardized template used in project-template-go and cloudworkstation.</p>"},{"location":"SETUP_SUMMARY/#changes-made","title":"Changes Made","text":""},{"location":"SETUP_SUMMARY/#1-github-pages-setup-with-mkdocs","title":"1. GitHub Pages Setup with MkDocs \u2705","text":"<p>Created: - <code>mkdocs.yml</code> - Complete MkDocs Material configuration - <code>docs/index.md</code> - Beautiful landing page with cards and mermaid diagrams - <code>docs/stylesheets/extra.css</code> - Custom ORCA branding - <code>docs/javascripts/extra.js</code> - Enhanced interactivity - <code>.github/workflows/docs.yml</code> - Auto-deploy to GitHub Pages</p> <p>Features: - Material theme with light/dark mode toggle - Search with suggestions - Navigation tabs and sections - Code copy buttons - Mermaid diagram support - Mobile-responsive design - Auto-generated table of contents</p> <p>Navigation Structure: <pre><code>Home\n\u251c\u2500\u2500 Getting Started\n\u2502   \u251c\u2500\u2500 Quick Start\n\u2502   \u251c\u2500\u2500 Installation\n\u2502   \u251c\u2500\u2500 Configuration\n\u2502   \u2514\u2500\u2500 First Pod\n\u251c\u2500\u2500 User Guide\n\u2502   \u251c\u2500\u2500 Instance Selection\n\u2502   \u251c\u2500\u2500 GPU Workloads\n\u2502   \u251c\u2500\u2500 Spot Instances\n\u2502   \u251c\u2500\u2500 Custom Silicon\n\u2502   \u251c\u2500\u2500 Capacity Reservations\n\u2502   \u251c\u2500\u2500 Cost Management\n\u2502   \u2514\u2500\u2500 Troubleshooting\n\u251c\u2500\u2500 Architecture\n\u2502   \u251c\u2500\u2500 Overview\n\u2502   \u251c\u2500\u2500 Virtual Kubelet Integration\n\u2502   \u251c\u2500\u2500 Instance Selection\n\u2502   \u251c\u2500\u2500 Pod Lifecycle\n\u2502   \u251c\u2500\u2500 AWS Integration\n\u2502   \u2514\u2500\u2500 Design Decisions\n\u251c\u2500\u2500 Development\n\u2502   \u251c\u2500\u2500 Setup\n\u2502   \u251c\u2500\u2500 Building\n\u2502   \u251c\u2500\u2500 Testing\n\u2502   \u251c\u2500\u2500 LocalStack Testing\n\u2502   \u251c\u2500\u2500 Contributing\n\u2502   \u2514\u2500\u2500 Code Style\n\u251c\u2500\u2500 API Reference\n\u2502   \u251c\u2500\u2500 Annotations\n\u2502   \u251c\u2500\u2500 Configuration\n\u2502   \u2514\u2500\u2500 Metrics\n\u2514\u2500\u2500 Community\n    \u251c\u2500\u2500 Support\n    \u251c\u2500\u2500 Contributing\n    \u251c\u2500\u2500 Roadmap\n    \u2514\u2500\u2500 License\n</code></pre></p>"},{"location":"SETUP_SUMMARY/#2-logo-and-icon-assets","title":"2. Logo and Icon Assets \u2705","text":"<p>Created optimized logo sizes: - <code>docs/images/orca-200.png</code> - 35KB - <code>docs/images/orca-400.png</code> - 154KB (used in README) - <code>docs/images/orca-800.png</code> - 710KB</p> <p>Created optimized icon sizes: - <code>docs/images/orca-icon-32.png</code> - 3.2KB (favicon) - <code>docs/images/orca-icon-64.png</code> - 7.7KB - <code>docs/images/orca-icon-128.png</code> - 21KB (MkDocs logo) - <code>docs/images/orca-icon-256.png</code> - 72KB - <code>docs/images/orca-icon-512.png</code> - 290KB (social media)</p> <p>Usage: - MkDocs logo: <code>orca-icon-128.png</code> - MkDocs favicon: <code>orca-icon-32.png</code> - README header: <code>orca-400.png</code> - GitHub social preview: <code>orca-icon-512.png</code></p>"},{"location":"SETUP_SUMMARY/#3-pre-commit-hooks","title":"3. Pre-commit Hooks \u2705","text":"<p>Created: <code>.pre-commit-config.yaml</code></p> <p>Hooks configured: - General: Trailing whitespace, EOF, YAML check, large files, merge conflicts - Go: fmt, vet, imports, mod-tidy, unit tests, golangci-lint - Markdown: mdformat with GFM and tables - Shell: shellcheck - Docker: hadolint - Security: detect-secrets</p> <p>Usage: <pre><code>make pre-commit-install  # Install hooks\nmake pre-commit-run      # Run on all files\n</code></pre></p>"},{"location":"SETUP_SUMMARY/#4-enhanced-makefile","title":"4. Enhanced Makefile \u2705","text":"<p>New targets added: - <code>make docs-serve</code> - Serve docs locally at http://127.0.0.1:8000 - <code>make docs-build</code> - Build documentation - <code>make docs-deploy</code> - Deploy to GitHub Pages - <code>make pre-commit-install</code> - Install pre-commit hooks - <code>make pre-commit-run</code> - Run pre-commit on all files - <code>make release-snapshot</code> - Create snapshot release - <code>make release</code> - Create production release - <code>make deps</code> - Install all development dependencies - <code>make setup</code> - Complete project setup</p> <p>Updated: - <code>all</code> target now runs: <code>lint test build</code></p>"},{"location":"SETUP_SUMMARY/#5-goreleaser-configuration","title":"5. GoReleaser Configuration \u2705","text":"<p>Created: <code>.goreleaser.yaml</code></p> <p>Features: - Multi-platform builds (Linux, macOS, Windows) - Multi-architecture (amd64, arm64) - Docker multi-arch images (ghcr.io) - Homebrew tap support - AUR package (Arch Linux) - Changelog generation with grouping - SBOM generation - Cosign signing support</p> <p>Platforms: - Linux: amd64, arm64 - macOS: amd64 (Intel), arm64 (Apple Silicon) - Windows: amd64</p>"},{"location":"SETUP_SUMMARY/#6-documentation-structure","title":"6. Documentation Structure \u2705","text":"<p>Reorganized existing docs: <pre><code>docs/\n\u251c\u2500\u2500 index.md (NEW - Landing page)\n\u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 orca-*.png (logos)\n\u2502   \u2514\u2500\u2500 orca-icon-*.png (icons)\n\u251c\u2500\u2500 getting-started/\n\u2502   \u2514\u2500\u2500 quick-start.md (moved from QUICK-START.md)\n\u251c\u2500\u2500 user-guide/\n\u2502   \u251c\u2500\u2500 custom-silicon.md (moved from AWS-CUSTOM-SILICON.md)\n\u2502   \u2514\u2500\u2500 capacity-reservations.md (moved from CAPACITY-RESERVATIONS.md)\n\u251c\u2500\u2500 architecture/\n\u2502   \u2514\u2500\u2500 virtual-kubelet.md (moved from VIRTUAL-KUBELET-INTEGRATION.md)\n\u251c\u2500\u2500 development/\n\u2502   \u251c\u2500\u2500 setup.md (moved from DEVELOPMENT.md)\n\u2502   \u251c\u2500\u2500 testing.md (moved from TESTING.md)\n\u2502   \u2514\u2500\u2500 localstack.md (moved from LOCALSTACK-TESTING.md)\n\u251c\u2500\u2500 stylesheets/\n\u2502   \u2514\u2500\u2500 extra.css (NEW - Custom styling)\n\u2514\u2500\u2500 javascripts/\n    \u2514\u2500\u2500 extra.js (NEW - Custom scripts)\n</code></pre></p>"},{"location":"SETUP_SUMMARY/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"SETUP_SUMMARY/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code>make deps\n</code></pre> <p>This installs: - golangci-lint - goreleaser - mkdocs-material - mkdocs-minify-plugin - pre-commit</p>"},{"location":"SETUP_SUMMARY/#2-setup-project","title":"2. Setup Project","text":"<pre><code>make setup\n</code></pre> <p>This runs: - <code>make deps</code> - <code>make mod-download</code> - <code>make pre-commit-install</code></p>"},{"location":"SETUP_SUMMARY/#3-serve-documentation-locally","title":"3. Serve Documentation Locally","text":"<pre><code>make docs-serve\n</code></pre> <p>Open http://127.0.0.1:8000 in your browser.</p>"},{"location":"SETUP_SUMMARY/#4-run-tests-with-pre-commit","title":"4. Run Tests with Pre-commit","text":"<pre><code>make pre-commit-run\n</code></pre>"},{"location":"SETUP_SUMMARY/#5-build-everything","title":"5. Build Everything","text":"<pre><code>make all\n</code></pre> <p>This runs: <code>lint test build</code></p>"},{"location":"SETUP_SUMMARY/#github-actions","title":"GitHub Actions","text":""},{"location":"SETUP_SUMMARY/#documentation-deployment","title":"Documentation Deployment","text":"<p>Workflow: <code>.github/workflows/docs.yml</code></p> <p>Triggers: - Push to <code>main</code> with changes to <code>docs/**</code> or <code>mkdocs.yml</code> - Pull requests (builds but doesn't deploy) - Manual trigger via <code>workflow_dispatch</code></p> <p>Jobs: 1. Build - Builds MkDocs site, uploads artifact 2. Deploy - Deploys to GitHub Pages (main branch only) 3. Check - Validates docs build (PRs only)</p> <p>Setup Required: 1. Enable GitHub Pages in repository settings 2. Set source to \"GitHub Actions\"</p>"},{"location":"SETUP_SUMMARY/#configuration-files-reference","title":"Configuration Files Reference","text":"File Purpose Status <code>mkdocs.yml</code> MkDocs configuration \u2705 Created <code>.pre-commit-config.yaml</code> Pre-commit hooks \u2705 Created <code>.goreleaser.yaml</code> Release automation \u2705 Created <code>.github/workflows/docs.yml</code> Docs deployment \u2705 Created <code>Makefile</code> Build automation \u2705 Enhanced <code>docs/index.md</code> Landing page \u2705 Created <code>docs/stylesheets/extra.css</code> Custom styles \u2705 Created <code>docs/javascripts/extra.js</code> Custom scripts \u2705 Created"},{"location":"SETUP_SUMMARY/#asset-management","title":"Asset Management","text":""},{"location":"SETUP_SUMMARY/#logo-files","title":"Logo Files","text":"<ul> <li>Source: <code>docs/images/orca.png</code> (1.1MB original)</li> <li>Optimized: Multiple sizes generated via sips</li> <li>Usage: README, MkDocs, social media</li> </ul>"},{"location":"SETUP_SUMMARY/#icon-files","title":"Icon Files","text":"<ul> <li>Source: <code>docs/images/orca-icon.png</code> (727KB original)</li> <li>Optimized: 32px, 64px, 128px, 256px, 512px</li> <li>Usage: Favicon, logos, badges, social preview</li> </ul>"},{"location":"SETUP_SUMMARY/#optimization-command-used","title":"Optimization Command Used","text":"<pre><code>sips -Z &lt;width&gt; source.png --out target.png\n</code></pre>"},{"location":"SETUP_SUMMARY/#next-steps","title":"Next Steps","text":""},{"location":"SETUP_SUMMARY/#required-for-github-pages","title":"Required for GitHub Pages","text":"<ol> <li>Push changes to GitHub</li> <li>Enable GitHub Pages in repo settings</li> <li>Set source to \"GitHub Actions\"</li> <li>Wait for workflow to run</li> <li>Visit: https://scttfrdmn.github.io/orca</li> </ol>"},{"location":"SETUP_SUMMARY/#optional-enhancements","title":"Optional Enhancements","text":"<ol> <li>Create missing documentation pages listed in <code>mkdocs.yml</code></li> <li>Add Google Analytics - Set <code>GOOGLE_ANALYTICS_KEY</code> env var</li> <li>Setup Homebrew tap - Create separate repository</li> <li>Configure AUR - Add AUR SSH key</li> <li>Add more examples - GPU workloads, spot instances, etc.</li> </ol>"},{"location":"SETUP_SUMMARY/#recommended-workflow","title":"Recommended Workflow","text":"<ol> <li>Work on features</li> <li>Pre-commit hooks run automatically on commit</li> <li>Push to branch</li> <li>Open PR - docs check runs</li> <li>Merge to main - docs deploy automatically</li> <li>Create release tag - GoReleaser publishes binaries</li> </ol>"},{"location":"SETUP_SUMMARY/#documentation-style-guide","title":"Documentation Style Guide","text":""},{"location":"SETUP_SUMMARY/#page-headers","title":"Page Headers","text":"<pre><code># Page Title\n\nBrief description of the page.\n\n## Overview\n\nMain content...\n</code></pre>"},{"location":"SETUP_SUMMARY/#admonitions","title":"Admonitions","text":"<pre><code>!!! note \"Note Title\"\n    Content here\n\n!!! warning \"Warning\"\n    Important warning\n\n!!! tip \"Pro Tip\"\n    Helpful tip\n</code></pre>"},{"location":"SETUP_SUMMARY/#code-blocks","title":"Code Blocks","text":"<pre><code>\\`\\`\\`bash\nmake build\n\\`\\`\\`\n\n\\`\\`\\`go\nfunc main() {\n    // Code here\n}\n\\`\\`\\`\n</code></pre>"},{"location":"SETUP_SUMMARY/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<pre><code>\\`\\`\\`mermaid\ngraph TB\n    A[Start] --&gt; B[End]\n\\`\\`\\`\n</code></pre>"},{"location":"SETUP_SUMMARY/#maintenance","title":"Maintenance","text":""},{"location":"SETUP_SUMMARY/#updating-dependencies","title":"Updating Dependencies","text":"<pre><code># Update Python dependencies\npip install --upgrade mkdocs-material mkdocs-minify-plugin pre-commit\n\n# Update Go dependencies\ngo get -u ./...\ngo mod tidy\n\n# Update pre-commit hooks\npre-commit autoupdate\n</code></pre>"},{"location":"SETUP_SUMMARY/#testing-documentation","title":"Testing Documentation","text":"<pre><code># Serve locally\nmake docs-serve\n\n# Build (catches broken links)\nmake docs-build\n\n# Deploy to GitHub Pages\nmake docs-deploy\n</code></pre>"},{"location":"SETUP_SUMMARY/#creating-releases","title":"Creating Releases","text":"<pre><code># Test release locally\nmake release-snapshot\n\n# Create production release (requires tag)\ngit tag -a v0.2.0 -m \"Release v0.2.0\"\ngit push origin v0.2.0\nmake release\n</code></pre>"},{"location":"SETUP_SUMMARY/#resources","title":"Resources","text":"<ul> <li>MkDocs Material: https://squidfunk.github.io/mkdocs-material/</li> <li>GoReleaser: https://goreleaser.com/</li> <li>Pre-commit: https://pre-commit.com/</li> <li>GitHub Actions: https://docs.github.com/en/actions</li> </ul>"},{"location":"SETUP_SUMMARY/#support","title":"Support","text":"<p>For questions or issues with the project setup: 1. Check this document first 2. Review project-template-go documentation 3. Open an issue on GitHub</p> <p>Last Updated: 2025-10-19 Maintainer: Scott Friedman (@scttfrdmn)</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/","title":"Project-Template-Go Implementation Guide for ORCA","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#overview","title":"Overview","text":"<p>This guide provides step-by-step instructions to apply the project-template-go standards and conventions to the ORCA project.</p> <p>Reference Documents: - <code>PROJECT_TEMPLATE_GO_ANALYSIS.md</code> - Comprehensive analysis (15 sections, 837 lines) - <code>TEMPLATE_QUICK_REFERENCE.md</code> - Quick lookup guide with tables and checklists</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-1-directory-structure-setup","title":"Phase 1: Directory Structure Setup","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-11-organize-existing-code","title":"Step 1.1: Organize Existing Code","text":"<p>Move existing ORCA code to follow the template structure:</p> <pre><code># Current state -&gt; Target state\nsrc/orca/\n\u251c\u2500\u2500 cmd/                        # NEW: Create this\n\u2502   \u251c\u2500\u2500 orca/                   # NEW: Main CLI application\n\u2502   \u2502   \u2514\u2500\u2500 main.go            # Move/create entry point\n\u2502   \u2514\u2500\u2500 &lt;other-services&gt;/      # If multiple binaries\n\u251c\u2500\u2500 internal/                   # NEW: Move internal packages here\n\u2502   \u251c\u2500\u2500 config/                # Configuration management\n\u2502   \u251c\u2500\u2500 handler/               # HTTP/gRPC handlers\n\u2502   \u251c\u2500\u2500 service/               # Business logic\n\u2502   \u251c\u2500\u2500 model/                 # Data models\n\u2502   \u2514\u2500\u2500 &lt;domain&gt;/              # Domain packages\n\u251c\u2500\u2500 pkg/                        # NEW: Public APIs (if applicable)\n\u251c\u2500\u2500 docs/                       # ENHANCE: Existing docs\n\u251c\u2500\u2500 .github/                    # ENHANCE: Existing GitHub config\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/\n\u2502   \u2514\u2500\u2500 scripts/\n\u251c\u2500\u2500 scripts/                    # NEW: Setup/utility scripts\n\u251c\u2500\u2500 tests/                      # NEW: Test organization\n\u2502   \u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 e2e/\n\u2502   \u2514\u2500\u2500 fixtures/\n\u2514\u2500\u2500 Makefile                    # NEW: Build automation\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-12-create-missing-directories","title":"Step 1.2: Create Missing Directories","text":"<pre><code>mkdir -p cmd/orca\nmkdir -p internal/{config,handler,service,model}\nmkdir -p scripts\nmkdir -p tests/{unit,integration,e2e,fixtures}\nmkdir -p .github/ISSUE_TEMPLATE\nmkdir -p .github/scripts\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-2-configuration-files","title":"Phase 2: Configuration Files","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-21-create-makefile","title":"Step 2.1: Create Makefile","text":"<p>Start with the template's Makefile and customize:</p> <pre><code># Copy from template and modify:\n# - BINARY_NAME: \"orca\" (or service name)\n# - Build commands for ORCA structure\n# - Custom targets for ORCA-specific build steps\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-22-set-up-pre-commit","title":"Step 2.2: Set Up Pre-Commit","text":"<p>Copy and customize these files:</p> <pre><code>cp /path/to/template/.pre-commit-config.yaml .\ncp /path/to/template/.golangci.yml .\ncp /path/to/template/.editorconfig .\ncp /path/to/template/.air.toml .\n</code></pre> <p>Customization needed: - <code>.air.toml</code>: Update build commands if ORCA has multiple binaries - <code>.golangci.yml</code>: Adjust linting rules for ORCA's code style - <code>.editorconfig</code>: Keep as-is for cross-editor consistency</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-23-update-gitignore","title":"Step 2.3: Update .gitignore","text":"<p>Copy template and add ORCA-specific entries:</p> <pre><code>cp /path/to/template/.gitignore .\n# Add ORCA-specific patterns:\n# - ORCA-generated files\n# - Build artifacts specific to ORCA\n# - Local development files\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-3-github-configuration","title":"Phase 3: GitHub Configuration","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-31-setup-github-labels","title":"Step 3.1: Setup GitHub Labels","text":"<p>Copy label configuration:</p> <pre><code>cp /path/to/template/.github/labels.yml .github/\n</code></pre> <p>Customize for ORCA:</p> <pre><code># Update area labels to match ORCA structure:\n# Instead of:\n# - area: cmd\n# - area: pkg\n# - area: internal\n\n# Use ORCA-specific areas:\n# - area: cli\n# - area: api\n# - area: core\n# - area: orchestration\n# - area: plugins\n# etc.\n</code></pre> <p>Apply labels to repository:</p> <pre><code>gh label sync --repo &lt;org&gt;/orca --labels .github/labels.yml\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-32-setup-issue-templates","title":"Step 3.2: Setup Issue Templates","text":"<p>Copy templates:</p> <pre><code>cp -r /path/to/template/.github/ISSUE_TEMPLATE/ .github/\n</code></pre> <p>Customize component dropdown in bug report to match ORCA structure:</p> <pre><code># bug_report.yml - Update component list:\noptions:\n  - cli (command-line interface)\n  - api (REST/gRPC API)\n  - core (orchestration engine)\n  - plugins (plugin system)\n  - Build System / Makefile\n  - Tests\n  - Documentation\n  - Dependencies\n  - Other\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-33-setup-pull-request-template","title":"Step 3.3: Setup Pull Request Template","text":"<p>Copy template:</p> <pre><code>cp /path/to/template/.github/PULL_REQUEST_TEMPLATE.md .github/\n</code></pre> <p>No changes needed (use as-is, generic to all Go projects).</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-34-setup-dependabot","title":"Step 3.4: Setup Dependabot","text":"<p>Copy configuration:</p> <pre><code>cp /path/to/template/.github/dependabot.yml .github/\n</code></pre> <p>Customize if needed:</p> <pre><code># Update reviewer and schedule for ORCA workflow\nupdates:\n  - package-ecosystem: \"gomod\"\n    reviewers:\n      - &lt;orca-maintainer&gt;  # Change from scttfrdmn\n    schedule:\n      interval: \"weekly\"\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-35-setup-funding","title":"Step 3.5: Setup Funding","text":"<p>Create/update:</p> <pre><code># .github/FUNDING.yml\nko_fi: &lt;orca-funding&gt;  # Or alternative funding sources\ngithub_sponsors: &lt;org&gt;\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-4-cicd-pipeline","title":"Phase 4: CI/CD Pipeline","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-41-create-github-actions-workflow","title":"Step 4.1: Create GitHub Actions Workflow","text":"<p>Copy and customize:</p> <pre><code>cp /path/to/template/.github/workflows/ci.yml .github/workflows/\n</code></pre> <p>Customization points:</p> <pre><code># Adjust for ORCA:\nname: ORCA CI\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    strategy:\n      matrix:\n        # Update Go versions if ORCA has different support\n        go-version: [1.22.x, 1.23.x]\n\n        # Keep or adjust OS matrix\n        os: [ubuntu-latest, macos-latest, windows-latest]\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-42-add-service-specific-jobs","title":"Step 4.2: Add Service-Specific Jobs","text":"<p>If ORCA has multiple services or special build requirements:</p> <pre><code># Add additional jobs:\nbuild-docker:\n  runs-on: ubuntu-latest\n  needs: [test, lint]\n  # Build and push ORCA Docker images\n\nintegration-tests:\n  runs-on: ubuntu-latest\n  # Integration tests specific to ORCA\n\nperformance-tests:\n  runs-on: ubuntu-latest\n  # Performance benchmarking if needed\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-5-documentation","title":"Phase 5: Documentation","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-51-update-readmemd","title":"Step 5.1: Update README.md","text":"<p>Enhance existing README with template structure:</p> <pre><code># ORCA - [Full Description]\n\n## Features\n- [Feature list]\n\n## Quick Start\n- Installation\n- Basic usage\n- Environment variables\n\n## Development\n- Prerequisites (Go 1.23+, Make, Docker)\n- Make targets\n- Running tests\n\n## API Documentation\n- Endpoints\n- Examples\n\n## Contributing\n- See CONTRIBUTING.md\n\n## License\n- MIT or appropriate license\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-52-create-contributingmd","title":"Step 5.2: Create CONTRIBUTING.md","text":"<p>Copy and customize:</p> <pre><code>cp /path/to/template/docs/CONTRIBUTING.md docs/\n</code></pre> <p>Customize for ORCA:</p> <pre><code># Contributing to ORCA\n\n## Getting Started\n# [ORCA-specific setup]\n\n## Development Setup\n# [ORCA-specific instructions]\n\n## Code Style\n# [ORCA conventions]\n\n## [ORCA-specific sections]\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-53-create-code_of_conductmd","title":"Step 5.3: Create CODE_OF_CONDUCT.md","text":"<p>Copy as-is (generic):</p> <pre><code>cp /path/to/template/docs/CODE_OF_CONDUCT.md docs/\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-54-create-securitymd","title":"Step 5.4: Create SECURITY.md","text":"<p>Copy and customize:</p> <pre><code>cp /path/to/template/docs/SECURITY.md docs/\n</code></pre> <p>Update email and supported versions:</p> <pre><code># Security Policy\n\n## Reporting a Vulnerability\n\nPlease report to: [orca-security@example.com]\n\n## Supported Versions\n\n| Version | Supported |\n|---------|-----------|\n| 2.x.x   | \u2705        |\n| 1.x.x   | \u2705        |\n| &lt; 1.0   | \u274c        |\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-6-setup-scripts","title":"Phase 6: Setup Scripts","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-61-create-install-hooks-script","title":"Step 6.1: Create Install Hooks Script","text":"<p>Copy and customize:</p> <pre><code>cp /path/to/template/scripts/install-hooks.sh scripts/\n</code></pre> <p>No changes needed (generic Go setup).</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-62-create-setup-script-optional","title":"Step 6.2: Create Setup Script (Optional)","text":"<p>Create <code>scripts/setup-environment.sh</code> for ORCA-specific setup:</p> <pre><code>#!/bin/bash\n# Setup ORCA development environment\n\nset -e\n\necho \"Setting up ORCA development environment...\"\n\n# Install Go if needed\n# Install Docker if needed\n# Setup databases if needed\n# Run setup scripts\n\necho \"ORCA environment ready!\"\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-7-go-module-setup","title":"Phase 7: Go Module Setup","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-71-update-gomod","title":"Step 7.1: Update go.mod","text":"<p>If moving code around:</p> <pre><code># Update module name and imports\ngo mod edit -module github.com/orca-project/orca\n\n# Update all imports in code\nfind . -name \"*.go\" -type f -exec sed -i '' \\\n  's|github.com/scttfrdmn/project-name|github.com/orca-project/orca|g' {} +\n\n# Verify and tidy\ngo mod tidy\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-72-createupdate-gosum","title":"Step 7.2: Create/Update go.sum","text":"<pre><code>go mod download\ngo mod verify\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-8-code-quality-setup","title":"Phase 8: Code Quality Setup","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-81-run-initial-linting","title":"Step 8.1: Run Initial Linting","text":"<pre><code># Ensure all tools are installed\nmake install-tools\n\n# Run linting\nmake lint\n\n# Fix formatting\nmake fmt\n\n# Resolve any issues\nmake vet\nmake staticcheck\nmake gosec\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-82-setup-test-structure","title":"Step 8.2: Setup Test Structure","text":"<p>Ensure tests follow template patterns:</p> <pre><code># Unit tests co-located with code:\ninternal/config/config_test.go\ninternal/service/service_test.go\n\n# Additional tests in tests/ directory:\ntests/integration/api_test.go\ntests/e2e/workflow_test.go\n\n# Test fixtures:\ntests/fixtures/sample-config.json\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-83-configure-coverage","title":"Step 8.3: Configure Coverage","text":"<pre><code># Generate coverage report\nmake coverage\n\n# Review coverage.html\n# Target: &gt;80% coverage on critical code paths\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-9-docker-setup","title":"Phase 9: Docker Setup","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-91-create-dockerfile","title":"Step 9.1: Create Dockerfile","text":"<p>Copy and customize:</p> <pre><code>cp /path/to/template/Dockerfile .\n</code></pre> <p>Customize:</p> <pre><code># If using different entry point:\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \\\n    -ldflags='-w -s -extldflags \"-static\"' \\\n    -a -installsuffix cgo \\\n    -o orca \\\n    ./cmd/orca\n\n# Update CMD if ORCA has different entry\nENTRYPOINT [\"/orca\"]\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-92-create-docker-composeyml-optional","title":"Step 9.2: Create docker-compose.yml (Optional)","text":"<p>If ORCA needs local services:</p> <pre><code>version: '3.8'\nservices:\n  orca:\n    build: .\n    environment:\n      - PORT=8080\n      # ORCA-specific env vars\n    ports:\n      - \"8080:8080\"\n    # Additional services (databases, cache, etc.)\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-10-verification-and-testing","title":"Phase 10: Verification and Testing","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-101-run-full-quality-check","title":"Step 10.1: Run Full Quality Check","text":"<pre><code># Install all tools\n./scripts/install-hooks.sh\n\n# Run complete check\nmake all\n\n# If successful: \u2705 All checks pass\n# If failures: Fix issues and re-run\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-102-test-pre-commit-hooks","title":"Step 10.2: Test Pre-Commit Hooks","text":"<pre><code># Setup hooks\npre-commit install\n\n# Run hooks manually\npre-commit run --all-files\n\n# If successful: Ready for git commits\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-103-test-cicd-locally-optional","title":"Step 10.3: Test CI/CD Locally (Optional)","text":"<pre><code># Install act (GitHub Actions local runner)\n# Run workflows locally\nact -j test\nact -j lint\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-11-repository-configuration","title":"Phase 11: Repository Configuration","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-111-branch-protection-rules","title":"Step 11.1: Branch Protection Rules","text":"<p>In GitHub repository settings:</p> <ol> <li>Branch protection for main:</li> <li>Require PR reviews before merge</li> <li>Dismiss stale PR approvals</li> <li> <p>Require status checks to pass:</p> <ul> <li>test (all matrix combinations)</li> <li>lint</li> <li>build</li> <li>docker</li> </ul> </li> <li> <p>Require CODEOWNERS (optional)</p> </li> <li>Create <code>.github/CODEOWNERS</code></li> <li>Assign ownership to team members</li> </ol>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-112-enable-features","title":"Step 11.2: Enable Features","text":"<ul> <li>Enable \"Automatically delete head branches\"</li> <li>Enable \"Require branches to be up to date before merging\"</li> <li>Enable \"Dismiss stale pull request approvals\"</li> </ul>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-113-setup-codecov-optional","title":"Step 11.3: Setup Codecov (Optional)","text":"<pre><code># Add Codecov token as GitHub secret\n# CI will automatically upload coverage\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#phase-12-documentation-updates","title":"Phase 12: Documentation Updates","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-121-create-architecturemd-optional","title":"Step 12.1: Create ARCHITECTURE.md (Optional)","text":"<p>Document ORCA's architecture:</p> <pre><code># ORCA Architecture\n\n## Overview\n- System diagram\n- Component breakdown\n\n## Layers\n- Handler layer (HTTP/gRPC)\n- Service layer (business logic)\n- Data layer\n- Configuration\n\n## Design Decisions\n- Why this structure\n- Key trade-offs\n- Future scalability\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#step-122-create-api_docsmd-if-applicable","title":"Step 12.2: Create API_DOCS.md (If Applicable)","text":"<pre><code># ORCA API Documentation\n\n## Endpoints\n- [Detailed endpoint documentation]\n\n## Authentication\n- [Auth mechanisms]\n\n## Examples\n- [Usage examples]\n</code></pre>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#customization-checklist","title":"Customization Checklist","text":"<ul> <li> Module Path: Updated <code>go.mod</code> with ORCA module path</li> <li> GitHub Labels: Customized area labels for ORCA structure</li> <li> Environment Variables: Added ORCA-specific env vars to README</li> <li> Makefile: Customized for ORCA build process</li> <li> API Endpoints: Updated documentation for ORCA APIs</li> <li> Issue Templates: Customized component dropdowns</li> <li> CI/CD: Adjusted Go versions and job matrix if needed</li> <li> Docker: Updated Dockerfile for ORCA entry point</li> <li> Documentation: All docs customized for ORCA</li> <li> Funding: Updated FUNDING.yml with ORCA sponsor</li> <li> CODEOWNERS: Created (optional) with team assignments</li> <li> Branch Protection: Configured in GitHub</li> </ul>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#post-implementation-validation","title":"Post-Implementation Validation","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#checklist","title":"Checklist","text":"<ol> <li> <p>Run full quality suite: <pre><code>make all\n</code></pre></p> </li> <li> <p>Verify pre-commit hooks: <pre><code>git add .\ngit commit -m \"initial: apply project template structure\"\n</code></pre></p> </li> <li> <p>Test CI/CD pipeline: <pre><code>git push origin main\n# Check GitHub Actions\n</code></pre></p> </li> <li> <p>Test Docker build: <pre><code>make docker-build\ndocker run --rm orca:latest --help\n</code></pre></p> </li> <li> <p>Verify documentation:</p> </li> <li>README.md readable and complete</li> <li>CONTRIBUTING.md clear</li> <li> <p>API docs (if applicable) functional</p> </li> <li> <p>Test label sync: <pre><code>gh label sync --repo &lt;org&gt;/orca --labels .github/labels.yml\n</code></pre></p> </li> <li> <p>Create test PR:</p> </li> <li>Create feature branch</li> <li>Make dummy change</li> <li>Verify templates work</li> <li>Verify checks run</li> </ol>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#issue-pre-commit-hooks-fail","title":"Issue: Pre-commit hooks fail","text":"<p>Solution: <pre><code># Verify tools installed\nwhich golangci-lint staticcheck gosec\n\n# Install if missing\nmake install-tools\n\n# Run manually\npre-commit run --all-files --show-diff\n</code></pre></p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#issue-cicd-matrix-failures","title":"Issue: CI/CD matrix failures","text":"<p>Solution: - Check Go version compatibility - Verify cross-platform code - Check for platform-specific issues in tests</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#issue-docker-build-fails","title":"Issue: Docker build fails","text":"<p>Solution: - Verify Dockerfile entry point matches binary name - Check binary actually exists after build - Verify multi-stage build paths</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#issue-label-sync-fails","title":"Issue: Label sync fails","text":"<p>Solution: <pre><code># Verify GitHub CLI installed\ngh --version\n\n# Authenticate\ngh auth login\n\n# Try again\ngh label sync --repo &lt;org&gt;/orca --labels .github/labels.yml\n</code></pre></p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#timeline-estimate","title":"Timeline Estimate","text":"<ul> <li>Phase 1-2 (Directory + Config): 1-2 hours</li> <li>Phase 3-4 (GitHub + CI/CD): 1-2 hours</li> <li>Phase 5-6 (Documentation + Scripts): 1-2 hours</li> <li>Phase 7-9 (Go Module + Docker): 1-2 hours</li> <li>Phase 10-12 (Verification + Polish): 1-2 hours</li> </ul> <p>Total: 5-10 hours for complete implementation</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#support-and-references","title":"Support and References","text":"<ul> <li>Template Repository: <code>/Users/scttfrdmn/src/project-template-go</code></li> <li>Analysis Document: <code>PROJECT_TEMPLATE_GO_ANALYSIS.md</code></li> <li>Quick Reference: <code>TEMPLATE_QUICK_REFERENCE.md</code></li> </ul> <p>For specific implementations, refer to the template files directly: - Makefile patterns - Workflow configurations - Linting rules - Documentation examples</p>"},{"location":"TEMPLATE_IMPLEMENTATION_GUIDE/#next-steps-after-implementation","title":"Next Steps After Implementation","text":"<ol> <li>Monitor first PR: Ensure all checks work</li> <li>Gather feedback: Ask team about workflow changes</li> <li>Iterate on labels: Refine based on actual usage</li> <li>Document patterns: Create ORCA-specific conventions</li> <li>Training: Share with team about new structure</li> <li>Gradual migration: Move existing code incrementally if needed</li> <li>Continuous improvement: Update as ORCA evolves</li> </ol>"},{"location":"TEMPLATE_QUICK_REFERENCE/","title":"Project-Template-Go Quick Reference for ORCA","text":""},{"location":"TEMPLATE_QUICK_REFERENCE/#key-files-location-reference","title":"Key Files Location Reference","text":"Component File/Directory Purpose Build <code>Makefile</code> All build automation and common tasks Config <code>.editorconfig</code> Cross-editor code formatting Config <code>.gitignore</code> Version control exclusions Config <code>.air.toml</code> Hot-reload development configuration Container <code>Dockerfile</code> Multi-stage Docker build (Alpine -&gt; scratch) Quality Assurance <code>.pre-commit-config.yaml</code> Git hooks for automated checks Quality Assurance <code>.golangci.yml</code> 28-linter configuration Testing <code>tests/</code> Test organization structure CI/CD <code>.github/workflows/ci.yml</code> GitHub Actions pipeline GitHub <code>.github/labels.yml</code> 22 issue labels (types, priorities, areas) GitHub <code>.github/ISSUE_TEMPLATE/</code> Bug and feature request forms GitHub <code>.github/PULL_REQUEST_TEMPLATE.md</code> PR submission form GitHub <code>.github/dependabot.yml</code> Automated dependency updates Documentation <code>README.md</code> Main project overview Documentation <code>docs/CONTRIBUTING.md</code> Contributor guidelines Documentation <code>docs/CODE_OF_CONDUCT.md</code> Community standards Documentation <code>docs/SECURITY.md</code> Security policy Code <code>cmd/app/main.go</code> Application entry point Code <code>internal/config/</code> Configuration management Code <code>internal/service/</code> Business logic layer Code <code>internal/handler/</code> HTTP handlers/routing Scripts <code>scripts/install-hooks.sh</code> Initial setup automation"},{"location":"TEMPLATE_QUICK_REFERENCE/#essential-make-targets","title":"Essential Make Targets","text":"<pre><code># Development\nmake dev                # Hot-reload development\nmake run               # Build and run\nmake build             # Compile binary\n\n# Quality (Run before commit)\nmake pre-commit        # Run all checks\nmake fmt               # Format code\nmake lint              # Run linting\nmake vet               # Run go vet\nmake staticcheck       # Static analysis\nmake gosec             # Security scan\n\n# Testing\nmake test              # Run all tests\nmake test-race         # With race detector\nmake coverage          # Coverage report\n\n# Maintenance\nmake clean             # Remove artifacts\nmake deps              # Update dependencies\nmake install-tools    # Install dev tools\nmake docker-build      # Build container\n</code></pre>"},{"location":"TEMPLATE_QUICK_REFERENCE/#github-configuration-structure","title":"GitHub Configuration Structure","text":""},{"location":"TEMPLATE_QUICK_REFERENCE/#labels-by-category","title":"Labels (by category)","text":"<p>Types (5): bug, enhancement, documentation, question, technical-debt</p> <p>Priority (3): priority:high, priority:medium, priority:low</p> <p>Areas (7): area:cmd, area:pkg, area:internal, area:build, area:tests, area:docs, area:deps</p> <p>Status (4): triage, ready, in-progress, blocked</p> <p>Resolution (3): duplicate, wontfix, invalid</p> <p>Special (6): good first issue, help wanted, breaking-change, security, performance, dependencies</p>"},{"location":"TEMPLATE_QUICK_REFERENCE/#issue-templates","title":"Issue Templates","text":"<ol> <li>Bug Report - Component, steps to reproduce, expected/actual behavior, environment info</li> <li>Feature Request - Problem statement, proposed solution, examples, priority</li> </ol>"},{"location":"TEMPLATE_QUICK_REFERENCE/#pull-request-sections","title":"Pull Request Sections","text":"<ul> <li>Description, related issues, type of change, user impact, testing, checklist, breaking changes</li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#pre-commit-hooks-auto-run-on-commit","title":"Pre-Commit Hooks (Auto-run on Commit)","text":"Hook Action Files go-fmt Format code *.go go-mod-tidy Tidy dependencies go.mod/go.sum golangci-lint Lint with fixes *.go go-vet Check suspicious code *.go staticcheck Static analysis *.go gosec Security scan *.go go-test Run tests *.go Generic Trailing whitespace, EOF, YAML, merge conflicts All"},{"location":"TEMPLATE_QUICK_REFERENCE/#directory-structure-pattern","title":"Directory Structure Pattern","text":"<pre><code>project-template-go/\n\u251c\u2500\u2500 cmd/app/              \u2190 Executable entry point\n\u251c\u2500\u2500 internal/             \u2190 Private implementation\n\u2502   \u251c\u2500\u2500 config/           \u2190 Configuration management\n\u2502   \u251c\u2500\u2500 handler/          \u2190 HTTP/API handlers\n\u2502   \u2514\u2500\u2500 service/          \u2190 Business logic\n\u251c\u2500\u2500 pkg/                  \u2190 Public packages (optional)\n\u251c\u2500\u2500 tests/                \u2190 Test organization (fixtures, etc.)\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 workflows/        \u2190 CI/CD pipelines\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/   \u2190 Issue forms\n\u2502   \u251c\u2500\u2500 scripts/          \u2190 GitHub automation\n\u2502   \u251c\u2500\u2500 labels.yml        \u2190 Label definitions\n\u2502   \u2514\u2500\u2500 PULL_REQUEST_TEMPLATE.md\n\u251c\u2500\u2500 scripts/              \u2190 Dev/setup scripts\n\u251c\u2500\u2500 docs/                 \u2190 Documentation\n\u251c\u2500\u2500 Dockerfile            \u2190 Container config\n\u251c\u2500\u2500 Makefile              \u2190 Build automation\n\u251c\u2500\u2500 .pre-commit-config.yaml \u2190 Git hooks\n\u251c\u2500\u2500 .golangci.yml         \u2190 Linting rules\n\u251c\u2500\u2500 .air.toml             \u2190 Hot-reload config\n\u251c\u2500\u2500 .editorconfig         \u2190 Editor formatting\n\u251c\u2500\u2500 .gitignore            \u2190 Git exclusions\n\u2514\u2500\u2500 go.mod / go.sum       \u2190 Dependencies\n</code></pre>"},{"location":"TEMPLATE_QUICK_REFERENCE/#critical-configuration-settings","title":"Critical Configuration Settings","text":""},{"location":"TEMPLATE_QUICK_REFERENCE/#dockerfile","title":"Dockerfile","text":"<ul> <li>Base: <code>golang:1.23-alpine</code> \u2192 <code>scratch</code></li> <li>Security: Non-root user, static linking</li> <li>Health check: <code>/app health</code></li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#cicd-matrix","title":"CI/CD Matrix","text":"<ul> <li>Go versions: 1.22.x, 1.23.x</li> <li>OS: ubuntu-latest, macos-latest, windows-latest</li> <li>Separate jobs: test, lint, build, docker</li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#makefile-build-info","title":"Makefile Build Info","text":"<p><pre><code>VERSION = git describe --tags --always --dirty\nBUILD_TIME = date -u +\"%Y-%m-%dT%H:%M:%SZ\"\nGIT_COMMIT = git rev-parse --short HEAD\n</code></pre> Injected via <code>-ldflags</code> at build time</p>"},{"location":"TEMPLATE_QUICK_REFERENCE/#go-version","title":"Go Version","text":"<ul> <li>Minimum: 1.23</li> <li>Uses modern Go features</li> <li>Module-based dependency management</li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#environment-variables","title":"Environment Variables","text":"Variable Default Purpose PORT 8080 Server port HOST 0.0.0.0 Server host ENVIRONMENT development Environment name LOG_LEVEL info Logging level DEBUG false Debug mode flag"},{"location":"TEMPLATE_QUICK_REFERENCE/#api-endpoints-example","title":"API Endpoints (Example)","text":"<pre><code>GET  /health          \u2192 Health check\nGET  /info           \u2192 Service information\nPOST /api/process    \u2192 Data processing\n</code></pre>"},{"location":"TEMPLATE_QUICK_REFERENCE/#testing-patterns","title":"Testing Patterns","text":"<p>Table-driven tests: <pre><code>tests := []struct {\n    name        string\n    input       string\n    expected    string\n    expectError bool\n}{...}\n\nfor _, tt := range tests {\n    t.Run(tt.name, func(t *testing.T) {...})\n}\n</code></pre></p> <p>Coverage: <pre><code>go test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n</code></pre></p>"},{"location":"TEMPLATE_QUICK_REFERENCE/#key-implementation-details","title":"Key Implementation Details","text":""},{"location":"TEMPLATE_QUICK_REFERENCE/#three-layer-architecture","title":"Three-Layer Architecture","text":"<ol> <li>Handler - HTTP/API layer</li> <li>Service - Business logic</li> <li>Config - Configuration management</li> </ol>"},{"location":"TEMPLATE_QUICK_REFERENCE/#graceful-shutdown","title":"Graceful Shutdown","text":"<ul> <li>Context-based control</li> <li>Signal handling (SIGTERM, SIGINT)</li> <li>30-second timeout for cleanup</li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#error-handling","title":"Error Handling","text":"<ul> <li>Context-aware execution</li> <li>Structured error returns</li> <li>HTTP error code mapping</li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#tools-required","title":"Tools Required","text":"Tool Purpose Installation go Language Native pre-commit Git hooks pip/brew golangci-lint Linting go install staticcheck Analysis go install gosec Security go install air Hot-reload go install gh CLI GitHub management brew/apt Docker Containers brew/apt"},{"location":"TEMPLATE_QUICK_REFERENCE/#setup-checklist","title":"Setup Checklist","text":"<ol> <li>Clone repository</li> <li>Run <code>./scripts/install-hooks.sh</code></li> <li>Run <code>make deps</code> to install dependencies</li> <li>Run <code>make all</code> to verify setup</li> <li>Run <code>gh label sync --labels .github/labels.yml</code> to setup labels</li> <li>Update <code>go.mod</code> with project module path</li> <li>Customize <code>.github/labels.yml</code> for your areas</li> <li>Update FUNDING.yml with your sponsor</li> </ol>"},{"location":"TEMPLATE_QUICK_REFERENCE/#common-workflows","title":"Common Workflows","text":""},{"location":"TEMPLATE_QUICK_REFERENCE/#adding-a-new-feature","title":"Adding a New Feature","text":"<pre><code>git checkout -b feature/description\nmake dev              # Hot-reload development\nmake test             # Run tests\nmake pre-commit       # Final quality check\ngit commit -m \"feat: description\"\ngit push origin feature/description\n# Create PR using template\n</code></pre>"},{"location":"TEMPLATE_QUICK_REFERENCE/#making-a-release","title":"Making a Release","text":"<pre><code># Update CHANGELOG.md with new version\nmake clean\nmake all              # Full validation\ngit tag v1.2.3\ngit push origin main --tags\n# GitHub Actions automatically builds and creates release\n</code></pre>"},{"location":"TEMPLATE_QUICK_REFERENCE/#updating-dependencies","title":"Updating Dependencies","text":"<pre><code>make deps             # go mod download &amp;&amp; go mod tidy\nmake test             # Verify tests pass\ngit commit -m \"deps: update dependencies\"\n</code></pre>"},{"location":"TEMPLATE_QUICK_REFERENCE/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Docker: Multi-stage build reduces image size</li> <li>Testing: Race detector enabled in CI</li> <li>Caching: Go module cache in GitHub Actions</li> <li>Linting: Parallelized linter with 5-minute timeout</li> </ul>"},{"location":"TEMPLATE_QUICK_REFERENCE/#security-practices","title":"Security Practices","text":"<ol> <li>Non-root container execution</li> <li>Static binary linking (no external deps)</li> <li>Security scanning with gosec</li> <li>Dependency verification</li> <li>Vulnerability reporting policy (email, not public)</li> <li>Code review via PR workflow</li> </ol>"},{"location":"TEMPLATE_QUICK_REFERENCE/#customization-for-orca","title":"Customization for ORCA","text":"<p>Immediate changes needed: - Module path in <code>go.mod</code> - <code>scttfrdmn</code> \u2192 your organization - Area labels in <code>.github/labels.yml</code> - Environment variables for ORCA - API endpoints for ORCA services - FUNDING.yml sponsor link - Go version support matrix</p> <p>Optional enhancements: - CodeQL security scanning - Branch protection rules - CODEOWNERS file - GitHub Pages documentation - Release automation</p>"},{"location":"TESTING/","title":"ORCA Testing Guide","text":"<p>This document describes ORCA's testing approach: pragmatic, functional, and value-driven. Every test serves a clear purpose - catching real bugs, preventing regressions, or improving development speed.</p>"},{"location":"TESTING/#testing-philosophy","title":"Testing Philosophy","text":"<p>No testing for testing's sake. Every test must provide: 1. Bug prevention - Catches real issues before production 2. Regression protection - Prevents broken code from merging 3. Development velocity - Makes refactoring safe and fast 4. Documentation - Shows how code should work</p> <p>If a test doesn't provide clear value, we don't write it.</p>"},{"location":"TESTING/#test-types","title":"Test Types","text":""},{"location":"TESTING/#1-lint-code-quality","title":"1. Lint (Code Quality)","text":"<p>Purpose: Catch common mistakes and enforce consistency When: Pre-commit, CI on every PR Value: Prevents bugs, ensures idiomatic Go code</p> <pre><code># Run linters\nmake lint\n\n# Auto-fix issues\ngolangci-lint run --fix\n</code></pre> <p>What we check: - \u2705 <code>go vet</code> - Suspicious constructs - \u2705 <code>staticcheck</code> - Go best practices - \u2705 <code>errcheck</code> - Unchecked errors - \u2705 <code>gosec</code> - Security issues - \u2705 <code>gofmt</code> - Code formatting - \u2705 <code>gocritic</code> - Style issues</p> <p>Example catches: <pre><code>// BAD: Uncaught error\nec2Client.TerminateInstance(instanceID)\n\n// GOOD: Error handling\nif err := ec2Client.TerminateInstance(instanceID); err != nil {\n    return fmt.Errorf(\"failed to terminate: %w\", err)\n}\n</code></pre></p>"},{"location":"TESTING/#2-unit-tests-fast-feedback","title":"2. Unit Tests (Fast Feedback)","text":"<p>Purpose: Test individual functions in isolation When: TDD during development, CI on every PR Value: Fast feedback, safe refactoring, clear API contracts</p> <pre><code># Run unit tests\nmake test\n\n# Run specific package\ngo test -v ./pkg/instances/...\n\n# Run specific test\ngo test -v ./pkg/instances -run TestExplicitSelector\n</code></pre> <p>What to unit test: - \u2705 Instance selection logic - Core functionality - \u2705 Configuration parsing - Prevents config bugs - \u2705 Pod annotation extraction - Common bug source - \u2705 Budget calculations - Critical for cost control - \u2705 Tag generation - Required for pod tracking - \u2705 Error handling - Ensures graceful failures</p> <p>What NOT to unit test: - \u274c Trivial getters/setters - \u274c Third-party library behavior - \u274c Code that's just wiring</p>"},{"location":"TESTING/#example-instance-selector","title":"Example: Instance Selector","text":"<pre><code>// pkg/instances/selector_test.go\n\nfunc TestExplicitSelector(t *testing.T) {\n    tests := []struct {\n        name        string\n        pod         *corev1.Pod\n        expected    string\n        expectError bool\n    }{\n        {\n            name: \"explicit p5.48xlarge annotation\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{\n                        AnnotationInstanceType: \"p5.48xlarge\",\n                    },\n                },\n            },\n            expected:    \"p5.48xlarge\",\n            expectError: false,\n        },\n        {\n            name: \"missing annotation returns error\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{},\n                },\n            },\n            expected:    \"\",\n            expectError: true,\n        },\n        {\n            name: \"invalid instance type returns error\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{\n                        AnnotationInstanceType: \"invalid-type\",\n                    },\n                },\n            },\n            expected:    \"\",\n            expectError: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            selector := NewExplicitSelector()\n            result, err := selector.Select(tt.pod)\n\n            if tt.expectError &amp;&amp; err == nil {\n                t.Error(\"expected error but got nil\")\n            }\n            if !tt.expectError &amp;&amp; err != nil {\n                t.Errorf(\"unexpected error: %v\", err)\n            }\n            if result != tt.expected {\n                t.Errorf(\"expected %s, got %s\", tt.expected, result)\n            }\n        })\n    }\n}\n</code></pre> <p>Value: This test catches 90% of selector bugs in milliseconds.</p>"},{"location":"TESTING/#example-budget-enforcement","title":"Example: Budget Enforcement","text":"<pre><code>// pkg/budget/enforcer_test.go\n\nfunc TestBudgetEnforcement(t *testing.T) {\n    tests := []struct {\n        name           string\n        dailyBudget    float64\n        currentSpend   float64\n        instanceCost   float64\n        shouldAllow    bool\n    }{\n        {\n            name:         \"under budget allows instance\",\n            dailyBudget:  50.00,\n            currentSpend: 10.00,\n            instanceCost: 5.00,\n            shouldAllow:  true,\n        },\n        {\n            name:         \"at budget limit denies instance\",\n            dailyBudget:  50.00,\n            currentSpend: 48.00,\n            instanceCost: 5.00,\n            shouldAllow:  false,\n        },\n        {\n            name:         \"zero budget denies all\",\n            dailyBudget:  0.00,\n            currentSpend: 0.00,\n            instanceCost: 0.01,\n            shouldAllow:  false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            enforcer := &amp;BudgetEnforcer{\n                DailyLimit:   tt.dailyBudget,\n                CurrentSpend: tt.currentSpend,\n            }\n\n            allowed := enforcer.CanLaunchInstance(tt.instanceCost)\n\n            if allowed != tt.shouldAllow {\n                t.Errorf(\"expected %v, got %v\", tt.shouldAllow, allowed)\n            }\n        })\n    }\n}\n</code></pre> <p>Value: Prevents cost overruns - critical for production.</p>"},{"location":"TESTING/#3-integration-tests-real-interactions","title":"3. Integration Tests (Real Interactions)","text":"<p>Purpose: Test components working together When: After unit tests pass, CI on merge to main Value: Catches integration bugs, validates AWS interactions</p> <pre><code># Run integration tests (requires AWS credentials)\nmake integration-test\n\n# Or run with specific tag\ngo test -v -tags=integration ./...\n</code></pre> <p>What to integration test: - \u2705 AWS SDK calls - Ensure EC2 APIs work - \u2705 Kubernetes API - Verify pod operations - \u2705 Instance lifecycle - Create \u2192 Run \u2192 Terminate - \u2705 Configuration loading - Test full config chain - \u2705 Error scenarios - Network failures, AWS throttling</p>"},{"location":"TESTING/#example-aws-client-integration","title":"Example: AWS Client Integration","text":"<pre><code>// internal/aws/client_test.go\n// +build integration\n\nfunc TestEC2CreateInstance(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"skipping integration test\")\n    }\n\n    // Setup\n    cfg := loadTestConfig(t)\n    client := NewClient(cfg)\n\n    pod := &amp;corev1.Pod{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      \"test-pod\",\n            Namespace: \"default\",\n            Annotations: map[string]string{\n                AnnotationInstanceType: \"t3.small\",\n            },\n        },\n        Spec: corev1.PodSpec{\n            Containers: []corev1.Container{\n                {\n                    Name:  \"test\",\n                    Image: \"busybox\",\n                },\n            },\n        },\n    }\n\n    // Execute\n    ctx := context.Background()\n    instanceID, err := client.CreateInstance(ctx, pod)\n    if err != nil {\n        t.Fatalf(\"failed to create instance: %v\", err)\n    }\n\n    // Verify\n    instance, err := client.DescribeInstance(ctx, instanceID)\n    if err != nil {\n        t.Fatalf(\"failed to describe instance: %v\", err)\n    }\n    if instance.State != \"running\" &amp;&amp; instance.State != \"pending\" {\n        t.Errorf(\"expected running/pending, got %s\", instance.State)\n    }\n\n    // Cleanup\n    defer func() {\n        if err := client.TerminateInstance(ctx, instanceID); err != nil {\n            t.Errorf(\"cleanup failed: %v\", err)\n        }\n    }()\n}\n</code></pre> <p>Value: Catches AWS API changes, permission issues, network problems.</p> <p>Cost control for integration tests: <pre><code>// Use smallest instance types\nconst testInstanceType = \"t3.nano\"  // $0.0052/hour\n\n// Set short timeouts\nctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)\ndefer cancel()\n\n// Always cleanup\ndefer cleanupTestResources(t, client)\n</code></pre></p>"},{"location":"TESTING/#4-smoke-tests-quick-sanity-check","title":"4. Smoke Tests (Quick Sanity Check)","text":"<p>Purpose: Verify basic functionality works end-to-end When: After deployment, before releasing Value: Catches deployment issues, validates basic workflows</p> <pre><code># Run smoke tests against deployed ORCA\nmake smoke-test CLUSTER=kind-orca-dev\n\n# Or manually\n./scripts/smoke-test.sh\n</code></pre> <p>What smoke tests check: - \u2705 ORCA pod is running - \u2705 Virtual node is registered - \u2705 Simple pod can be created - \u2705 Instance launches successfully - \u2705 Pod reaches Running state - \u2705 Pod can be deleted - \u2705 Instance terminates</p>"},{"location":"TESTING/#example-smoke-test-script","title":"Example: Smoke Test Script","text":"<pre><code>#!/bin/bash\n# scripts/smoke-test.sh\n\nset -e\n\necho \"\ud83d\udd0d Running ORCA smoke tests...\"\n\n# 1. Check ORCA is running\necho \"Checking ORCA pod...\"\nkubectl get pods -n kube-system -l app=orca | grep Running\n\n# 2. Check virtual node exists\necho \"Checking virtual node...\"\nkubectl get node -l orca.research/provider=aws\n\n# 3. Deploy test pod\necho \"Deploying test pod...\"\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: smoke-test-pod\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  containers:\n  - name: test\n    image: busybox\n    command: [\"sh\", \"-c\", \"echo 'Smoke test passed' &amp;&amp; sleep 60\"]\nEOF\n\n# 4. Wait for pod to run\necho \"Waiting for pod to run...\"\nkubectl wait --for=condition=Ready pod/smoke-test-pod --timeout=5m\n\n# 5. Verify instance exists\necho \"Checking EC2 instance...\"\naws ec2 describe-instances \\\n  --filters \"Name=tag:orca.research/pod,Values=default/smoke-test-pod\" \\\n  --query 'Reservations[0].Instances[0].State.Name' \\\n  --output text | grep running\n\n# 6. Cleanup\necho \"Cleaning up...\"\nkubectl delete pod smoke-test-pod --wait=true\n\n# 7. Verify instance terminated\necho \"Verifying cleanup...\"\nsleep 30\naws ec2 describe-instances \\\n  --filters \"Name=tag:orca.research/pod,Values=default/smoke-test-pod\" \\\n  --query 'Reservations[0].Instances[0].State.Name' \\\n  --output text | grep -E 'terminated|shutting-down'\n\necho \"\u2705 Smoke tests passed!\"\n</code></pre> <p>Value: 5-minute test catches 80% of deployment issues.</p>"},{"location":"TESTING/#5-regression-tests-prevent-known-bugs","title":"5. Regression Tests (Prevent Known Bugs)","text":"<p>Purpose: Ensure fixed bugs stay fixed When: CI on every PR, before release Value: Prevents bugs from reappearing</p> <p>Process: 1. Bug is reported 2. Write failing test that reproduces bug 3. Fix bug 4. Test now passes 5. Test prevents regression forever</p>"},{"location":"TESTING/#example-regression-for-issue-42","title":"Example: Regression for Issue #42","text":"<pre><code>// pkg/provider/provider_test.go\n\n// TestIssue42_PodWithNoAnnotations tests the fix for:\n// https://github.com/scttfrdmn/orca/issues/42\n// Bug: ORCA crashed when pod had no annotations\nfunc TestIssue42_PodWithNoAnnotations(t *testing.T) {\n    provider := NewProvider(testConfig())\n\n    pod := &amp;corev1.Pod{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:        \"no-annotations\",\n            Namespace:   \"default\",\n            Annotations: nil,  // This was causing panic\n        },\n        Spec: corev1.PodSpec{\n            Containers: []corev1.Container{{Name: \"test\", Image: \"busybox\"}},\n        },\n    }\n\n    // Should not panic\n    err := provider.CreatePod(context.Background(), pod)\n\n    // Should return error, not panic\n    if err == nil {\n        t.Error(\"expected error for missing annotations, got nil\")\n    }\n    if !strings.Contains(err.Error(), \"missing required annotation\") {\n        t.Errorf(\"expected helpful error message, got: %v\", err)\n    }\n}\n</code></pre> <p>Value: Bug #42 can never come back.</p>"},{"location":"TESTING/#test-coverage","title":"Test Coverage","text":"<p>We track coverage but don't worship it. 80%+ coverage is good. 100% is wasteful.</p> <pre><code># Generate coverage report\nmake coverage\n\n# View in browser\nopen coverage.html\n\n# Fail CI if coverage drops below 80%\ngo test -coverprofile=coverage.txt ./...\ngo tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//' | awk '$1 &lt; 80 {exit 1}'\n</code></pre> <p>Coverage priorities: 1. Critical paths: 100% (budget enforcement, instance selection) 2. Common paths: 80%+ (pod creation, deletion) 3. Error handling: 70%+ (various failure modes) 4. Happy paths: 60%+ (basic workflows)</p> <p>Don't cover: - Generated code - Third-party integrations (test with mocks) - Trivial code (simple getters)</p>"},{"location":"TESTING/#testing-tools","title":"Testing Tools","text":""},{"location":"TESTING/#mocking-aws-sdk","title":"Mocking AWS SDK","text":"<pre><code>// internal/aws/mock.go\n\ntype MockEC2Client struct {\n    CreateInstanceFunc    func(context.Context, *ec2.RunInstancesInput) (*ec2.RunInstancesOutput, error)\n    TerminateInstanceFunc func(context.Context, *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)\n}\n\nfunc (m *MockEC2Client) RunInstances(ctx context.Context, input *ec2.RunInstancesInput, opts ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error) {\n    if m.CreateInstanceFunc != nil {\n        return m.CreateInstanceFunc(ctx, input)\n    }\n    return &amp;ec2.RunInstancesOutput{\n        Instances: []types.Instance{\n            {InstanceId: aws.String(\"i-mock123\")},\n        },\n    }, nil\n}\n</code></pre>"},{"location":"TESTING/#test-fixtures","title":"Test Fixtures","text":"<pre><code>// pkg/testing/fixtures.go\n\n// CreateTestPod creates a pod for testing\nfunc CreateTestPod(name, instanceType string) *corev1.Pod {\n    return &amp;corev1.Pod{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      name,\n            Namespace: \"default\",\n            Annotations: map[string]string{\n                AnnotationInstanceType: instanceType,\n            },\n        },\n        Spec: corev1.PodSpec{\n            Containers: []corev1.Container{\n                {Name: \"test\", Image: \"busybox\"},\n            },\n        },\n    }\n}\n</code></pre>"},{"location":"TESTING/#table-driven-tests","title":"Table-Driven Tests","text":"<pre><code>func TestInstanceSelection(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    *corev1.Pod\n        expected string\n        wantErr  bool\n    }{\n        // Test cases here\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test logic here\n        })\n    }\n}\n</code></pre>"},{"location":"TESTING/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"TESTING/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/test.yml\n\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n      - name: Lint\n        uses: golangci/golangci-lint-action@v4\n        with:\n          version: latest\n\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n      - name: Run unit tests\n        run: make test\n      - name: Upload coverage\n        uses: codecov/codecov-action@v4\n        with:\n          files: ./coverage.txt\n\n  integration-test:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n      - name: Configure AWS\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n      - name: Run integration tests\n        run: make integration-test\n\n  smoke-test:\n    runs-on: ubuntu-latest\n    needs: [unit-test]\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v4\n      - name: Create kind cluster\n        uses: helm/kind-action@v1\n      - name: Build and deploy ORCA\n        run: |\n          make docker-build\n          kind load docker-image orca:latest\n          kubectl apply -f deploy/kubernetes/\n      - name: Run smoke tests\n        run: ./scripts/smoke-test.sh\n</code></pre>"},{"location":"TESTING/#test-organization","title":"Test Organization","text":"<pre><code>orca/\n\u251c\u2500\u2500 pkg/\n\u2502   \u251c\u2500\u2500 provider/\n\u2502   \u2502   \u251c\u2500\u2500 provider.go\n\u2502   \u2502   \u251c\u2500\u2500 provider_test.go      # Unit tests\n\u2502   \u2502   \u2514\u2500\u2500 provider_integration_test.go  # Integration tests\n\u2502   \u251c\u2500\u2500 instances/\n\u2502   \u2502   \u251c\u2500\u2500 selector.go\n\u2502   \u2502   \u2514\u2500\u2500 selector_test.go\n\u2502   \u2514\u2500\u2500 budget/\n\u2502       \u251c\u2500\u2500 enforcer.go\n\u2502       \u2514\u2500\u2500 enforcer_test.go\n\u251c\u2500\u2500 internal/\n\u2502   \u2514\u2500\u2500 aws/\n\u2502       \u251c\u2500\u2500 client.go\n\u2502       \u251c\u2500\u2500 client_test.go\n\u2502       \u251c\u2500\u2500 client_integration_test.go\n\u2502       \u2514\u2500\u2500 mock.go               # Mock implementations\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 smoke-test.sh             # Smoke tests\n\u2502   \u2514\u2500\u2500 regression-test.sh        # Regression suite\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 fixtures/                 # Test fixtures\n    \u2514\u2500\u2500 e2e/                      # End-to-end tests\n</code></pre>"},{"location":"TESTING/#testing-checklist","title":"Testing Checklist","text":"<p>Before merging a PR:</p> <ul> <li> <code>make lint</code> passes</li> <li> <code>make test</code> passes with &gt;80% coverage</li> <li> Integration tests pass (if touching AWS code)</li> <li> Smoke test passes (if changing core logic)</li> <li> Added regression test (if fixing bug)</li> <li> Updated test documentation (if adding new test patterns)</li> </ul> <p>Before releasing:</p> <ul> <li> All CI tests pass</li> <li> Smoke tests pass on kind</li> <li> Smoke tests pass on EKS (if available)</li> <li> Manual testing of new features</li> <li> Regression suite passes</li> <li> Performance tests pass (if applicable)</li> </ul>"},{"location":"TESTING/#performance-testing","title":"Performance Testing","text":"<p>For features impacting performance:</p> <pre><code>func BenchmarkInstanceSelection(b *testing.B) {\n    selector := NewExplicitSelector()\n    pod := CreateTestPod(\"test\", \"p5.48xlarge\")\n\n    b.ResetTimer()\n    for i := 0; i &lt; b.N; i++ {\n        _, err := selector.Select(pod)\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n</code></pre> <p>Run with: <pre><code>go test -bench=. -benchmem ./pkg/instances/\n</code></pre></p>"},{"location":"TESTING/#summary","title":"Summary","text":"<p>Our testing approach:</p> <ol> <li>Lint: Catch mistakes early (seconds)</li> <li>Unit tests: Fast feedback (milliseconds)</li> <li>Integration tests: Validate AWS (minutes, limited runs)</li> <li>Smoke tests: Deployment validation (5 minutes)</li> <li>Regression tests: Keep bugs fixed (continuous)</li> </ol> <p>Every test provides clear value. No busywork. Focus on preventing real bugs and enabling safe refactoring.</p> <p>Test pyramid: <pre><code>        /\\\n       /  \\      E2E Tests (few, slow, expensive)\n      /    \\\n     /------\\    Integration Tests (some, moderate)\n    /        \\\n   /----------\\  Unit Tests (many, fast, cheap)\n  /------------\\\n /   Linting   \\ Static Analysis (everywhere, instant)\n/________________\\\n</code></pre></p> <p>Most value comes from the bottom. Write more unit tests, fewer integration tests, minimal E2E tests.</p>"},{"location":"TESTING_STRATEGY/","title":"ORCA Testing Strategy","text":"<p>This document outlines the progressive testing strategy for ORCA, from local development to production-scale validation.</p>"},{"location":"TESTING_STRATEGY/#testing-phases","title":"Testing Phases","text":""},{"location":"TESTING_STRATEGY/#phase-1-local-development-kind-mock-aws","title":"Phase 1: Local Development (kind + Mock AWS)","text":"<p>Goal: Develop core functionality without AWS costs Duration: Weeks 1-4 Cost: $0</p>"},{"location":"TESTING_STRATEGY/#setup","title":"Setup","text":"<pre><code># Install kind\nbrew install kind\n\n# Create local cluster\n./scripts/setup-kind-cluster.sh\n\n# Run ORCA in mock mode\n./scripts/test-local.sh\n</code></pre>"},{"location":"TESTING_STRATEGY/#what-to-test","title":"What to Test","text":"<ul> <li>\u2705 Virtual Kubelet provider interface</li> <li>\u2705 Pod lifecycle management (create, update, delete)</li> <li>\u2705 Instance selection logic (explicit, template, auto)</li> <li>\u2705 Configuration parsing and validation</li> <li>\u2705 Kubernetes API integration</li> <li>\u2705 Error handling and edge cases</li> <li>\u2705 Metrics and logging</li> </ul>"},{"location":"TESTING_STRATEGY/#advantages","title":"Advantages","text":"<ul> <li>Fast iteration cycle (seconds)</li> <li>No AWS charges</li> <li>Easy cleanup</li> <li>Multiple test scenarios quickly</li> </ul>"},{"location":"TESTING_STRATEGY/#phase-2-local-development-kind-real-aws","title":"Phase 2: Local Development (kind + Real AWS)","text":"<p>Goal: Validate AWS integration with minimal costs Duration: Weeks 4-8 Cost: ~$10-50/month</p>"},{"location":"TESTING_STRATEGY/#setup_1","title":"Setup","text":"<pre><code># Use kind cluster from Phase 1\n# Update config.dev.yaml with real AWS credentials\n\n# Run ORCA with real AWS\n./bin/orca --config config.dev.yaml\n\n# Deploy test pod (t3.small = ~$0.02/hour)\nkubectl apply -f examples/test-pod.yaml\n</code></pre>"},{"location":"TESTING_STRATEGY/#what-to-test_1","title":"What to Test","text":"<ul> <li>\u2705 EC2 instance creation and termination</li> <li>\u2705 Security groups and networking</li> <li>\u2705 IAM permissions</li> <li>\u2705 Instance tagging and pod mapping</li> <li>\u2705 Spot instance handling</li> <li>\u2705 Cost tracking and budget enforcement</li> <li>\u2705 GPU instance types (brief tests)</li> <li>\u2705 Instance lifecycle edge cases</li> </ul>"},{"location":"TESTING_STRATEGY/#cost-controls","title":"Cost Controls","text":"<pre><code># config.dev.yaml safeguards\nlimits:\n  maxConcurrentInstances: 5\n  dailyBudget: 50.00\n  monthlyBudget: 500.00\n  maxInstanceLifetime: 4h\n</code></pre>"},{"location":"TESTING_STRATEGY/#recommended-test-instances","title":"Recommended Test Instances","text":"Instance Type Use Case Cost/Hour Test Duration t3.small Basic functionality $0.021 30 min = $0.01 t3.medium CPU workloads $0.042 30 min = $0.02 g5.xlarge GPU basic test $1.006 10 min = $0.17 p5.48xlarge GPU validation $54.00 5 min = $4.50 <p>Total estimated cost for Phase 2: $20-50 with careful testing</p>"},{"location":"TESTING_STRATEGY/#phase-3-eks-integration-testing","title":"Phase 3: EKS Integration Testing","text":"<p>Goal: Test ORCA on real AWS Kubernetes (EKS) for production-like environment Duration: Weeks 8-12 Cost: ~$150-300/month</p>"},{"location":"TESTING_STRATEGY/#why-eks-testing-matters","title":"Why EKS Testing Matters","text":"<p>EKS provides a more realistic test environment: - Real AWS networking - VPC, subnets, security groups as they'll exist in production - IAM for Service Accounts - IRSA for secure credential management - Scale testing - Test with multiple nodes, namespaces, users - Production patterns - LoadBalancers, persistent volumes, service mesh - Multi-tenant validation - Department isolation, cost allocation - Networking complexity - Test pod-to-pod, pod-to-instance communication</p>"},{"location":"TESTING_STRATEGY/#eks-setup","title":"EKS Setup","text":"<pre><code># Create EKS cluster (use Terraform)\ncd deploy/terraform/eks-test\n\n# Provision EKS cluster\nterraform init\nterraform plan\nterraform apply\n\n# Outputs:\n# - EKS cluster (2 t3.medium nodes)\n# - VPC with public/private subnets\n# - IAM roles for ORCA\n# - Security groups\n</code></pre>"},{"location":"TESTING_STRATEGY/#eks-cost-breakdown","title":"EKS Cost Breakdown","text":"<p>EKS Control Plane: $73/month (0.10/hour \u00d7 730 hours) Worker Nodes: - 2x t3.medium = $61/month (2 \u00d7 \\(0.042/hour \u00d7 730 hours) **Total Base**: ~\\)134/month</p> <p>Burst Testing (additional): - Test instances: ~\\(20-50/month - Data transfer: ~\\)5-10/month</p> <p>Total Phase 3 Cost: ~$150-300/month</p>"},{"location":"TESTING_STRATEGY/#cost-optimization-for-testing","title":"Cost Optimization for Testing","text":"<pre><code># terraform.tfvars - Minimal EKS for testing\ncluster_version = \"1.28\"\nnode_instance_type = \"t3.medium\"\nnode_count = 2  # Minimum for HA\ndisk_size = 20  # GB\n\n# Enable spot instances for worker nodes (60-70% savings)\nnode_use_spot = true\n</code></pre> <p>With spot instances: ~$100-150/month</p>"},{"location":"TESTING_STRATEGY/#what-to-test-on-eks","title":"What to Test on EKS","text":"<p>Functional Testing - \u2705 ORCA deployment via Helm/kubectl - \u2705 Multiple virtual nodes - \u2705 Multi-namespace pod bursting - \u2705 IRSA (IAM Roles for Service Accounts) - \u2705 VPC networking and security groups - \u2705 Persistent volume handling - \u2705 Service discovery (DNS) - \u2705 Load balancer integration</p> <p>Scale Testing - \u2705 10-50 concurrent burst pods - \u2705 Multiple departments/namespaces - \u2705 Budget enforcement across teams - \u2705 Instance pool management - \u2705 Spot instance interruptions - \u2705 Fast scale-up (0 \u2192 10 instances) - \u2705 Fast scale-down (cleanup)</p> <p>Production Validation - \u2705 High availability (controller restarts) - \u2705 Upgrade testing (rolling updates) - \u2705 Monitoring and alerting - \u2705 Log aggregation (CloudWatch) - \u2705 Cost tracking accuracy - \u2705 Security scanning (IAM, network policies)</p>"},{"location":"TESTING_STRATEGY/#eks-test-scenarios","title":"EKS Test Scenarios","text":"<p>Scenario 1: Basic Burst <pre><code># Deploy 5 pods across different instance types\nkubectl apply -f examples/eks-test/mixed-workloads.yaml\n\n# Expected: 5 EC2 instances created, pods running\n# Cost: ~$0.50 for 30-minute test\n</code></pre></p> <p>Scenario 2: Multi-Department <pre><code># Create namespaces for biology, cs, physics departments\nkubectl apply -f examples/eks-test/multi-tenant.yaml\n\n# Test budget isolation\n# Expected: Department budgets enforced separately\n</code></pre></p> <p>Scenario 3: Spot Interruption <pre><code># Launch spot instances\nkubectl apply -f examples/eks-test/spot-workload.yaml\n\n# Simulate interruption (terminate instance manually)\n# Expected: ORCA handles gracefully, marks pod as failed\n</code></pre></p> <p>Scenario 4: GPU Workload <pre><code># Deploy GPU training job\nkubectl apply -f examples/eks-test/gpu-training.yaml\n\n# Expected: p5.48xlarge launched, NVIDIA drivers work\n# Cost: ~$4.50 for 5-minute validation\n</code></pre></p>"},{"location":"TESTING_STRATEGY/#phase-4-nrpsdsu-production-testing","title":"Phase 4: NRP/SDSU Production Testing","text":"<p>Goal: Validate ORCA on actual NRP infrastructure Duration: Weeks 12-16 Cost: Covered by NRP/SDSU AWS accounts</p>"},{"location":"TESTING_STRATEGY/#setup_2","title":"Setup","text":"<ul> <li>Deploy ORCA to NRP Nautilus cluster</li> <li>Configure ORCA to use SDSU AWS account</li> <li>Work with SDSU researchers for real workloads</li> </ul>"},{"location":"TESTING_STRATEGY/#what-to-test_2","title":"What to Test","text":"<ul> <li>\u2705 Ceph storage integration</li> <li>\u2705 NRP namespace/quota integration</li> <li>\u2705 Real research workloads (AI/ML training)</li> <li>\u2705 Multi-site awareness</li> <li>\u2705 Long-running jobs (days)</li> <li>\u2705 Large-scale GPU jobs (8x H100)</li> <li>\u2705 User feedback and usability</li> </ul>"},{"location":"TESTING_STRATEGY/#testing-matrix","title":"Testing Matrix","text":"Test Type Phase 1 Phase 2 Phase 3 Phase 4 Environment kind kind + AWS EKS NRP Nautilus Cost $0 $10-50/mo $150-300/mo Covered Duration Weeks 1-4 Weeks 4-8 Weeks 8-12 Weeks 12-16 Unit tests \u2705 \u2705 \u2705 \u2705 Integration tests Mock Real AWS Real AWS Real AWS Scale (pods) 1-5 1-10 10-50 50-500 GPU testing Mock Brief Full Production Multi-tenancy N/A Single Multiple Multiple NRP features N/A N/A N/A \u2705"},{"location":"TESTING_STRATEGY/#eks-vs-kind-when-to-use-each","title":"EKS vs kind: When to Use Each","text":""},{"location":"TESTING_STRATEGY/#use-kind-for","title":"Use kind for:","text":"<ul> <li>\u2705 Daily development</li> <li>\u2705 Unit/integration tests</li> <li>\u2705 CI/CD pipeline tests</li> <li>\u2705 Quick iterations</li> <li>\u2705 Feature development</li> <li>\u2705 Pre-commit validation</li> </ul>"},{"location":"TESTING_STRATEGY/#use-eks-for","title":"Use EKS for:","text":"<ul> <li>\u2705 Production-like validation</li> <li>\u2705 Scale testing</li> <li>\u2705 Multi-tenancy validation</li> <li>\u2705 Networking complexity</li> <li>\u2705 IAM/IRSA testing</li> <li>\u2705 Performance benchmarking</li> <li>\u2705 Pre-release validation</li> </ul>"},{"location":"TESTING_STRATEGY/#terraform-setup-for-eks-testing","title":"Terraform Setup for EKS Testing","text":"<p>We'll create Terraform modules for easy EKS test cluster provisioning:</p> <pre><code>deploy/terraform/\n\u251c\u2500\u2500 eks-test/\n\u2502   \u251c\u2500\u2500 main.tf           # EKS cluster definition\n\u2502   \u251c\u2500\u2500 variables.tf      # Configurable parameters\n\u2502   \u251c\u2500\u2500 outputs.tf        # Cluster endpoints, kubeconfig\n\u2502   \u251c\u2500\u2500 vpc.tf           # VPC for testing\n\u2502   \u2514\u2500\u2500 iam.tf           # IAM roles for ORCA\n</code></pre>"},{"location":"TESTING_STRATEGY/#quick-commands","title":"Quick Commands","text":"<pre><code># Create EKS test cluster\ncd deploy/terraform/eks-test\nterraform apply\n\n# Deploy ORCA to EKS\nkubectl apply -f ../../kubernetes/\n\n# Run tests\nkubectl apply -f ../../../examples/eks-test/\n\n# Destroy when done\nterraform destroy\n</code></pre>"},{"location":"TESTING_STRATEGY/#cost-saving-tips","title":"Cost-Saving Tips","text":"<p>1. Use Spot Instances for Workers <pre><code>node_use_spot = true  # 60-70% savings on worker nodes\n</code></pre></p> <p>2. Auto-Shutdown Overnight <pre><code># Scale to 0 nodes overnight (save ~$20/day)\nkubectl scale deployment --all --replicas=0 -n kube-system\n</code></pre></p> <p>3. Weekend Teardown <pre><code># Destroy cluster on Friday, recreate Monday\nterraform destroy  # Friday 5pm\nterraform apply    # Monday 9am\n# Saves ~$67/weekend\n</code></pre></p> <p>4. On-Demand Only When Needed <pre><code># Use EKS only for specific tests\n# - Pre-release validation (1 week before release)\n# - Scale testing (once per sprint)\n# - Production issue reproduction\n</code></pre></p> <p>Realistic EKS Testing Cost: ~$50-100/month with disciplined usage</p>"},{"location":"TESTING_STRATEGY/#continuous-integration-strategy","title":"Continuous Integration Strategy","text":""},{"location":"TESTING_STRATEGY/#github-actions-phase-1-2","title":"GitHub Actions (Phase 1-2)","text":"<pre><code># .github/workflows/ci.yml\n- Unit tests on every PR (kind)\n- Integration tests on merge to main (kind + mock AWS)\n- Nightly: Integration tests with real AWS (small instances)\n</code></pre>"},{"location":"TESTING_STRATEGY/#eks-testing-phase-3","title":"EKS Testing (Phase 3)","text":"<pre><code># Manual trigger or weekly schedule\n- Deploy to EKS test cluster\n- Run full test suite\n- Performance benchmarks\n- Cost validation\n- Teardown after tests\n</code></pre>"},{"location":"TESTING_STRATEGY/#testing-checklist","title":"Testing Checklist","text":""},{"location":"TESTING_STRATEGY/#before-each-release","title":"Before Each Release","text":"<ul> <li> Phase 1: All unit tests pass</li> <li> Phase 1: All integration tests pass (mock AWS)</li> <li> Phase 2: AWS integration tests pass (t3.small instances)</li> <li> Phase 2: GPU validation (g5.xlarge, 10 min test)</li> <li> Phase 3: EKS deployment successful</li> <li> Phase 3: Multi-tenant validation</li> <li> Phase 3: Scale test (20 concurrent pods)</li> <li> Phase 3: Cost tracking accuracy verified</li> <li> Documentation updated</li> <li> CHANGELOG updated</li> </ul>"},{"location":"TESTING_STRATEGY/#cost-tracking","title":"Cost Tracking","text":"<p>Track testing costs across all phases:</p> <pre><code># AWS Cost Explorer query\naws ce get-cost-and-usage \\\n  --time-period Start=2025-01-01,End=2025-01-31 \\\n  --granularity MONTHLY \\\n  --metrics BlendedCost \\\n  --group-by Type=TAG,Key=orca:testing\n\n# Expected monthly costs:\n# - Phase 1: $0\n# - Phase 2: $10-50\n# - Phase 3: $150-300 (or $50-100 with optimizations)\n# - Phase 4: Covered by partners\n</code></pre>"},{"location":"TESTING_STRATEGY/#timeline-summary","title":"Timeline Summary","text":"<p>Month 1: Phase 1 (kind + mock AWS) - $0 Month 2: Phase 2 (kind + real AWS) - $10-50 Month 3-4: Phase 3 (EKS testing) - \\(150-300 (\\)50-100 optimized) Month 4+: Phase 4 (NRP production) - Partner covered</p> <p>Total estimated testing cost: $200-400 over 4 months With optimizations: $100-200 over 4 months</p>"},{"location":"TESTING_STRATEGY/#conclusion","title":"Conclusion","text":"<p>The progressive testing strategy allows you to: 1. \u2705 Develop quickly and cheaply (kind + mock) 2. \u2705 Validate AWS integration (kind + real AWS) 3. \u2705 Test production scenarios (EKS) 4. \u2705 Deploy to real users (NRP)</p> <p>EKS testing (Phase 3) is valuable but not required until you're confident in the core functionality. You can develop the entire MVP in Phase 1-2 for under $50, then invest in EKS testing when preparing for production deployment.</p> <p>Recommendation: Start with Phase 1-2, add EKS testing when ready to engage NRP/SDSU for production pilots.</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/","title":"Virtual Kubelet Integration","text":"<p>This document describes ORCA's Virtual Kubelet integration, which enables ORCA to register as a Kubernetes node and handle pod lifecycle events.</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#overview","title":"Overview","text":"<p>ORCA uses the Virtual Kubelet framework to present itself as a node in a Kubernetes cluster. When pods are scheduled to the ORCA node, they are executed as EC2 instances on AWS rather than as containers on a physical node.</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Kubernetes Control Plane                \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u2502\n\u2502 \u2502  Scheduler  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502          \u2502\n\u2502                               \u25bc          \u2502\n\u2502                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502                        \u2502  API Server  \u2502 \u2502\n\u2502                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u2502 Watch Pods\n                                \u2502 Update Status\n                                \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   ORCA Virtual Node   \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 Node Controller   \u2502 \u2502\n                    \u2502 \u2502 - Register Node   \u2502 \u2502\n                    \u2502 \u2502 - Watch Pods      \u2502 \u2502\n                    \u2502 \u2502 - Update Status   \u2502 \u2502\n                    \u2502 \u2502 - Manage Lease    \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2502          \u2502            \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 VK Adapter        \u2502 \u2502\n                    \u2502 \u2502 - CreatePod       \u2502 \u2502\n                    \u2502 \u2502 - DeletePod       \u2502 \u2502\n                    \u2502 \u2502 - GetPodStatus    \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2502          \u2502            \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 ORCA Provider     \u2502 \u2502\n                    \u2502 \u2502 - Instance Mgmt   \u2502 \u2502\n                    \u2502 \u2502 - AWS Client      \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u2502 EC2 API\n                               \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   AWS EC2             \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 i1 \u2502 \u2502 i2 \u2502 \u2502 i3 \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#components","title":"Components","text":""},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pkgnodecontrollergo","title":"pkg/node/controller.go","text":"<p>The <code>Controller</code> manages the Virtual Kubelet node lifecycle:</p> <ul> <li>Initialization: Creates Kubernetes client, ORCA provider, and Virtual Kubelet components</li> <li>Node Registration: Registers the virtual node with the Kubernetes API server</li> <li>Lease Management: Maintains node heartbeat via Kubernetes lease mechanism (40s intervals)</li> <li>Graceful Shutdown: Handles SIGTERM/SIGINT with proper cleanup</li> </ul> <p>Key Methods: <pre><code>// NewController creates a new node controller\nfunc NewController(cfg *config.Config, kubeconfigPath, namespace, version string, logger zerolog.Logger) (*Controller, error)\n\n// Run starts the Virtual Kubelet node controller\nfunc (c *Controller) Run(ctx context.Context) error\n\n// Shutdown gracefully shuts down the controller\nfunc (c *Controller) Shutdown(ctx context.Context) error\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pkgnodeadaptergo","title":"pkg/node/adapter.go","text":"<p>The <code>VirtualKubeletAdapter</code> implements the Virtual Kubelet <code>PodLifecycleHandler</code> interface, bridging between Virtual Kubelet and the ORCA provider:</p> <p>Pod Lifecycle Methods: - <code>CreatePod</code>: Called when Kubernetes schedules a pod to this node - <code>UpdatePod</code>: Called when pod spec is updated - <code>DeletePod</code>: Called when pod is deleted - <code>GetPod</code>: Retrieves pod by namespace/name - <code>GetPods</code>: Lists all pods on this node - <code>GetPodStatus</code>: Gets current pod status</p> <p>Exec/Logs Methods: - <code>GetContainerLogs</code>: Retrieves container logs (TODO: implement via CloudWatch) - <code>RunInContainer</code>: Executes commands in container (TODO: implement via SSM)</p> <p>Node Methods: - <code>ConfigureNode</code>: Sets node capacity, labels, taints - <code>NotifyNodeStatus</code>: Callback for node status updates - <code>Ping</code>: Health check for provider responsiveness</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pod-lifecycle-flow","title":"Pod Lifecycle Flow","text":""},{"location":"VIRTUAL-KUBELET-INTEGRATION/#1-pod-creation","title":"1. Pod Creation","text":"<pre><code>User submits pod \u2192 Scheduler assigns to orca-aws-node \u2192 \nCreatePod called \u2192 Instance selector chooses type \u2192\nEC2 instance launched \u2192 Pod status updated to Running\n</code></pre> <p>Code Flow: <pre><code>// 1. Virtual Kubelet calls CreatePod\nadapter.CreatePod(ctx, pod)\n  \u2193\n// 2. ORCA provider handles creation\nprovider.CreatePod(ctx, pod)\n  \u2193\n// 3. Select instance type from annotations\nselector.Select(pod) // Returns \"p5.48xlarge\"\n  \u2193\n// 4. Launch EC2 instance\nawsClient.CreateInstance(ctx, pod, instanceType)\n  \u2193\n// 5. Tag instance with pod metadata\nbuildInstanceTags(pod, instanceType)\n  \u2193\n// 6. Wait for instance running state\nwaiter.Wait(ctx, instanceID, 5*time.Minute)\n  \u2193\n// 7. Update pod status\npod.Status.Phase = corev1.PodRunning\npod.Status.HostIP = instance.PublicIP\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#2-pod-monitoring","title":"2. Pod Monitoring","text":"<p>ORCA continuously syncs pod status with EC2 instance state:</p> <pre><code>// Virtual Kubelet periodically calls GetPodStatus\nstatus := provider.GetPodStatus(ctx, namespace, name)\n  \u2193\n// Query EC2 instance state\ninstance := awsClient.GetInstanceByPod(ctx, namespace, name)\n  \u2193\n// Map EC2 state to Pod phase\nswitch instance.State {\ncase \"running\":  \u2192 corev1.PodRunning\ncase \"pending\":  \u2192 corev1.PodPending\ncase \"stopped\":  \u2192 corev1.PodFailed\n}\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#3-pod-deletion","title":"3. Pod Deletion","text":"<pre><code>kubectl delete pod \u2192 DeletePod called \u2192\nFind EC2 instance by tags \u2192 Terminate instance \u2192\nPod removed from tracking\n</code></pre> <p>Code Flow: <pre><code>adapter.DeletePod(ctx, pod)\n  \u2193\nprovider.DeletePod(ctx, pod)\n  \u2193\n// Find instance by pod tags\ninstance := awsClient.GetInstanceByPod(ctx, pod.Namespace, pod.Name)\n  \u2193\n// Terminate instance\nawsClient.TerminateInstance(ctx, instance.ID)\n  \u2193\n// Remove from internal tracking\ndelete(provider.pods, pod.UID)\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#node-configuration","title":"Node Configuration","text":"<p>The virtual node is configured via <code>config.yaml</code>:</p> <pre><code>node:\n  name: orca-aws-node\n\n  labels:\n    orca.research/provider: \"aws\"\n    orca.research/region: \"us-west-2\"\n    type: virtual-kubelet\n\n  taints:\n    - key: orca.research/burst-node\n      value: \"true\"\n      effect: NoSchedule\n\n  operatingSystem: Linux\n\n  # Aggregate capacity (upper bounds)\n  cpu: \"1000\"      # 1000 vCPUs\n  memory: \"4Ti\"    # 4 TiB\n  pods: \"1000\"     # Max 1000 pods\n  gpu: \"100\"       # Max 100 GPUs\n</code></pre> <p>Node Labels: - <code>orca.research/provider: aws</code> - Identifies ORCA nodes - <code>orca.research/region: us-west-2</code> - AWS region - <code>type: virtual-kubelet</code> - Standard Virtual Kubelet label</p> <p>Node Taints: - <code>orca.research/burst-node=true:NoSchedule</code> - Prevents regular pods from scheduling   - Pods must explicitly tolerate this taint to burst to AWS</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pod-annotations","title":"Pod Annotations","text":"<p>Pods control their EC2 instance configuration via annotations:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: gpu-training\n  annotations:\n    # Required: Explicit instance type selection\n    orca.research/instance-type: \"p5.48xlarge\"\n\n    # Optional: Launch type (on-demand or spot)\n    orca.research/launch-type: \"spot\"\n\n    # Optional: Max spot price ($/hour)\n    orca.research/max-spot-price: \"35.00\"\n\n    # Optional: Custom AMI\n    orca.research/ami: \"ami-0123456789abcdef0\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n\n  containers:\n    - name: trainer\n      image: pytorch/pytorch:2.1.0-cuda12.1-cudnn8-runtime\n      resources:\n        limits:\n          nvidia.com/gpu: 8\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#kubernetes-connection","title":"Kubernetes Connection","text":"<p>ORCA supports three methods for connecting to Kubernetes:</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#1-in-cluster-configuration-production","title":"1. In-Cluster Configuration (Production)","text":"<p>When running as a pod in Kubernetes:</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: orca\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: orca-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"nodes\", \"pods\", \"pods/status\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"get\", \"create\", \"update\", \"patch\", \"delete\"]\n</code></pre> <p>ORCA automatically uses in-cluster config when <code>--kubeconfig</code> is not specified.</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#2-kubeconfig-file-development","title":"2. Kubeconfig File (Development)","text":"<p>For local development:</p> <pre><code>orca --kubeconfig ~/.kube/config --config config.yaml\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#3-default-kubeconfig","title":"3. Default Kubeconfig","text":"<p>If no <code>--kubeconfig</code> specified and not in-cluster, ORCA tries <code>~/.kube/config</code>.</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#node-heartbeat-lease","title":"Node Heartbeat &amp; Lease","text":"<p>ORCA maintains its node registration via Kubernetes leases:</p> <ul> <li>Lease Duration: 40 seconds</li> <li>Renew Interval: Automatic (handled by Virtual Kubelet)</li> <li>Namespace: Same as ORCA deployment (typically <code>kube-system</code>)</li> </ul> <p>If the lease expires (e.g., ORCA crashes), Kubernetes marks the node as <code>NotReady</code> and evicts pods.</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#node-status-reporting","title":"Node Status Reporting","text":"<p>ORCA reports node conditions to Kubernetes:</p> <pre><code>node.Status.Conditions = []corev1.NodeCondition{\n    {\n        Type:   corev1.NodeReady,\n        Status: corev1.ConditionTrue,\n        Reason: \"OrcaProviderReady\",\n    },\n    {\n        Type:   corev1.NodeMemoryPressure,\n        Status: corev1.ConditionFalse,\n    },\n    // ... other conditions\n}\n</code></pre> <p>Node Info: <pre><code>node.Status.NodeInfo = corev1.NodeSystemInfo{\n    Architecture:            \"amd64\",\n    OperatingSystem:         \"Linux\",\n    KubeletVersion:          \"v1.0.0-orca\",\n    ContainerRuntimeVersion: \"orca://1.0.0\",\n    OSImage:                 \"AWS EC2\",\n}\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#logging","title":"Logging","text":"<p>ORCA uses structured logging (zerolog) throughout:</p> <pre><code># JSON format (production)\n{\"level\":\"info\",\"time\":\"2025-10-18T18:00:00Z\",\"message\":\"Starting ORCA Virtual Kubelet node\",\"node_name\":\"orca-aws-node\"}\n\n# Console format (development)\n2025-10-18T18:00:00Z INF Starting ORCA Virtual Kubelet node node_name=orca-aws-node\n</code></pre> <p>Log Levels: - <code>debug</code>: Detailed debugging information (AWS API calls, pod events) - <code>info</code>: General operational information (node registered, pods created) - <code>warn</code>: Warning conditions (spot instance interruption, quota limits) - <code>error</code>: Error conditions (instance launch failed, AWS API errors)</p> <p>Configure via config.yaml: <pre><code>logging:\n  level: info     # debug, info, warn, error\n  format: json    # json, text\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#error-handling","title":"Error Handling","text":"<p>ORCA handles errors at multiple levels:</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#node-controller-errors","title":"Node Controller Errors","text":"<pre><code>// Startup errors (fatal - exit immediately)\nif err := controller.Run(ctx); err != nil {\n    logger.Fatal().Err(err).Msg(\"Controller error\")\n}\n\n// Runtime errors (logged, retry automatically)\nnode.WithNodeStatusUpdateErrorHandler(func(ctx context.Context, err error) error {\n    logger.Error().Err(err).Msg(\"Node status update failed\")\n    return err // Virtual Kubelet will retry\n})\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pod-creation-errors","title":"Pod Creation Errors","text":"<pre><code>// Instance launch failure\nif err := awsClient.CreateInstance(ctx, pod, instanceType); err != nil {\n    // Update pod status to Failed\n    pod.Status.Phase = corev1.PodFailed\n    pod.Status.Conditions = append(pod.Status.Conditions, corev1.PodCondition{\n        Type:    corev1.PodReady,\n        Status:  corev1.ConditionFalse,\n        Reason:  \"InstanceCreationFailed\",\n        Message: fmt.Sprintf(\"Failed to create EC2 instance: %v\", err),\n    })\n    return err\n}\n</code></pre> <p>Common errors: - <code>InsufficientInstanceCapacity</code>: No capacity available (especially for GPU instances) - <code>InstanceLimitExceeded</code>: AWS account limits reached - <code>UnauthorizedOperation</code>: IAM permissions issue - <code>InvalidParameterValue</code>: Configuration error (bad AMI, subnet, etc.)</p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#testing","title":"Testing","text":""},{"location":"VIRTUAL-KUBELET-INTEGRATION/#unit-tests","title":"Unit Tests","text":"<pre><code># Test Virtual Kubelet adapter\ngo test ./pkg/node/... -v\n\n# Test full integration\ngo test ./... -v\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#manual-testing","title":"Manual Testing","text":"<pre><code># 1. Start ORCA with local kubeconfig\n./orca --kubeconfig ~/.kube/config --config config.yaml --log-level debug\n\n# 2. Verify node registered\nkubectl get nodes\n# Should show: orca-aws-node   Ready   &lt;none&gt;   10s   v1.0.0-orca\n\n# 3. Deploy test pod\nkubectl apply -f examples/gpu-training-pod.yaml\n\n# 4. Watch pod status\nkubectl get pods -w\n\n# 5. Check ORCA logs\n# Should see: CreatePod called, instance launching, pod running\n\n# 6. Verify EC2 instance created\naws ec2 describe-instances --filters \"Name=tag:ManagedBy,Values=ORCA\"\n\n# 7. Delete pod\nkubectl delete pod gpu-training\n\n# 8. Verify instance terminated\naws ec2 describe-instances --instance-ids &lt;instance-id&gt;\n</code></pre>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"VIRTUAL-KUBELET-INTEGRATION/#node-not-appearing","title":"Node Not Appearing","text":"<p>Symptoms: <code>kubectl get nodes</code> doesn't show orca-aws-node</p> <p>Causes: 1. ORCA not running 2. Kubeconfig not configured 3. RBAC permissions missing 4. Network connectivity issues</p> <p>Solution: <pre><code># Check ORCA logs\n./orca --kubeconfig ~/.kube/config --log-level debug\n\n# Verify RBAC\nkubectl auth can-i create nodes --as=system:serviceaccount:kube-system:orca\n\n# Test Kubernetes connectivity\nkubectl cluster-info\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pods-stuck-in-pending","title":"Pods Stuck in Pending","text":"<p>Symptoms: Pod scheduled to orca-aws-node but stays Pending</p> <p>Causes: 1. Missing instance-type annotation 2. AWS credentials not configured 3. EC2 instance launch failure 4. Subnet/security group misconfiguration</p> <p>Solution: <pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt;\n\n# Check ORCA logs\n# Look for: \"Failed to create instance\" errors\n\n# Verify AWS credentials\nAWS_PROFILE=orca aws sts get-caller-identity\n\n# Test EC2 instance launch manually\nAWS_PROFILE=orca aws ec2 run-instances \\\n  --image-id ami-xxx \\\n  --instance-type t3.micro \\\n  --subnet-id subnet-xxx \\\n  --security-group-ids sg-xxx\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#pod-stuck-in-unknown-state","title":"Pod Stuck in Unknown State","text":"<p>Symptoms: Pod shows \"Unknown\" or \"NodeLost\" status</p> <p>Causes: 1. ORCA crashed or killed 2. Node lease expired 3. Kubernetes API connectivity lost</p> <p>Solution: <pre><code># Check if ORCA is running\nps aux | grep orca\n\n# Check node lease\nkubectl get lease -n kube-system orca-aws-node\n\n# Restart ORCA\n./orca --kubeconfig ~/.kube/config --config config.yaml\n</code></pre></p>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#security-considerations","title":"Security Considerations","text":"<ol> <li>RBAC: ORCA requires permissions to create/update nodes, pods, and leases</li> <li>AWS Credentials: Use IRSA (IAM Roles for Service Accounts) in production</li> <li>Network Policy: Ensure ORCA can reach Kubernetes API server</li> <li>Pod Security: ORCA runs as non-root user (UID 65532) in container</li> </ol>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#performance","title":"Performance","text":"<ul> <li>Node Registration: ~1-2 seconds</li> <li>Pod Creation: ~60-90 seconds (EC2 instance boot time)</li> <li>Pod Status Sync: Every 10 seconds (Virtual Kubelet default)</li> <li>Node Heartbeat: Every 40 seconds (lease renewal)</li> </ul>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#limitations","title":"Limitations","text":"<ol> <li>Container Runtime: Pods run as full EC2 instances, not containers</li> <li>Cannot use Docker/containerd features</li> <li>No shared node resources</li> <li> <p>Higher overhead than container pods</p> </li> <li> <p>Exec/Logs: Not yet implemented</p> </li> <li><code>kubectl logs</code> returns \"not implemented\"</li> <li><code>kubectl exec</code> returns \"not implemented\"</li> <li> <p>Future: Will use CloudWatch Logs and SSM Session Manager</p> </li> <li> <p>Volume Mounts: Not yet implemented</p> </li> <li>EmptyDir, HostPath not supported</li> <li> <p>Future: Will support EBS volumes and EFS</p> </li> <li> <p>Networking: Simplified model</p> </li> <li>Each pod gets its own EC2 instance with public/private IP</li> <li>No pod-to-pod networking within node</li> <li>No CNI plugin integration</li> </ol>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#future-enhancements","title":"Future Enhancements","text":"<ul> <li> CloudWatch Logs integration for container logs</li> <li> SSM Session Manager for kubectl exec</li> <li> EBS volume support</li> <li> EFS volume support</li> <li> Multi-container pod support (multiple processes on single instance)</li> <li> Init container support</li> <li> Ephemeral container support</li> <li> Resource metrics via CloudWatch</li> <li> Custom metrics API integration</li> </ul>"},{"location":"VIRTUAL-KUBELET-INTEGRATION/#references","title":"References","text":"<ul> <li>Virtual Kubelet Documentation</li> <li>Virtual Kubelet GitHub</li> <li>Kubernetes Node Documentation</li> <li>Kubernetes Pod Lifecycle</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>Reference documentation for ORCA annotations, configuration, and metrics.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"api/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"api/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"api/annotations/","title":"Pod Annotations","text":"<p>Complete reference of ORCA pod annotations.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"api/annotations/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"api/annotations/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"api/configuration/","title":"Configuration Reference","text":"<p>Complete configuration options for ORCA.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"api/configuration/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"api/configuration/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"api/metrics/","title":"Metrics Reference","text":"<p>Prometheus metrics exposed by ORCA.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"api/metrics/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"api/metrics/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>ORCA's architecture and design principles.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"architecture/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"architecture/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/aws-integration/","title":"AWS Integration","text":"<p>How ORCA integrates with AWS EC2 and other services.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"architecture/aws-integration/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"architecture/aws-integration/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/design-decisions/","title":"Design Decisions","text":"<p>Key architectural decisions and trade-offs.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"architecture/design-decisions/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"architecture/design-decisions/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/instance-selection/","title":"Instance Selection Architecture","text":"<p>How ORCA selects EC2 instances (explicit, template, auto).</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"architecture/instance-selection/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"architecture/instance-selection/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>High-level overview of how ORCA works.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"architecture/overview/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"architecture/overview/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/pod-lifecycle/","title":"Pod Lifecycle","text":"<p>How ORCA manages pod lifecycle from creation to termination.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"architecture/pod-lifecycle/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"architecture/pod-lifecycle/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"architecture/virtual-kubelet/","title":"Virtual Kubelet Integration","text":"<p>This document describes ORCA's Virtual Kubelet integration, which enables ORCA to register as a Kubernetes node and handle pod lifecycle events.</p>"},{"location":"architecture/virtual-kubelet/#overview","title":"Overview","text":"<p>ORCA uses the Virtual Kubelet framework to present itself as a node in a Kubernetes cluster. When pods are scheduled to the ORCA node, they are executed as EC2 instances on AWS rather than as containers on a physical node.</p>"},{"location":"architecture/virtual-kubelet/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Kubernetes Control Plane                \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u2502\n\u2502 \u2502  Scheduler  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502          \u2502\n\u2502                               \u25bc          \u2502\n\u2502                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502                        \u2502  API Server  \u2502 \u2502\n\u2502                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502\n                                \u2502 Watch Pods\n                                \u2502 Update Status\n                                \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   ORCA Virtual Node   \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 Node Controller   \u2502 \u2502\n                    \u2502 \u2502 - Register Node   \u2502 \u2502\n                    \u2502 \u2502 - Watch Pods      \u2502 \u2502\n                    \u2502 \u2502 - Update Status   \u2502 \u2502\n                    \u2502 \u2502 - Manage Lease    \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2502          \u2502            \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 VK Adapter        \u2502 \u2502\n                    \u2502 \u2502 - CreatePod       \u2502 \u2502\n                    \u2502 \u2502 - DeletePod       \u2502 \u2502\n                    \u2502 \u2502 - GetPodStatus    \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2502          \u2502            \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 ORCA Provider     \u2502 \u2502\n                    \u2502 \u2502 - Instance Mgmt   \u2502 \u2502\n                    \u2502 \u2502 - AWS Client      \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u2502 EC2 API\n                               \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502   AWS EC2             \u2502\n                    \u2502 \u250c\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2510 \u2502\n                    \u2502 \u2502 i1 \u2502 \u2502 i2 \u2502 \u2502 i3 \u2502 \u2502\n                    \u2502 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2518 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/virtual-kubelet/#components","title":"Components","text":""},{"location":"architecture/virtual-kubelet/#pkgnodecontrollergo","title":"pkg/node/controller.go","text":"<p>The <code>Controller</code> manages the Virtual Kubelet node lifecycle:</p> <ul> <li>Initialization: Creates Kubernetes client, ORCA provider, and Virtual Kubelet components</li> <li>Node Registration: Registers the virtual node with the Kubernetes API server</li> <li>Lease Management: Maintains node heartbeat via Kubernetes lease mechanism (40s intervals)</li> <li>Graceful Shutdown: Handles SIGTERM/SIGINT with proper cleanup</li> </ul> <p>Key Methods: <pre><code>// NewController creates a new node controller\nfunc NewController(cfg *config.Config, kubeconfigPath, namespace, version string, logger zerolog.Logger) (*Controller, error)\n\n// Run starts the Virtual Kubelet node controller\nfunc (c *Controller) Run(ctx context.Context) error\n\n// Shutdown gracefully shuts down the controller\nfunc (c *Controller) Shutdown(ctx context.Context) error\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#pkgnodeadaptergo","title":"pkg/node/adapter.go","text":"<p>The <code>VirtualKubeletAdapter</code> implements the Virtual Kubelet <code>PodLifecycleHandler</code> interface, bridging between Virtual Kubelet and the ORCA provider:</p> <p>Pod Lifecycle Methods: - <code>CreatePod</code>: Called when Kubernetes schedules a pod to this node - <code>UpdatePod</code>: Called when pod spec is updated - <code>DeletePod</code>: Called when pod is deleted - <code>GetPod</code>: Retrieves pod by namespace/name - <code>GetPods</code>: Lists all pods on this node - <code>GetPodStatus</code>: Gets current pod status</p> <p>Exec/Logs Methods: - <code>GetContainerLogs</code>: Retrieves container logs (TODO: implement via CloudWatch) - <code>RunInContainer</code>: Executes commands in container (TODO: implement via SSM)</p> <p>Node Methods: - <code>ConfigureNode</code>: Sets node capacity, labels, taints - <code>NotifyNodeStatus</code>: Callback for node status updates - <code>Ping</code>: Health check for provider responsiveness</p>"},{"location":"architecture/virtual-kubelet/#pod-lifecycle-flow","title":"Pod Lifecycle Flow","text":""},{"location":"architecture/virtual-kubelet/#1-pod-creation","title":"1. Pod Creation","text":"<pre><code>User submits pod \u2192 Scheduler assigns to orca-aws-node \u2192 \nCreatePod called \u2192 Instance selector chooses type \u2192\nEC2 instance launched \u2192 Pod status updated to Running\n</code></pre> <p>Code Flow: <pre><code>// 1. Virtual Kubelet calls CreatePod\nadapter.CreatePod(ctx, pod)\n  \u2193\n// 2. ORCA provider handles creation\nprovider.CreatePod(ctx, pod)\n  \u2193\n// 3. Select instance type from annotations\nselector.Select(pod) // Returns \"p5.48xlarge\"\n  \u2193\n// 4. Launch EC2 instance\nawsClient.CreateInstance(ctx, pod, instanceType)\n  \u2193\n// 5. Tag instance with pod metadata\nbuildInstanceTags(pod, instanceType)\n  \u2193\n// 6. Wait for instance running state\nwaiter.Wait(ctx, instanceID, 5*time.Minute)\n  \u2193\n// 7. Update pod status\npod.Status.Phase = corev1.PodRunning\npod.Status.HostIP = instance.PublicIP\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#2-pod-monitoring","title":"2. Pod Monitoring","text":"<p>ORCA continuously syncs pod status with EC2 instance state:</p> <pre><code>// Virtual Kubelet periodically calls GetPodStatus\nstatus := provider.GetPodStatus(ctx, namespace, name)\n  \u2193\n// Query EC2 instance state\ninstance := awsClient.GetInstanceByPod(ctx, namespace, name)\n  \u2193\n// Map EC2 state to Pod phase\nswitch instance.State {\ncase \"running\":  \u2192 corev1.PodRunning\ncase \"pending\":  \u2192 corev1.PodPending\ncase \"stopped\":  \u2192 corev1.PodFailed\n}\n</code></pre>"},{"location":"architecture/virtual-kubelet/#3-pod-deletion","title":"3. Pod Deletion","text":"<pre><code>kubectl delete pod \u2192 DeletePod called \u2192\nFind EC2 instance by tags \u2192 Terminate instance \u2192\nPod removed from tracking\n</code></pre> <p>Code Flow: <pre><code>adapter.DeletePod(ctx, pod)\n  \u2193\nprovider.DeletePod(ctx, pod)\n  \u2193\n// Find instance by pod tags\ninstance := awsClient.GetInstanceByPod(ctx, pod.Namespace, pod.Name)\n  \u2193\n// Terminate instance\nawsClient.TerminateInstance(ctx, instance.ID)\n  \u2193\n// Remove from internal tracking\ndelete(provider.pods, pod.UID)\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#node-configuration","title":"Node Configuration","text":"<p>The virtual node is configured via <code>config.yaml</code>:</p> <pre><code>node:\n  name: orca-aws-node\n\n  labels:\n    orca.research/provider: \"aws\"\n    orca.research/region: \"us-west-2\"\n    type: virtual-kubelet\n\n  taints:\n    - key: orca.research/burst-node\n      value: \"true\"\n      effect: NoSchedule\n\n  operatingSystem: Linux\n\n  # Aggregate capacity (upper bounds)\n  cpu: \"1000\"      # 1000 vCPUs\n  memory: \"4Ti\"    # 4 TiB\n  pods: \"1000\"     # Max 1000 pods\n  gpu: \"100\"       # Max 100 GPUs\n</code></pre> <p>Node Labels: - <code>orca.research/provider: aws</code> - Identifies ORCA nodes - <code>orca.research/region: us-west-2</code> - AWS region - <code>type: virtual-kubelet</code> - Standard Virtual Kubelet label</p> <p>Node Taints: - <code>orca.research/burst-node=true:NoSchedule</code> - Prevents regular pods from scheduling   - Pods must explicitly tolerate this taint to burst to AWS</p>"},{"location":"architecture/virtual-kubelet/#pod-annotations","title":"Pod Annotations","text":"<p>Pods control their EC2 instance configuration via annotations:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: gpu-training\n  annotations:\n    # Required: Explicit instance type selection\n    orca.research/instance-type: \"p5.48xlarge\"\n\n    # Optional: Launch type (on-demand or spot)\n    orca.research/launch-type: \"spot\"\n\n    # Optional: Max spot price ($/hour)\n    orca.research/max-spot-price: \"35.00\"\n\n    # Optional: Custom AMI\n    orca.research/ami: \"ami-0123456789abcdef0\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n\n  containers:\n    - name: trainer\n      image: pytorch/pytorch:2.1.0-cuda12.1-cudnn8-runtime\n      resources:\n        limits:\n          nvidia.com/gpu: 8\n</code></pre>"},{"location":"architecture/virtual-kubelet/#kubernetes-connection","title":"Kubernetes Connection","text":"<p>ORCA supports three methods for connecting to Kubernetes:</p>"},{"location":"architecture/virtual-kubelet/#1-in-cluster-configuration-production","title":"1. In-Cluster Configuration (Production)","text":"<p>When running as a pod in Kubernetes:</p> <pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: orca\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: orca-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"nodes\", \"pods\", \"pods/status\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"get\", \"create\", \"update\", \"patch\", \"delete\"]\n</code></pre> <p>ORCA automatically uses in-cluster config when <code>--kubeconfig</code> is not specified.</p>"},{"location":"architecture/virtual-kubelet/#2-kubeconfig-file-development","title":"2. Kubeconfig File (Development)","text":"<p>For local development:</p> <pre><code>orca --kubeconfig ~/.kube/config --config config.yaml\n</code></pre>"},{"location":"architecture/virtual-kubelet/#3-default-kubeconfig","title":"3. Default Kubeconfig","text":"<p>If no <code>--kubeconfig</code> specified and not in-cluster, ORCA tries <code>~/.kube/config</code>.</p>"},{"location":"architecture/virtual-kubelet/#node-heartbeat-lease","title":"Node Heartbeat &amp; Lease","text":"<p>ORCA maintains its node registration via Kubernetes leases:</p> <ul> <li>Lease Duration: 40 seconds</li> <li>Renew Interval: Automatic (handled by Virtual Kubelet)</li> <li>Namespace: Same as ORCA deployment (typically <code>kube-system</code>)</li> </ul> <p>If the lease expires (e.g., ORCA crashes), Kubernetes marks the node as <code>NotReady</code> and evicts pods.</p>"},{"location":"architecture/virtual-kubelet/#node-status-reporting","title":"Node Status Reporting","text":"<p>ORCA reports node conditions to Kubernetes:</p> <pre><code>node.Status.Conditions = []corev1.NodeCondition{\n    {\n        Type:   corev1.NodeReady,\n        Status: corev1.ConditionTrue,\n        Reason: \"OrcaProviderReady\",\n    },\n    {\n        Type:   corev1.NodeMemoryPressure,\n        Status: corev1.ConditionFalse,\n    },\n    // ... other conditions\n}\n</code></pre> <p>Node Info: <pre><code>node.Status.NodeInfo = corev1.NodeSystemInfo{\n    Architecture:            \"amd64\",\n    OperatingSystem:         \"Linux\",\n    KubeletVersion:          \"v1.0.0-orca\",\n    ContainerRuntimeVersion: \"orca://1.0.0\",\n    OSImage:                 \"AWS EC2\",\n}\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#logging","title":"Logging","text":"<p>ORCA uses structured logging (zerolog) throughout:</p> <pre><code># JSON format (production)\n{\"level\":\"info\",\"time\":\"2025-10-18T18:00:00Z\",\"message\":\"Starting ORCA Virtual Kubelet node\",\"node_name\":\"orca-aws-node\"}\n\n# Console format (development)\n2025-10-18T18:00:00Z INF Starting ORCA Virtual Kubelet node node_name=orca-aws-node\n</code></pre> <p>Log Levels: - <code>debug</code>: Detailed debugging information (AWS API calls, pod events) - <code>info</code>: General operational information (node registered, pods created) - <code>warn</code>: Warning conditions (spot instance interruption, quota limits) - <code>error</code>: Error conditions (instance launch failed, AWS API errors)</p> <p>Configure via config.yaml: <pre><code>logging:\n  level: info     # debug, info, warn, error\n  format: json    # json, text\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#error-handling","title":"Error Handling","text":"<p>ORCA handles errors at multiple levels:</p>"},{"location":"architecture/virtual-kubelet/#node-controller-errors","title":"Node Controller Errors","text":"<pre><code>// Startup errors (fatal - exit immediately)\nif err := controller.Run(ctx); err != nil {\n    logger.Fatal().Err(err).Msg(\"Controller error\")\n}\n\n// Runtime errors (logged, retry automatically)\nnode.WithNodeStatusUpdateErrorHandler(func(ctx context.Context, err error) error {\n    logger.Error().Err(err).Msg(\"Node status update failed\")\n    return err // Virtual Kubelet will retry\n})\n</code></pre>"},{"location":"architecture/virtual-kubelet/#pod-creation-errors","title":"Pod Creation Errors","text":"<pre><code>// Instance launch failure\nif err := awsClient.CreateInstance(ctx, pod, instanceType); err != nil {\n    // Update pod status to Failed\n    pod.Status.Phase = corev1.PodFailed\n    pod.Status.Conditions = append(pod.Status.Conditions, corev1.PodCondition{\n        Type:    corev1.PodReady,\n        Status:  corev1.ConditionFalse,\n        Reason:  \"InstanceCreationFailed\",\n        Message: fmt.Sprintf(\"Failed to create EC2 instance: %v\", err),\n    })\n    return err\n}\n</code></pre> <p>Common errors: - <code>InsufficientInstanceCapacity</code>: No capacity available (especially for GPU instances) - <code>InstanceLimitExceeded</code>: AWS account limits reached - <code>UnauthorizedOperation</code>: IAM permissions issue - <code>InvalidParameterValue</code>: Configuration error (bad AMI, subnet, etc.)</p>"},{"location":"architecture/virtual-kubelet/#testing","title":"Testing","text":""},{"location":"architecture/virtual-kubelet/#unit-tests","title":"Unit Tests","text":"<pre><code># Test Virtual Kubelet adapter\ngo test ./pkg/node/... -v\n\n# Test full integration\ngo test ./... -v\n</code></pre>"},{"location":"architecture/virtual-kubelet/#manual-testing","title":"Manual Testing","text":"<pre><code># 1. Start ORCA with local kubeconfig\n./orca --kubeconfig ~/.kube/config --config config.yaml --log-level debug\n\n# 2. Verify node registered\nkubectl get nodes\n# Should show: orca-aws-node   Ready   &lt;none&gt;   10s   v1.0.0-orca\n\n# 3. Deploy test pod\nkubectl apply -f examples/gpu-training-pod.yaml\n\n# 4. Watch pod status\nkubectl get pods -w\n\n# 5. Check ORCA logs\n# Should see: CreatePod called, instance launching, pod running\n\n# 6. Verify EC2 instance created\naws ec2 describe-instances --filters \"Name=tag:ManagedBy,Values=ORCA\"\n\n# 7. Delete pod\nkubectl delete pod gpu-training\n\n# 8. Verify instance terminated\naws ec2 describe-instances --instance-ids &lt;instance-id&gt;\n</code></pre>"},{"location":"architecture/virtual-kubelet/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/virtual-kubelet/#node-not-appearing","title":"Node Not Appearing","text":"<p>Symptoms: <code>kubectl get nodes</code> doesn't show orca-aws-node</p> <p>Causes: 1. ORCA not running 2. Kubeconfig not configured 3. RBAC permissions missing 4. Network connectivity issues</p> <p>Solution: <pre><code># Check ORCA logs\n./orca --kubeconfig ~/.kube/config --log-level debug\n\n# Verify RBAC\nkubectl auth can-i create nodes --as=system:serviceaccount:kube-system:orca\n\n# Test Kubernetes connectivity\nkubectl cluster-info\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#pods-stuck-in-pending","title":"Pods Stuck in Pending","text":"<p>Symptoms: Pod scheduled to orca-aws-node but stays Pending</p> <p>Causes: 1. Missing instance-type annotation 2. AWS credentials not configured 3. EC2 instance launch failure 4. Subnet/security group misconfiguration</p> <p>Solution: <pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt;\n\n# Check ORCA logs\n# Look for: \"Failed to create instance\" errors\n\n# Verify AWS credentials\nAWS_PROFILE=orca aws sts get-caller-identity\n\n# Test EC2 instance launch manually\nAWS_PROFILE=orca aws ec2 run-instances \\\n  --image-id ami-xxx \\\n  --instance-type t3.micro \\\n  --subnet-id subnet-xxx \\\n  --security-group-ids sg-xxx\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#pod-stuck-in-unknown-state","title":"Pod Stuck in Unknown State","text":"<p>Symptoms: Pod shows \"Unknown\" or \"NodeLost\" status</p> <p>Causes: 1. ORCA crashed or killed 2. Node lease expired 3. Kubernetes API connectivity lost</p> <p>Solution: <pre><code># Check if ORCA is running\nps aux | grep orca\n\n# Check node lease\nkubectl get lease -n kube-system orca-aws-node\n\n# Restart ORCA\n./orca --kubeconfig ~/.kube/config --config config.yaml\n</code></pre></p>"},{"location":"architecture/virtual-kubelet/#security-considerations","title":"Security Considerations","text":"<ol> <li>RBAC: ORCA requires permissions to create/update nodes, pods, and leases</li> <li>AWS Credentials: Use IRSA (IAM Roles for Service Accounts) in production</li> <li>Network Policy: Ensure ORCA can reach Kubernetes API server</li> <li>Pod Security: ORCA runs as non-root user (UID 65532) in container</li> </ol>"},{"location":"architecture/virtual-kubelet/#performance","title":"Performance","text":"<ul> <li>Node Registration: ~1-2 seconds</li> <li>Pod Creation: ~60-90 seconds (EC2 instance boot time)</li> <li>Pod Status Sync: Every 10 seconds (Virtual Kubelet default)</li> <li>Node Heartbeat: Every 40 seconds (lease renewal)</li> </ul>"},{"location":"architecture/virtual-kubelet/#limitations","title":"Limitations","text":"<ol> <li>Container Runtime: Pods run as full EC2 instances, not containers</li> <li>Cannot use Docker/containerd features</li> <li>No shared node resources</li> <li> <p>Higher overhead than container pods</p> </li> <li> <p>Exec/Logs: Not yet implemented</p> </li> <li><code>kubectl logs</code> returns \"not implemented\"</li> <li><code>kubectl exec</code> returns \"not implemented\"</li> <li> <p>Future: Will use CloudWatch Logs and SSM Session Manager</p> </li> <li> <p>Volume Mounts: Not yet implemented</p> </li> <li>EmptyDir, HostPath not supported</li> <li> <p>Future: Will support EBS volumes and EFS</p> </li> <li> <p>Networking: Simplified model</p> </li> <li>Each pod gets its own EC2 instance with public/private IP</li> <li>No pod-to-pod networking within node</li> <li>No CNI plugin integration</li> </ol>"},{"location":"architecture/virtual-kubelet/#future-enhancements","title":"Future Enhancements","text":"<ul> <li> CloudWatch Logs integration for container logs</li> <li> SSM Session Manager for kubectl exec</li> <li> EBS volume support</li> <li> EFS volume support</li> <li> Multi-container pod support (multiple processes on single instance)</li> <li> Init container support</li> <li> Ephemeral container support</li> <li> Resource metrics via CloudWatch</li> <li> Custom metrics API integration</li> </ul>"},{"location":"architecture/virtual-kubelet/#references","title":"References","text":"<ul> <li>Virtual Kubelet Documentation</li> <li>Virtual Kubelet GitHub</li> <li>Kubernetes Node Documentation</li> <li>Kubernetes Pod Lifecycle</li> </ul>"},{"location":"community/","title":"Community","text":"<p>Join the ORCA community.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"community/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"community/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"community/license/","title":"License","text":"<p>ORCA's Apache 2.0 license.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"community/license/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"community/license/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"community/roadmap/","title":"Roadmap","text":"<p>ORCA's development roadmap and future plans.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"community/roadmap/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"community/roadmap/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"community/support/","title":"Support","text":"<p>How to get help with ORCA.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"community/support/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"community/support/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"development/","title":"Development Guide","text":"<p>Guide for contributing to ORCA development.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"development/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"development/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"development/building/","title":"Building ORCA","text":"<p>How to build ORCA from source.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"development/building/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"development/building/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"development/code-style/","title":"Code Style","text":"<p>Coding standards and style guide for ORCA.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"development/code-style/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"development/code-style/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"development/contributing/","title":"Contributing","text":"<p>How to contribute to ORCA.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"development/contributing/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"development/contributing/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"development/localstack/","title":"LocalStack Testing Guide","text":"<p>This guide explains how to use LocalStack for local development and testing of ORCA without incurring AWS costs.</p>"},{"location":"development/localstack/#overview","title":"Overview","text":"<p>LocalStack is a fully functional local AWS cloud stack that emulates AWS services on your local machine. This allows you to:</p> <ul> <li>Develop and test AWS integrations without AWS costs</li> <li>Test faster (no internet latency)</li> <li>Test in isolation (no conflicts with production resources)</li> <li>Run integration tests in CI/CD pipelines</li> </ul>"},{"location":"development/localstack/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>AWS CLI installed (for awslocal commands)</li> <li>Python 3 and pip3 (for awslocal wrapper)</li> </ul>"},{"location":"development/localstack/#installing-awslocal","title":"Installing awslocal","text":"<p>The <code>awslocal</code> CLI is a wrapper around the AWS CLI that automatically configures it to use LocalStack:</p> <pre><code>pip3 install awscli-local\n</code></pre> <p>Alternatively, you can use the regular AWS CLI with LocalStack by setting environment variables:</p> <pre><code>export AWS_ACCESS_KEY_ID=test\nexport AWS_SECRET_ACCESS_KEY=test\nexport AWS_DEFAULT_REGION=us-west-2\nexport AWS_ENDPOINT_URL=http://localhost:4566\n</code></pre>"},{"location":"development/localstack/#quick-start","title":"Quick Start","text":""},{"location":"development/localstack/#1-start-localstack","title":"1. Start LocalStack","text":"<pre><code>make localstack-start\n</code></pre> <p>This will: - Start LocalStack in a Docker container - Expose the LocalStack gateway on port 4566 - Automatically run initialization scripts to create test resources - Store data in <code>/tmp/localstack</code> for persistence</p>"},{"location":"development/localstack/#2-check-initialization-status","title":"2. Check Initialization Status","text":"<pre><code># View LocalStack logs\nmake localstack-logs\n\n# Check resource IDs\nmake localstack-status\n</code></pre> <p>The initialization script creates: - VPC with DNS support - Internet Gateway - Public subnet in us-west-2a - Route table with internet access - Security group with SSH access - Test AMI for launching instances</p>"},{"location":"development/localstack/#3-verify-localstack-is-ready","title":"3. Verify LocalStack is Ready","text":"<pre><code>./scripts/wait-for-localstack.sh\n</code></pre>"},{"location":"development/localstack/#4-run-tests","title":"4. Run Tests","text":"<pre><code># Run integration tests\nmake test-integration\n\n# Or run all tests\nmake test\n</code></pre>"},{"location":"development/localstack/#5-run-orca-locally","title":"5. Run ORCA Locally","text":"<pre><code>make run-local\n</code></pre> <p>This starts ORCA with the LocalStack configuration (<code>config.localstack.yaml</code>).</p>"},{"location":"development/localstack/#6-stop-localstack","title":"6. Stop LocalStack","text":"<pre><code>make localstack-stop\n</code></pre>"},{"location":"development/localstack/#configuration","title":"Configuration","text":""},{"location":"development/localstack/#localstack-configuration","title":"LocalStack Configuration","text":"<p>The LocalStack environment is configured in <code>docker-compose.localstack.yml</code>:</p> <ul> <li>Services: EC2, IAM, STS, CloudWatch, CloudWatch Logs</li> <li>Endpoint: http://localhost:4566</li> <li>Persistence: Enabled (data survives container restarts)</li> <li>VM Manager: Docker (for EC2 instances)</li> </ul>"},{"location":"development/localstack/#orca-configuration","title":"ORCA Configuration","text":"<p>ORCA uses <code>config.localstack.yaml</code> for LocalStack testing:</p> <pre><code>aws:\n  region: us-west-2\n  localStackEndpoint: http://localhost:4566\n  credentials:\n    accessKeyID: test\n    secretAccessKey: test\n  # ... other settings\n</code></pre>"},{"location":"development/localstack/#working-with-localstack","title":"Working with LocalStack","text":""},{"location":"development/localstack/#querying-resources","title":"Querying Resources","text":"<pre><code># List EC2 instances\nawslocal ec2 describe-instances --region us-west-2\n\n# List VPCs\nawslocal ec2 describe-vpcs --region us-west-2\n\n# List security groups\nawslocal ec2 describe-security-groups --region us-west-2\n\n# List subnets\nawslocal ec2 describe-subnets --region us-west-2\n</code></pre>"},{"location":"development/localstack/#launching-test-instances","title":"Launching Test Instances","text":"<pre><code># Get resource IDs from initialization\nsource /tmp/localstack-orca-resources.env\n\n# Launch an instance\nawslocal ec2 run-instances \\\n  --image-id $LOCALSTACK_AMI_ID \\\n  --instance-type t3.medium \\\n  --subnet-id $LOCALSTACK_SUBNET_ID \\\n  --security-group-ids $LOCALSTACK_SG_ID \\\n  --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=test-instance}]'\n</code></pre>"},{"location":"development/localstack/#viewing-logs","title":"Viewing Logs","text":"<pre><code># Follow all LocalStack logs\nmake localstack-logs\n\n# View specific service logs\ndocker exec orca-localstack cat /var/log/localstack/ec2.log\n</code></pre>"},{"location":"development/localstack/#opening-a-shell-in-localstack","title":"Opening a Shell in LocalStack","text":"<pre><code>make localstack-shell\n</code></pre>"},{"location":"development/localstack/#testing-workflow","title":"Testing Workflow","text":""},{"location":"development/localstack/#unit-tests","title":"Unit Tests","text":"<p>Unit tests don't require LocalStack and use mocks:</p> <pre><code>make test\n</code></pre>"},{"location":"development/localstack/#integration-tests","title":"Integration Tests","text":"<p>Integration tests connect to LocalStack and test real AWS SDK interactions:</p> <pre><code># Start LocalStack\nmake localstack-start\n\n# Wait for it to be ready\n./scripts/wait-for-localstack.sh\n\n# Run integration tests\nmake test-integration\n\n# Stop LocalStack when done\nmake localstack-stop\n</code></pre>"},{"location":"development/localstack/#testing-orca-end-to-end","title":"Testing ORCA End-to-End","text":"<pre><code># 1. Start LocalStack\nmake localstack-start\n\n# 2. Build ORCA\nmake build\n\n# 3. Run ORCA with LocalStack config\nmake run-local\n\n# 4. In another terminal, deploy a test pod\nkubectl apply -f examples/test-pod.yaml\n\n# 5. Check ORCA logs to see instance creation\n# 6. Verify instance in LocalStack\nawslocal ec2 describe-instances\n\n# 7. Stop ORCA (Ctrl+C)\n# 8. Stop LocalStack\nmake localstack-stop\n</code></pre>"},{"location":"development/localstack/#makefile-targets","title":"Makefile Targets","text":"Target Description <code>make localstack-start</code> Start LocalStack container <code>make localstack-stop</code> Stop LocalStack container <code>make localstack-restart</code> Restart LocalStack <code>make localstack-logs</code> Follow LocalStack logs <code>make localstack-status</code> Show created resource IDs <code>make localstack-shell</code> Open bash in LocalStack container <code>make test-integration</code> Run integration tests <code>make run-local</code> Run ORCA with LocalStack config"},{"location":"development/localstack/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/localstack/#localstack-wont-start","title":"LocalStack Won't Start","text":"<pre><code># Check if port 4566 is already in use\nlsof -i :4566\n\n# Check Docker status\ndocker ps -a | grep localstack\n\n# View container logs\ndocker logs orca-localstack\n\n# Remove and restart\nmake localstack-stop\ndocker rm -f orca-localstack\nmake localstack-start\n</code></pre>"},{"location":"development/localstack/#resources-not-initialized","title":"Resources Not Initialized","text":"<pre><code># Check initialization logs\nmake localstack-logs | grep -A 20 \"Initializing LocalStack\"\n\n# Resource IDs are saved here\ncat /tmp/localstack-orca-resources.env\n\n# Re-run initialization manually\ndocker exec orca-localstack /docker-entrypoint-initaws.d/01-init-ec2.sh\n</code></pre>"},{"location":"development/localstack/#tests-fail-with-connection-errors","title":"Tests Fail with Connection Errors","text":"<pre><code># Verify LocalStack is running\ndocker ps | grep localstack\n\n# Check LocalStack health\ncurl http://localhost:4566/_localstack/health\n\n# Verify EC2 service is available\nawslocal ec2 describe-regions --region us-west-2\n\n# Wait for LocalStack to be fully ready\n./scripts/wait-for-localstack.sh\n</code></pre>"},{"location":"development/localstack/#ec2-instances-dont-start","title":"EC2 Instances Don't Start","text":"<p>LocalStack uses Docker-in-Docker for EC2 instances. Ensure:</p> <pre><code># Docker socket is mounted (in docker-compose.localstack.yml)\nvolumes:\n  - \"/var/run/docker.sock:/var/run/docker.sock\"\n\n# Check LocalStack EC2 logs\ndocker exec orca-localstack cat /var/log/localstack/ec2.log\n</code></pre> <p>Note: LocalStack's EC2 emulation has limitations compared to real AWS: - Instance types are simulated (no real resource limits) - Networking is simplified - Some advanced EC2 features may not work</p>"},{"location":"development/localstack/#clear-all-localstack-data","title":"Clear All LocalStack Data","text":"<pre><code># Stop LocalStack\nmake localstack-stop\n\n# Clear persistent data\nrm -rf /tmp/localstack/*\n\n# Clear resource IDs\nrm -f /tmp/localstack-orca-resources.env\n\n# Restart fresh\nmake localstack-start\n</code></pre>"},{"location":"development/localstack/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"development/localstack/#github-actions-example","title":"GitHub Actions Example","text":"<pre><code>name: Integration Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.23'\n\n      - name: Start LocalStack\n        run: make localstack-start\n\n      - name: Wait for LocalStack\n        run: ./scripts/wait-for-localstack.sh\n\n      - name: Run Integration Tests\n        run: make test-integration\n\n      - name: Stop LocalStack\n        if: always()\n        run: make localstack-stop\n</code></pre>"},{"location":"development/localstack/#differences-from-real-aws","title":"Differences from Real AWS","text":"<p>Be aware of these differences when using LocalStack:</p>"},{"location":"development/localstack/#supported-features","title":"Supported Features","text":"<ul> <li>\u2705 EC2 instance launch/terminate</li> <li>\u2705 VPC, subnets, security groups</li> <li>\u2705 Tags and resource filtering</li> <li>\u2705 IAM roles and policies (basic)</li> <li>\u2705 CloudWatch Logs</li> <li>\u2705 Basic networking</li> </ul>"},{"location":"development/localstack/#limitedunsupported-features","title":"Limited/Unsupported Features","text":"<ul> <li>\u274c Spot instance pricing (spot launches work, but no real pricing)</li> <li>\u274c Capacity Reservations</li> <li>\u274c Real instance resource limits</li> <li>\u274c Some advanced networking features</li> <li>\u274c AWS-specific instance metadata</li> <li>\u274c Real GPU support</li> </ul>"},{"location":"development/localstack/#testing-strategy","title":"Testing Strategy","text":"<p>Use LocalStack for: - Unit-level integration tests: Testing AWS SDK calls - Logic validation: Testing tag application, instance selection - Error handling: Testing timeout, failure scenarios - Development: Fast iteration without AWS costs</p> <p>Use real AWS for: - End-to-end testing: Full production-like validation - Performance testing: Real instance performance - Advanced features: Capacity Reservations, Spot, GPUs - Pre-production validation: Final testing before release</p>"},{"location":"development/localstack/#best-practices","title":"Best Practices","text":"<ol> <li>Always wait for initialization: Use <code>./scripts/wait-for-localstack.sh</code></li> <li>Use resource IDs from env file: Source <code>/tmp/localstack-orca-resources.env</code></li> <li>Check logs frequently: LocalStack logs reveal issues quickly</li> <li>Clear data between test runs: Ensure clean state</li> <li>Don't rely on persistence for CI: Treat as ephemeral</li> <li>Test failures locally first: LocalStack makes debugging easier</li> <li>Validate against real AWS: LocalStack is a simulation</li> </ol>"},{"location":"development/localstack/#additional-resources","title":"Additional Resources","text":"<ul> <li>LocalStack Documentation</li> <li>LocalStack AWS Service Coverage</li> <li>awslocal CLI Reference</li> <li>LocalStack GitHub</li> </ul>"},{"location":"development/localstack/#getting-help","title":"Getting Help","text":"<p>If you encounter issues with LocalStack:</p> <ol> <li>Check LocalStack logs: <code>make localstack-logs</code></li> <li>Verify health: <code>curl http://localhost:4566/_localstack/health</code></li> <li>Check GitHub issues: https://github.com/localstack/localstack/issues</li> <li>LocalStack Community: https://discuss.localstack.cloud/</li> </ol>"},{"location":"development/setup/","title":"ORCA Development Guide","text":"<p>This guide covers local development setup, testing, and contribution workflows for ORCA.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":""},{"location":"development/setup/#required-tools","title":"Required Tools","text":"<ul> <li>Go 1.21+ - Install Go</li> <li>Docker - Install Docker</li> <li>kubectl - Install kubectl</li> <li>kind (optional) - For local Kubernetes testing</li> <li>golangci-lint - For code linting</li> </ul>"},{"location":"development/setup/#install-development-tools","title":"Install Development Tools","text":"<pre><code># Install golangci-lint\ngo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n\n# Install kind (Kubernetes in Docker) - optional\ngo install sigs.k8s.io/kind@latest\n</code></pre>"},{"location":"development/setup/#getting-started","title":"Getting Started","text":""},{"location":"development/setup/#1-clone-and-setup","title":"1. Clone and Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/scttfrdmn/orca.git\ncd orca\n\n# Download dependencies\nmake mod-download\n\n# Verify setup\nmake test\n</code></pre>"},{"location":"development/setup/#2-project-structure","title":"2. Project Structure","text":"<pre><code>orca/\n\u251c\u2500\u2500 cmd/orca/              # Main application entry point\n\u251c\u2500\u2500 pkg/                   # Public packages\n\u2502   \u251c\u2500\u2500 provider/          # Virtual Kubelet provider\n\u2502   \u251c\u2500\u2500 config/            # Configuration management\n\u2502   \u2514\u2500\u2500 instances/         # Instance selection logic\n\u251c\u2500\u2500 internal/              # Private packages\n\u2502   \u251c\u2500\u2500 aws/               # AWS SDK integration\n\u2502   \u251c\u2500\u2500 container/         # Container runtime\n\u2502   \u2514\u2500\u2500 metrics/           # Metrics and monitoring\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 deploy/                # Deployment manifests\n\u251c\u2500\u2500 examples/              # User examples\n\u2514\u2500\u2500 scripts/               # Utility scripts\n</code></pre>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#building","title":"Building","text":"<pre><code># Build the binary\nmake build\n\n# Output: bin/orca\n</code></pre>"},{"location":"development/setup/#testing","title":"Testing","text":"<pre><code># Run all tests\nmake test\n\n# Run tests with coverage\nmake coverage\n\n# Run tests for specific package\ngo test -v ./pkg/provider/...\n</code></pre>"},{"location":"development/setup/#code-quality","title":"Code Quality","text":"<pre><code># Format code\nmake fmt\n\n# Run linter\nmake lint\n\n# Run go vet\nmake vet\n\n# Run all quality checks\nmake fmt &amp;&amp; make lint &amp;&amp; make vet &amp;&amp; make test\n</code></pre>"},{"location":"development/setup/#running-locally","title":"Running Locally","text":"<pre><code># Create a config file\ncat &gt; config.yaml &lt;&lt;EOF\naws:\n  region: us-west-2\n  credentials:\n    accessKeyID: AKIA...\n    secretAccessKey: your-secret-key\n\nnode:\n  name: orca-dev-node\n  operatingSystem: Linux\n  cpu: 1000\n  memory: 1Ti\n  pods: 1000\n\nlogging:\n  level: debug\nEOF\n\n# Run ORCA\nmake run\n\n# Or run directly\n./bin/orca --config config.yaml --kubeconfig ~/.kube/config\n</code></pre>"},{"location":"development/setup/#testing-with-local-kubernetes","title":"Testing with Local Kubernetes","text":""},{"location":"development/setup/#setup-kind-cluster","title":"Setup kind Cluster","text":"<pre><code># Create a kind cluster\nkind create cluster --name orca-dev\n\n# Verify\nkubectl cluster-info --context kind-orca-dev\n</code></pre>"},{"location":"development/setup/#deploy-orca-to-kind","title":"Deploy ORCA to kind","text":"<pre><code># Build Docker image\nmake docker-build\n\n# Load image into kind\nkind load docker-image orca:latest --name orca-dev\n\n# Deploy\nkubectl apply -f deploy/kubernetes/\n\n# Verify\nkubectl get pods -n kube-system | grep orca\n</code></pre>"},{"location":"development/setup/#test-pod-creation","title":"Test Pod Creation","text":"<pre><code># Create a test pod\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-burst-pod\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n  - key: orca.research/burst-node\n    operator: Equal\n    value: \"true\"\n    effect: NoSchedule\n  containers:\n  - name: test\n    image: busybox\n    command: [\"sleep\", \"3600\"]\nEOF\n\n# Check pod status\nkubectl get pod test-burst-pod -o wide\n\n# Check ORCA logs\nkubectl logs -n kube-system -l app=orca\n</code></pre>"},{"location":"development/setup/#aws-configuration","title":"AWS Configuration","text":""},{"location":"development/setup/#using-aws-cli-credentials","title":"Using AWS CLI Credentials","text":"<pre><code># Configure AWS CLI\naws configure\n\n# ORCA will use ~/.aws/credentials automatically\n</code></pre>"},{"location":"development/setup/#using-iam-role-recommended-for-production","title":"Using IAM Role (Recommended for Production)","text":"<pre><code># config.yaml\naws:\n  region: us-west-2\n  # No credentials needed - uses IAM role\n</code></pre>"},{"location":"development/setup/#required-iam-permissions","title":"Required IAM Permissions","text":"<pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:RunInstances\",\n        \"ec2:TerminateInstances\",\n        \"ec2:DescribeInstances\",\n        \"ec2:DescribeInstanceTypes\",\n        \"ec2:CreateTags\",\n        \"ec2:DescribeTags\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre>"},{"location":"development/setup/#debugging","title":"Debugging","text":""},{"location":"development/setup/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Via config file\ncat &gt; config.yaml &lt;&lt;EOF\nlogging:\n  level: debug\nEOF\n\n# Via command line\n./bin/orca --log-level=debug\n</code></pre>"},{"location":"development/setup/#common-issues","title":"Common Issues","text":""},{"location":"development/setup/#issue-cannot-connect-to-kubernetes-cluster","title":"Issue: Cannot connect to Kubernetes cluster","text":"<pre><code># Verify kubeconfig\nkubectl cluster-info\n\n# Specify kubeconfig explicitly\n./bin/orca --kubeconfig ~/.kube/config\n</code></pre>"},{"location":"development/setup/#issue-aws-credentials-not-found","title":"Issue: AWS credentials not found","text":"<pre><code># Verify AWS credentials\naws sts get-caller-identity\n\n# Set credentials explicitly in config.yaml\n</code></pre>"},{"location":"development/setup/#issue-pod-stuck-in-pending-state","title":"Issue: Pod stuck in Pending state","text":"<pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt;\n\n# Check ORCA logs\nkubectl logs -n kube-system -l app=orca\n\n# Check AWS instance creation\naws ec2 describe-instances --filters \"Name=tag:orca.research/pod,Values=&lt;pod-name&gt;\"\n</code></pre>"},{"location":"development/setup/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"development/setup/#provider-interface","title":"Provider Interface","text":"<pre><code>// pkg/provider/provider.go\n\ntype Provider interface {\n    // Pod lifecycle\n    CreatePod(ctx context.Context, pod *corev1.Pod) error\n    UpdatePod(ctx context.Context, pod *corev1.Pod) error\n    DeletePod(ctx context.Context, pod *corev1.Pod) error\n    GetPod(ctx context.Context, namespace, name string) (*corev1.Pod, error)\n    GetPodStatus(ctx context.Context, namespace, name string) (*corev1.PodStatus, error)\n    GetPods(ctx context.Context) ([]*corev1.Pod, error)\n}\n</code></pre>"},{"location":"development/setup/#instance-selection","title":"Instance Selection","text":"<pre><code>// pkg/instances/selector.go\n\n// Selector chooses the appropriate EC2 instance type\ntype Selector interface {\n    // Select returns instance type for pod\n    Select(pod *corev1.Pod) (string, error)\n}\n\n// Three selection strategies\ntype ExplicitSelector struct{}  // Priority 1: User-specified\ntype TemplateSelector struct{}  // Priority 2: Named templates\ntype AutoSelector struct{}      // Priority 3: Auto-selection\n</code></pre>"},{"location":"development/setup/#configuration-management","title":"Configuration Management","text":"<pre><code>// pkg/config/config.go\n\ntype Config struct {\n    AWS       AWSConfig       `yaml:\"aws\"`\n    Node      NodeConfig      `yaml:\"node\"`\n    Instances InstancesConfig `yaml:\"instances\"`\n    Logging   LoggingConfig   `yaml:\"logging\"`\n}\n</code></pre>"},{"location":"development/setup/#writing-tests","title":"Writing Tests","text":""},{"location":"development/setup/#unit-test-example","title":"Unit Test Example","text":"<pre><code>// pkg/instances/selector_test.go\n\nfunc TestExplicitSelector(t *testing.T) {\n    tests := []struct {\n        name        string\n        annotations map[string]string\n        expected    string\n        expectError bool\n    }{\n        {\n            name: \"explicit p5.48xlarge\",\n            annotations: map[string]string{\n                \"orca.research/instance-type\": \"p5.48xlarge\",\n            },\n            expected:    \"p5.48xlarge\",\n            expectError: false,\n        },\n        {\n            name:        \"no annotation\",\n            annotations: map[string]string{},\n            expected:    \"\",\n            expectError: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            pod := &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: tt.annotations,\n                },\n            }\n\n            selector := NewExplicitSelector()\n            result, err := selector.Select(pod)\n\n            if tt.expectError &amp;&amp; err == nil {\n                t.Error(\"expected error, got nil\")\n            }\n            if !tt.expectError &amp;&amp; err != nil {\n                t.Errorf(\"unexpected error: %v\", err)\n            }\n            if result != tt.expected {\n                t.Errorf(\"expected %s, got %s\", tt.expected, result)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"development/setup/#integration-test-example","title":"Integration Test Example","text":"<pre><code>// internal/aws/client_test.go\n\n// +build integration\n\nfunc TestCreateInstance(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"skipping integration test\")\n    }\n\n    // Setup\n    client := NewClient(/* config */)\n    pod := createTestPod()\n\n    // Execute\n    err := client.CreateInstance(context.Background(), pod)\n    if err != nil {\n        t.Fatalf(\"failed to create instance: %v\", err)\n    }\n\n    // Verify\n    instances, err := client.DescribeInstances(context.Background(), pod)\n    if err != nil || len(instances) != 1 {\n        t.Errorf(\"expected 1 instance, got %d\", len(instances))\n    }\n\n    // Cleanup\n    defer client.TerminateInstance(context.Background(), instances[0].ID)\n}\n</code></pre>"},{"location":"development/setup/#performance-profiling","title":"Performance Profiling","text":""},{"location":"development/setup/#cpu-profiling","title":"CPU Profiling","text":"<pre><code># Build with profiling\ngo build -o bin/orca ./cmd/orca\n\n# Run with CPU profiling\n./bin/orca --cpuprofile=cpu.prof\n\n# Analyze profile\ngo tool pprof cpu.prof\n</code></pre>"},{"location":"development/setup/#memory-profiling","title":"Memory Profiling","text":"<pre><code># Run with memory profiling\n./bin/orca --memprofile=mem.prof\n\n# Analyze profile\ngo tool pprof mem.prof\n</code></pre>"},{"location":"development/setup/#release-process","title":"Release Process","text":""},{"location":"development/setup/#version-bump","title":"Version Bump","text":"<pre><code># Update VERSION file\necho \"0.2.0\" &gt; VERSION\n\n# Update CHANGELOG.md\n# Move [Unreleased] items to [0.2.0] section\n\n# Commit\ngit add VERSION CHANGELOG.md\ngit commit -m \"chore: bump version to 0.2.0\"\n\n# Tag\ngit tag -a v0.2.0 -m \"Release v0.2.0\"\ngit push origin v0.2.0\n</code></pre>"},{"location":"development/setup/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues - Report bugs or request features</li> <li>GitHub Discussions - Ask questions</li> <li>Research Partners - Contact NRP, SDSU teams</li> </ul>"},{"location":"development/setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>Virtual Kubelet Documentation</li> <li>AWS SDK for Go v2</li> <li>Kubernetes Client Go</li> <li>Effective Go</li> </ul>"},{"location":"development/testing/","title":"ORCA Testing Guide","text":"<p>This document describes ORCA's testing approach: pragmatic, functional, and value-driven. Every test serves a clear purpose - catching real bugs, preventing regressions, or improving development speed.</p>"},{"location":"development/testing/#testing-philosophy","title":"Testing Philosophy","text":"<p>No testing for testing's sake. Every test must provide: 1. Bug prevention - Catches real issues before production 2. Regression protection - Prevents broken code from merging 3. Development velocity - Makes refactoring safe and fast 4. Documentation - Shows how code should work</p> <p>If a test doesn't provide clear value, we don't write it.</p>"},{"location":"development/testing/#test-types","title":"Test Types","text":""},{"location":"development/testing/#1-lint-code-quality","title":"1. Lint (Code Quality)","text":"<p>Purpose: Catch common mistakes and enforce consistency When: Pre-commit, CI on every PR Value: Prevents bugs, ensures idiomatic Go code</p> <pre><code># Run linters\nmake lint\n\n# Auto-fix issues\ngolangci-lint run --fix\n</code></pre> <p>What we check: - \u2705 <code>go vet</code> - Suspicious constructs - \u2705 <code>staticcheck</code> - Go best practices - \u2705 <code>errcheck</code> - Unchecked errors - \u2705 <code>gosec</code> - Security issues - \u2705 <code>gofmt</code> - Code formatting - \u2705 <code>gocritic</code> - Style issues</p> <p>Example catches: <pre><code>// BAD: Uncaught error\nec2Client.TerminateInstance(instanceID)\n\n// GOOD: Error handling\nif err := ec2Client.TerminateInstance(instanceID); err != nil {\n    return fmt.Errorf(\"failed to terminate: %w\", err)\n}\n</code></pre></p>"},{"location":"development/testing/#2-unit-tests-fast-feedback","title":"2. Unit Tests (Fast Feedback)","text":"<p>Purpose: Test individual functions in isolation When: TDD during development, CI on every PR Value: Fast feedback, safe refactoring, clear API contracts</p> <pre><code># Run unit tests\nmake test\n\n# Run specific package\ngo test -v ./pkg/instances/...\n\n# Run specific test\ngo test -v ./pkg/instances -run TestExplicitSelector\n</code></pre> <p>What to unit test: - \u2705 Instance selection logic - Core functionality - \u2705 Configuration parsing - Prevents config bugs - \u2705 Pod annotation extraction - Common bug source - \u2705 Budget calculations - Critical for cost control - \u2705 Tag generation - Required for pod tracking - \u2705 Error handling - Ensures graceful failures</p> <p>What NOT to unit test: - \u274c Trivial getters/setters - \u274c Third-party library behavior - \u274c Code that's just wiring</p>"},{"location":"development/testing/#example-instance-selector","title":"Example: Instance Selector","text":"<pre><code>// pkg/instances/selector_test.go\n\nfunc TestExplicitSelector(t *testing.T) {\n    tests := []struct {\n        name        string\n        pod         *corev1.Pod\n        expected    string\n        expectError bool\n    }{\n        {\n            name: \"explicit p5.48xlarge annotation\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{\n                        AnnotationInstanceType: \"p5.48xlarge\",\n                    },\n                },\n            },\n            expected:    \"p5.48xlarge\",\n            expectError: false,\n        },\n        {\n            name: \"missing annotation returns error\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{},\n                },\n            },\n            expected:    \"\",\n            expectError: true,\n        },\n        {\n            name: \"invalid instance type returns error\",\n            pod: &amp;corev1.Pod{\n                ObjectMeta: metav1.ObjectMeta{\n                    Annotations: map[string]string{\n                        AnnotationInstanceType: \"invalid-type\",\n                    },\n                },\n            },\n            expected:    \"\",\n            expectError: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            selector := NewExplicitSelector()\n            result, err := selector.Select(tt.pod)\n\n            if tt.expectError &amp;&amp; err == nil {\n                t.Error(\"expected error but got nil\")\n            }\n            if !tt.expectError &amp;&amp; err != nil {\n                t.Errorf(\"unexpected error: %v\", err)\n            }\n            if result != tt.expected {\n                t.Errorf(\"expected %s, got %s\", tt.expected, result)\n            }\n        })\n    }\n}\n</code></pre> <p>Value: This test catches 90% of selector bugs in milliseconds.</p>"},{"location":"development/testing/#example-budget-enforcement","title":"Example: Budget Enforcement","text":"<pre><code>// pkg/budget/enforcer_test.go\n\nfunc TestBudgetEnforcement(t *testing.T) {\n    tests := []struct {\n        name           string\n        dailyBudget    float64\n        currentSpend   float64\n        instanceCost   float64\n        shouldAllow    bool\n    }{\n        {\n            name:         \"under budget allows instance\",\n            dailyBudget:  50.00,\n            currentSpend: 10.00,\n            instanceCost: 5.00,\n            shouldAllow:  true,\n        },\n        {\n            name:         \"at budget limit denies instance\",\n            dailyBudget:  50.00,\n            currentSpend: 48.00,\n            instanceCost: 5.00,\n            shouldAllow:  false,\n        },\n        {\n            name:         \"zero budget denies all\",\n            dailyBudget:  0.00,\n            currentSpend: 0.00,\n            instanceCost: 0.01,\n            shouldAllow:  false,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            enforcer := &amp;BudgetEnforcer{\n                DailyLimit:   tt.dailyBudget,\n                CurrentSpend: tt.currentSpend,\n            }\n\n            allowed := enforcer.CanLaunchInstance(tt.instanceCost)\n\n            if allowed != tt.shouldAllow {\n                t.Errorf(\"expected %v, got %v\", tt.shouldAllow, allowed)\n            }\n        })\n    }\n}\n</code></pre> <p>Value: Prevents cost overruns - critical for production.</p>"},{"location":"development/testing/#3-integration-tests-real-interactions","title":"3. Integration Tests (Real Interactions)","text":"<p>Purpose: Test components working together When: After unit tests pass, CI on merge to main Value: Catches integration bugs, validates AWS interactions</p> <pre><code># Run integration tests (requires AWS credentials)\nmake integration-test\n\n# Or run with specific tag\ngo test -v -tags=integration ./...\n</code></pre> <p>What to integration test: - \u2705 AWS SDK calls - Ensure EC2 APIs work - \u2705 Kubernetes API - Verify pod operations - \u2705 Instance lifecycle - Create \u2192 Run \u2192 Terminate - \u2705 Configuration loading - Test full config chain - \u2705 Error scenarios - Network failures, AWS throttling</p>"},{"location":"development/testing/#example-aws-client-integration","title":"Example: AWS Client Integration","text":"<pre><code>// internal/aws/client_test.go\n// +build integration\n\nfunc TestEC2CreateInstance(t *testing.T) {\n    if testing.Short() {\n        t.Skip(\"skipping integration test\")\n    }\n\n    // Setup\n    cfg := loadTestConfig(t)\n    client := NewClient(cfg)\n\n    pod := &amp;corev1.Pod{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      \"test-pod\",\n            Namespace: \"default\",\n            Annotations: map[string]string{\n                AnnotationInstanceType: \"t3.small\",\n            },\n        },\n        Spec: corev1.PodSpec{\n            Containers: []corev1.Container{\n                {\n                    Name:  \"test\",\n                    Image: \"busybox\",\n                },\n            },\n        },\n    }\n\n    // Execute\n    ctx := context.Background()\n    instanceID, err := client.CreateInstance(ctx, pod)\n    if err != nil {\n        t.Fatalf(\"failed to create instance: %v\", err)\n    }\n\n    // Verify\n    instance, err := client.DescribeInstance(ctx, instanceID)\n    if err != nil {\n        t.Fatalf(\"failed to describe instance: %v\", err)\n    }\n    if instance.State != \"running\" &amp;&amp; instance.State != \"pending\" {\n        t.Errorf(\"expected running/pending, got %s\", instance.State)\n    }\n\n    // Cleanup\n    defer func() {\n        if err := client.TerminateInstance(ctx, instanceID); err != nil {\n            t.Errorf(\"cleanup failed: %v\", err)\n        }\n    }()\n}\n</code></pre> <p>Value: Catches AWS API changes, permission issues, network problems.</p> <p>Cost control for integration tests: <pre><code>// Use smallest instance types\nconst testInstanceType = \"t3.nano\"  // $0.0052/hour\n\n// Set short timeouts\nctx, cancel := context.WithTimeout(context.Background(), 2*time.Minute)\ndefer cancel()\n\n// Always cleanup\ndefer cleanupTestResources(t, client)\n</code></pre></p>"},{"location":"development/testing/#4-smoke-tests-quick-sanity-check","title":"4. Smoke Tests (Quick Sanity Check)","text":"<p>Purpose: Verify basic functionality works end-to-end When: After deployment, before releasing Value: Catches deployment issues, validates basic workflows</p> <pre><code># Run smoke tests against deployed ORCA\nmake smoke-test CLUSTER=kind-orca-dev\n\n# Or manually\n./scripts/smoke-test.sh\n</code></pre> <p>What smoke tests check: - \u2705 ORCA pod is running - \u2705 Virtual node is registered - \u2705 Simple pod can be created - \u2705 Instance launches successfully - \u2705 Pod reaches Running state - \u2705 Pod can be deleted - \u2705 Instance terminates</p>"},{"location":"development/testing/#example-smoke-test-script","title":"Example: Smoke Test Script","text":"<pre><code>#!/bin/bash\n# scripts/smoke-test.sh\n\nset -e\n\necho \"\ud83d\udd0d Running ORCA smoke tests...\"\n\n# 1. Check ORCA is running\necho \"Checking ORCA pod...\"\nkubectl get pods -n kube-system -l app=orca | grep Running\n\n# 2. Check virtual node exists\necho \"Checking virtual node...\"\nkubectl get node -l orca.research/provider=aws\n\n# 3. Deploy test pod\necho \"Deploying test pod...\"\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: smoke-test-pod\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  containers:\n  - name: test\n    image: busybox\n    command: [\"sh\", \"-c\", \"echo 'Smoke test passed' &amp;&amp; sleep 60\"]\nEOF\n\n# 4. Wait for pod to run\necho \"Waiting for pod to run...\"\nkubectl wait --for=condition=Ready pod/smoke-test-pod --timeout=5m\n\n# 5. Verify instance exists\necho \"Checking EC2 instance...\"\naws ec2 describe-instances \\\n  --filters \"Name=tag:orca.research/pod,Values=default/smoke-test-pod\" \\\n  --query 'Reservations[0].Instances[0].State.Name' \\\n  --output text | grep running\n\n# 6. Cleanup\necho \"Cleaning up...\"\nkubectl delete pod smoke-test-pod --wait=true\n\n# 7. Verify instance terminated\necho \"Verifying cleanup...\"\nsleep 30\naws ec2 describe-instances \\\n  --filters \"Name=tag:orca.research/pod,Values=default/smoke-test-pod\" \\\n  --query 'Reservations[0].Instances[0].State.Name' \\\n  --output text | grep -E 'terminated|shutting-down'\n\necho \"\u2705 Smoke tests passed!\"\n</code></pre> <p>Value: 5-minute test catches 80% of deployment issues.</p>"},{"location":"development/testing/#5-regression-tests-prevent-known-bugs","title":"5. Regression Tests (Prevent Known Bugs)","text":"<p>Purpose: Ensure fixed bugs stay fixed When: CI on every PR, before release Value: Prevents bugs from reappearing</p> <p>Process: 1. Bug is reported 2. Write failing test that reproduces bug 3. Fix bug 4. Test now passes 5. Test prevents regression forever</p>"},{"location":"development/testing/#example-regression-for-issue-42","title":"Example: Regression for Issue #42","text":"<pre><code>// pkg/provider/provider_test.go\n\n// TestIssue42_PodWithNoAnnotations tests the fix for:\n// https://github.com/scttfrdmn/orca/issues/42\n// Bug: ORCA crashed when pod had no annotations\nfunc TestIssue42_PodWithNoAnnotations(t *testing.T) {\n    provider := NewProvider(testConfig())\n\n    pod := &amp;corev1.Pod{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:        \"no-annotations\",\n            Namespace:   \"default\",\n            Annotations: nil,  // This was causing panic\n        },\n        Spec: corev1.PodSpec{\n            Containers: []corev1.Container{{Name: \"test\", Image: \"busybox\"}},\n        },\n    }\n\n    // Should not panic\n    err := provider.CreatePod(context.Background(), pod)\n\n    // Should return error, not panic\n    if err == nil {\n        t.Error(\"expected error for missing annotations, got nil\")\n    }\n    if !strings.Contains(err.Error(), \"missing required annotation\") {\n        t.Errorf(\"expected helpful error message, got: %v\", err)\n    }\n}\n</code></pre> <p>Value: Bug #42 can never come back.</p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>We track coverage but don't worship it. 80%+ coverage is good. 100% is wasteful.</p> <pre><code># Generate coverage report\nmake coverage\n\n# View in browser\nopen coverage.html\n\n# Fail CI if coverage drops below 80%\ngo test -coverprofile=coverage.txt ./...\ngo tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//' | awk '$1 &lt; 80 {exit 1}'\n</code></pre> <p>Coverage priorities: 1. Critical paths: 100% (budget enforcement, instance selection) 2. Common paths: 80%+ (pod creation, deletion) 3. Error handling: 70%+ (various failure modes) 4. Happy paths: 60%+ (basic workflows)</p> <p>Don't cover: - Generated code - Third-party integrations (test with mocks) - Trivial code (simple getters)</p>"},{"location":"development/testing/#testing-tools","title":"Testing Tools","text":""},{"location":"development/testing/#mocking-aws-sdk","title":"Mocking AWS SDK","text":"<pre><code>// internal/aws/mock.go\n\ntype MockEC2Client struct {\n    CreateInstanceFunc    func(context.Context, *ec2.RunInstancesInput) (*ec2.RunInstancesOutput, error)\n    TerminateInstanceFunc func(context.Context, *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error)\n}\n\nfunc (m *MockEC2Client) RunInstances(ctx context.Context, input *ec2.RunInstancesInput, opts ...func(*ec2.Options)) (*ec2.RunInstancesOutput, error) {\n    if m.CreateInstanceFunc != nil {\n        return m.CreateInstanceFunc(ctx, input)\n    }\n    return &amp;ec2.RunInstancesOutput{\n        Instances: []types.Instance{\n            {InstanceId: aws.String(\"i-mock123\")},\n        },\n    }, nil\n}\n</code></pre>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":"<pre><code>// pkg/testing/fixtures.go\n\n// CreateTestPod creates a pod for testing\nfunc CreateTestPod(name, instanceType string) *corev1.Pod {\n    return &amp;corev1.Pod{\n        ObjectMeta: metav1.ObjectMeta{\n            Name:      name,\n            Namespace: \"default\",\n            Annotations: map[string]string{\n                AnnotationInstanceType: instanceType,\n            },\n        },\n        Spec: corev1.PodSpec{\n            Containers: []corev1.Container{\n                {Name: \"test\", Image: \"busybox\"},\n            },\n        },\n    }\n}\n</code></pre>"},{"location":"development/testing/#table-driven-tests","title":"Table-Driven Tests","text":"<pre><code>func TestInstanceSelection(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    *corev1.Pod\n        expected string\n        wantErr  bool\n    }{\n        // Test cases here\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test logic here\n        })\n    }\n}\n</code></pre>"},{"location":"development/testing/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"development/testing/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/test.yml\n\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n      - name: Lint\n        uses: golangci/golangci-lint-action@v4\n        with:\n          version: latest\n\n  unit-test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n      - name: Run unit tests\n        run: make test\n      - name: Upload coverage\n        uses: codecov/codecov-action@v4\n        with:\n          files: ./coverage.txt\n\n  integration-test:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n      - name: Configure AWS\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n      - name: Run integration tests\n        run: make integration-test\n\n  smoke-test:\n    runs-on: ubuntu-latest\n    needs: [unit-test]\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - uses: actions/checkout@v4\n      - name: Create kind cluster\n        uses: helm/kind-action@v1\n      - name: Build and deploy ORCA\n        run: |\n          make docker-build\n          kind load docker-image orca:latest\n          kubectl apply -f deploy/kubernetes/\n      - name: Run smoke tests\n        run: ./scripts/smoke-test.sh\n</code></pre>"},{"location":"development/testing/#test-organization","title":"Test Organization","text":"<pre><code>orca/\n\u251c\u2500\u2500 pkg/\n\u2502   \u251c\u2500\u2500 provider/\n\u2502   \u2502   \u251c\u2500\u2500 provider.go\n\u2502   \u2502   \u251c\u2500\u2500 provider_test.go      # Unit tests\n\u2502   \u2502   \u2514\u2500\u2500 provider_integration_test.go  # Integration tests\n\u2502   \u251c\u2500\u2500 instances/\n\u2502   \u2502   \u251c\u2500\u2500 selector.go\n\u2502   \u2502   \u2514\u2500\u2500 selector_test.go\n\u2502   \u2514\u2500\u2500 budget/\n\u2502       \u251c\u2500\u2500 enforcer.go\n\u2502       \u2514\u2500\u2500 enforcer_test.go\n\u251c\u2500\u2500 internal/\n\u2502   \u2514\u2500\u2500 aws/\n\u2502       \u251c\u2500\u2500 client.go\n\u2502       \u251c\u2500\u2500 client_test.go\n\u2502       \u251c\u2500\u2500 client_integration_test.go\n\u2502       \u2514\u2500\u2500 mock.go               # Mock implementations\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 smoke-test.sh             # Smoke tests\n\u2502   \u2514\u2500\u2500 regression-test.sh        # Regression suite\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 fixtures/                 # Test fixtures\n    \u2514\u2500\u2500 e2e/                      # End-to-end tests\n</code></pre>"},{"location":"development/testing/#testing-checklist","title":"Testing Checklist","text":"<p>Before merging a PR:</p> <ul> <li> <code>make lint</code> passes</li> <li> <code>make test</code> passes with &gt;80% coverage</li> <li> Integration tests pass (if touching AWS code)</li> <li> Smoke test passes (if changing core logic)</li> <li> Added regression test (if fixing bug)</li> <li> Updated test documentation (if adding new test patterns)</li> </ul> <p>Before releasing:</p> <ul> <li> All CI tests pass</li> <li> Smoke tests pass on kind</li> <li> Smoke tests pass on EKS (if available)</li> <li> Manual testing of new features</li> <li> Regression suite passes</li> <li> Performance tests pass (if applicable)</li> </ul>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":"<p>For features impacting performance:</p> <pre><code>func BenchmarkInstanceSelection(b *testing.B) {\n    selector := NewExplicitSelector()\n    pod := CreateTestPod(\"test\", \"p5.48xlarge\")\n\n    b.ResetTimer()\n    for i := 0; i &lt; b.N; i++ {\n        _, err := selector.Select(pod)\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n</code></pre> <p>Run with: <pre><code>go test -bench=. -benchmem ./pkg/instances/\n</code></pre></p>"},{"location":"development/testing/#summary","title":"Summary","text":"<p>Our testing approach:</p> <ol> <li>Lint: Catch mistakes early (seconds)</li> <li>Unit tests: Fast feedback (milliseconds)</li> <li>Integration tests: Validate AWS (minutes, limited runs)</li> <li>Smoke tests: Deployment validation (5 minutes)</li> <li>Regression tests: Keep bugs fixed (continuous)</li> </ol> <p>Every test provides clear value. No busywork. Focus on preventing real bugs and enabling safe refactoring.</p> <p>Test pyramid: <pre><code>        /\\\n       /  \\      E2E Tests (few, slow, expensive)\n      /    \\\n     /------\\    Integration Tests (some, moderate)\n    /        \\\n   /----------\\  Unit Tests (many, fast, cheap)\n  /------------\\\n /   Linting   \\ Static Analysis (everywhere, instant)\n/________________\\\n</code></pre></p> <p>Most value comes from the bottom. Write more unit tests, fewer integration tests, minimal E2E tests.</p>"},{"location":"getting-started/","title":"Getting Started with ORCA","text":"<p>Welcome to ORCA! This guide will help you get started with bursting Kubernetes workloads to AWS.</p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>ORCA (Orchestration for Research Cloud Access) is a Kubernetes Virtual Kubelet provider that extends your cluster's capacity to AWS EC2 instances.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Kubernetes cluster (v1.28+)</li> <li>AWS account with appropriate permissions</li> <li>kubectl configured to access your cluster</li> <li>Basic understanding of Kubernetes pods and nodes</li> </ul>"},{"location":"getting-started/#quick-links","title":"Quick Links","text":"<ul> <li>Quick Start Guide - Get ORCA running in 10 minutes</li> <li>Installation - Detailed installation instructions  </li> <li>Configuration - Configure ORCA for your environment</li> <li>First Pod - Deploy your first bursted workload</li> </ul>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":"<ol> <li>How to install and configure ORCA</li> <li>How to burst pods to AWS</li> <li>How to select EC2 instance types</li> <li>How to monitor and troubleshoot</li> </ol> <p>Let's get started!</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configure ORCA for your AWS environment and research workloads.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"getting-started/configuration/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"getting-started/configuration/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"getting-started/first-pod/","title":"Your First Bursted Pod","text":"<p>Deploy your first pod to AWS using ORCA.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"getting-started/first-pod/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"getting-started/first-pod/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Detailed instructions for installing ORCA in your Kubernetes cluster.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"getting-started/installation/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"getting-started/installation/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"getting-started/quick-start/","title":"ORCA Quick Start Guide","text":"<p>This guide will help you get ORCA up and running in your Kubernetes cluster.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes cluster (1.28+)</li> <li>AWS account with appropriate permissions</li> <li>kubectl configured to access your cluster</li> <li>Go 1.21+ (if building from source)</li> </ul>"},{"location":"getting-started/quick-start/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/quick-start/#1-build-orca","title":"1. Build ORCA","text":"<pre><code># Clone the repository\ngit clone https://github.com/scttfrdmn/orca.git\ncd orca\n\n# Build the binary\ngo build -o orca ./cmd/orca\n\n# Or build with version info\nVERSION=$(git describe --tags --always --dirty)\nGIT_COMMIT=$(git rev-parse HEAD)\nBUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)\n\ngo build \\\n  -ldflags=\"-X main.version=${VERSION} -X main.gitCommit=${GIT_COMMIT} -X main.buildDate=${BUILD_DATE}\" \\\n  -o orca \\\n  ./cmd/orca\n</code></pre>"},{"location":"getting-started/quick-start/#2-configure-aws-credentials","title":"2. Configure AWS Credentials","text":"<p>ORCA needs AWS credentials to create EC2 instances. Three options:</p> <p>Option A: AWS Profile (Development) <pre><code>export AWS_PROFILE=orca\n./orca --config config.yaml --kubeconfig ~/.kube/config\n</code></pre></p> <p>Option B: Environment Variables <pre><code>export AWS_ACCESS_KEY_ID=AKIA...\nexport AWS_SECRET_ACCESS_KEY=...\nexport AWS_REGION=us-west-2\n</code></pre></p> <p>Option C: IRSA (Production - Recommended) Create IAM role and service account (see deploy/README.md)</p>"},{"location":"getting-started/quick-start/#3-create-configuration-file","title":"3. Create Configuration File","text":"<p>Create <code>config.yaml</code>:</p> <pre><code>aws:\n  region: us-west-2\n  vpcID: vpc-xxxxx\n  subnetID: subnet-xxxxx\n  securityGroupIDs:\n    - sg-xxxxx\n  tags:\n    Environment: production\n    Project: orca\n\nnode:\n  name: orca-aws-node\n  labels:\n    orca.research/provider: \"aws\"\n    orca.research/region: \"us-west-2\"\n  taints:\n    - key: orca.research/burst-node\n      value: \"true\"\n      effect: NoSchedule\n  cpu: \"1000\"\n  memory: \"4Ti\"\n  pods: \"1000\"\n  gpu: \"100\"\n\ninstances:\n  selectionMode: explicit\n  defaultLaunchType: on-demand\n\nlogging:\n  level: info\n  format: json\n\nmetrics:\n  enabled: true\n  port: 8080\n  path: /metrics\n</code></pre>"},{"location":"getting-started/quick-start/#4-run-orca-locally-testing","title":"4. Run ORCA Locally (Testing)","text":"<pre><code># Start ORCA\n./orca \\\n  --config config.yaml \\\n  --kubeconfig ~/.kube/config \\\n  --namespace kube-system \\\n  --log-level debug\n\n# You should see:\n# {\"level\":\"info\",\"time\":\"...\",\"message\":\"Starting ORCA\",\"version\":\"...\"}\n# {\"level\":\"info\",\"message\":\"Starting HTTP server\",\"port\":8080}\n# {\"level\":\"info\",\"message\":\"Starting ORCA Virtual Kubelet node\"}\n# {\"level\":\"info\",\"message\":\"ORCA is running. Press Ctrl+C to stop.\",\"http_port\":8080}\n</code></pre>"},{"location":"getting-started/quick-start/#5-verify-node-registration","title":"5. Verify Node Registration","text":"<p>In another terminal:</p> <pre><code># Check that orca-aws-node appears\nkubectl get nodes\n\n# Should show:\n# NAME              STATUS   ROLES    AGE   VERSION\n# orca-aws-node     Ready    &lt;none&gt;   10s   v1.0.0-orca\n# ...\n\n# Check node details\nkubectl describe node orca-aws-node\n</code></pre>"},{"location":"getting-started/quick-start/#6-deploy-a-test-pod","title":"6. Deploy a Test Pod","text":"<p>Create <code>test-pod.yaml</code>:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: test-burst\n  annotations:\n    orca.research/instance-type: \"t3.small\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: test\n      image: nginx:latest\n      ports:\n        - containerPort: 80\n</code></pre> <p>Deploy and watch:</p> <pre><code># Deploy pod\nkubectl apply -f test-pod.yaml\n\n# Watch pod status\nkubectl get pods -w\n\n# You should see:\n# test-burst   0/1     Pending   0          1s\n# test-burst   0/1     Pending   0          5s\n# test-burst   0/1     Running   0          65s  # After EC2 instance starts\n</code></pre>"},{"location":"getting-started/quick-start/#7-verify-ec2-instance-created","title":"7. Verify EC2 Instance Created","text":"<pre><code># List ORCA-managed instances\naws ec2 describe-instances \\\n  --filters \"Name=tag:ManagedBy,Values=ORCA\" \\\n  --query 'Reservations[*].Instances[*].[InstanceId,InstanceType,State.Name,Tags[?Key==`Name`].Value|[0]]' \\\n  --output table\n\n# Should show:\n# |  i-0123456789abcdef  |  t3.small  |  running  |  orca-default-test-burst  |\n</code></pre>"},{"location":"getting-started/quick-start/#8-test-health-checks","title":"8. Test Health Checks","text":"<pre><code># Liveness check\ncurl http://localhost:8080/healthz\n# {\"status\":\"ok\",\"service\":\"orca\"}\n\n# Readiness check  \ncurl http://localhost:8080/readyz\n# {\"status\":\"ready\",\"service\":\"orca\"}\n\n# Prometheus metrics\ncurl http://localhost:8080/metrics\n# HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\n# go_goroutines 42\n# ...\n</code></pre>"},{"location":"getting-started/quick-start/#9-clean-up","title":"9. Clean Up","text":"<pre><code># Delete the test pod\nkubectl delete pod test-burst\n\n# The EC2 instance will be automatically terminated\n\n# Stop ORCA\n# Press Ctrl+C in the ORCA terminal\n\n# Verify instance terminated\naws ec2 describe-instances \\\n  --filters \"Name=tag:ManagedBy,Values=ORCA\" \\\n  --query 'Reservations[*].Instances[*].State.Name'\n</code></pre>"},{"location":"getting-started/quick-start/#production-deployment","title":"Production Deployment","text":"<p>For production deployment as a Kubernetes Deployment:</p>"},{"location":"getting-started/quick-start/#1-create-namespace","title":"1. Create Namespace","text":"<pre><code>kubectl create namespace orca-system\n</code></pre>"},{"location":"getting-started/quick-start/#2-create-rbac-resources","title":"2. Create RBAC Resources","text":"<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: orca\n  namespace: orca-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: orca-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"nodes\", \"nodes/status\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"pods/status\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n  - apiGroups: [\"coordination.k8s.io\"]\n    resources: [\"leases\"]\n    verbs: [\"get\", \"create\", \"update\", \"patch\", \"delete\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: orca-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: orca-role\nsubjects:\n  - kind: ServiceAccount\n    name: orca\n    namespace: orca-system\n</code></pre>"},{"location":"getting-started/quick-start/#3-create-configmap","title":"3. Create ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: orca-config\n  namespace: orca-system\ndata:\n  config.yaml: |\n    aws:\n      region: us-west-2\n      vpcID: vpc-xxxxx\n      subnetID: subnet-xxxxx\n      securityGroupIDs:\n        - sg-xxxxx\n      tags:\n        Environment: production\n        Project: orca\n    node:\n      name: orca-aws-node\n      # ... rest of config\n</code></pre>"},{"location":"getting-started/quick-start/#4-create-deployment","title":"4. Create Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orca\n  namespace: orca-system\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: orca\n  template:\n    metadata:\n      labels:\n        app: orca\n    spec:\n      serviceAccountName: orca\n      containers:\n        - name: orca\n          image: orca:latest  # Build and push your image\n          command:\n            - /orca\n          args:\n            - --config=/config/config.yaml\n            - --namespace=orca-system\n          volumeMounts:\n            - name: config\n              mountPath: /config\n          ports:\n            - name: http\n              containerPort: 8080\n          livenessProbe:\n            httpGet:\n              path: /healthz\n              port: 8080\n            initialDelaySeconds: 10\n            periodSeconds: 30\n          readinessProbe:\n            httpGet:\n              path: /readyz\n              port: 8080\n            initialDelaySeconds: 5\n            periodSeconds: 10\n          resources:\n            requests:\n              cpu: 100m\n              memory: 128Mi\n            limits:\n              cpu: 500m\n              memory: 512Mi\n      volumes:\n        - name: config\n          configMap:\n            name: orca-config\n</code></pre>"},{"location":"getting-started/quick-start/#5-deploy","title":"5. Deploy","text":"<pre><code>kubectl apply -f deploy/\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#node-not-appearing","title":"Node Not Appearing","text":"<pre><code># Check ORCA logs\nkubectl logs -n orca-system deployment/orca\n\n# Check RBAC permissions\nkubectl auth can-i create nodes --as=system:serviceaccount:orca-system:orca\n</code></pre>"},{"location":"getting-started/quick-start/#pods-stuck-in-pending","title":"Pods Stuck in Pending","text":"<pre><code># Check pod events\nkubectl describe pod &lt;pod-name&gt;\n\n# Check ORCA logs for instance creation errors\nkubectl logs -n orca-system deployment/orca | grep \"CreateInstance\"\n\n# Verify AWS credentials\nkubectl exec -n orca-system deployment/orca -- env | grep AWS\n</code></pre>"},{"location":"getting-started/quick-start/#ec2-instances-not-terminating","title":"EC2 Instances Not Terminating","text":"<pre><code># Check ORCA logs\nkubectl logs -n orca-system deployment/orca | grep \"DeletePod\"\n\n# Manually check instances\naws ec2 describe-instances --filters \"Name=tag:ManagedBy,Values=ORCA\"\n\n# Manually terminate if needed\naws ec2 terminate-instances --instance-ids i-xxxxx\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>GPU Training Example</li> <li>Spot Instance Example</li> <li>Architecture Documentation</li> <li>Virtual Kubelet Integration</li> <li>Instance Selection Guide</li> </ul>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: https://github.com/scttfrdmn/orca/issues</li> <li>Documentation: https://github.com/scttfrdmn/orca/tree/main/docs</li> </ul>"},{"location":"user-guide/","title":"User Guide","text":"<p>Comprehensive guide to using ORCA for research computing workloads.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"user-guide/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"user-guide/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"user-guide/capacity-reservations/","title":"AWS Capacity Reservations for ML Workloads","text":""},{"location":"user-guide/capacity-reservations/#critical-requirement-for-modern-gpus","title":"\u26a0\ufe0f Critical Requirement for Modern GPUs","text":"<p>IMPORTANT: AWS Capacity Reservations are not optional for modern NVIDIA GPU instances. They are effectively required to get access to recent GPU hardware (P5, P4d, P4de, G6e).</p> <p>Reality of AWS GPU Availability (October 2025): - P6.48xlarge (Blackwell B200): Latest generation, Capacity Reservations required - P5e.48xlarge (H200 141GB): Capacity Reservations required - P5.48xlarge (H100 80GB): Virtually impossible without Capacity Reservations - P4de.24xlarge (A100 80GB): Capacity Reservations required in most regions - P4d.24xlarge (A100 40GB): Extremely limited on-demand availability - G6e.48xlarge (L40S): Better availability but still constrained during peak - G6.48xlarge (L4): More available but still benefits from reservations</p> <p>Without Capacity Reservations: - <code>InsufficientInstanceCapacity</code> errors are the norm, not the exception - May wait hours/days for spot instances to become available - On-demand launches fail even when willing to pay full price - Cannot plan or schedule research workloads with confidence</p> <p>With Capacity Reservations: - Guaranteed access to reserved capacity - Launch instances immediately when needed - Can schedule and plan research timelines - Essential for any serious ML/AI research</p> <p>Conclusion: For ORCA to be viable for GPU-intensive research, Capacity Reservations support must be a top priority, not a \"nice to have\" feature.</p>"},{"location":"user-guide/capacity-reservations/#what-are-capacity-reservations","title":"What are Capacity Reservations?","text":""},{"location":"user-guide/capacity-reservations/#on-demand-capacity-reservations-odcrs","title":"On-Demand Capacity Reservations (ODCRs)","text":"<p>On-Demand Capacity Reservations let you reserve compute capacity for your EC2 instances in a specific Availability Zone for any duration. This ensures you have access to instances when you need them.</p> <p>Key Benefits: - Guaranteed Availability: Reserve P5, P4d, or other GPU instances in advance - No Commitment: Can be created/canceled anytime (billed when active) - Combine with Savings Plans: Use reserved capacity with spot pricing - Avoid \"InsufficientInstanceCapacity\": Never fail to launch due to capacity constraints</p>"},{"location":"user-guide/capacity-reservations/#capacity-blocks-for-ml","title":"Capacity Blocks for ML","text":"<p>Capacity Blocks for ML provide reserved GPU capacity for future, defined time periods (days or weeks in advance).</p> <p>Key Benefits: - Planned Workloads: Reserve P5.48xlarge months in advance for training - Cost Predictability: Fixed cost for entire reservation period - Guaranteed Access: Lock in capacity during high-demand periods - Bulk Reservations: Reserve multiple instances for distributed training</p>"},{"location":"user-guide/capacity-reservations/#use-cases","title":"Use Cases","text":""},{"location":"user-guide/capacity-reservations/#1-large-model-training","title":"1. Large Model Training","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: llm-training\n  annotations:\n    orca.research/instance-type: \"p5.48xlarge\"\n    orca.research/capacity-reservation-id: \"cr-0123456789abcdef0\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  # ... rest of spec\n</code></pre> <p>Scenario: Training a 70B parameter model over 2 weeks - Solution: Create ODCR for p5.48xlarge for 2 weeks - Benefit: Guaranteed access to 8x H100 GPUs, no interruptions - Cost: Pay for reservation + on-demand pricing</p>"},{"location":"user-guide/capacity-reservations/#2-scheduled-batch-jobs","title":"2. Scheduled Batch Jobs","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: batch-inference\n  annotations:\n    orca.research/instance-type: \"g5.xlarge\"\n    orca.research/capacity-reservation-preference: \"open\"\nspec:\n  # ... rest of spec\n</code></pre> <p>Scenario: Daily inference jobs that must complete by 8am - Solution: Create ODCR for daily 12am-8am window - Benefit: Jobs never fail due to capacity - Cost: Only pay for reservation hours (8 hours/day)</p>"},{"location":"user-guide/capacity-reservations/#3-multi-week-research-projects","title":"3. Multi-Week Research Projects","text":"<p>Scenario: Research team needs 16x P4d.24xlarge for 4-week project - Solution: Purchase Capacity Block 2 months in advance - Benefit: Lock in capacity, predictable costs, no capacity anxiety - Cost: Fixed upfront cost for entire 4-week period</p>"},{"location":"user-guide/capacity-reservations/#pricing-model","title":"Pricing Model","text":""},{"location":"user-guide/capacity-reservations/#odcr-pricing","title":"ODCR Pricing","text":"<pre><code>Total Cost = Reservation Fee + Instance Usage\n</code></pre> <ul> <li>Reservation Fee: Charged per hour reservation is active</li> <li>Instance Usage: Standard on-demand or spot pricing when running</li> <li>Cancellation: Can cancel anytime, stop paying reservation fee</li> </ul> <p>Example: P5.48xlarge (H100) ODCR - ODCR fee: ~\\(1-2/hour (varies by region) - On-demand: ~\\)98/hour when instance running - Total when running: ~\\(99-100/hour - Total when idle: ~\\)1-2/hour (reservation only)</p> <p>Example: P6.48xlarge (B200) ODCR (2025 pricing) - ODCR fee: ~\\(2-3/hour (varies by region) - On-demand: ~\\)115/hour when instance running (estimated) - Total when running: ~\\(117-118/hour - Total when idle: ~\\)2-3/hour (reservation only)</p>"},{"location":"user-guide/capacity-reservations/#capacity-blocks-pricing","title":"Capacity Blocks Pricing","text":"<pre><code>Total Cost = Fixed Block Cost (paid upfront)\n</code></pre> <ul> <li>Fixed Cost: Single payment for entire reservation period</li> <li>No Additional Charges: Instance usage included in block cost</li> <li>Commit to Duration: Cannot cancel once purchased</li> </ul> <p>Example: P5.48xlarge Capacity Block - 2-week block: ~\\(32,000-35,000 (typical) - Equivalent to: ~\\)95-100/hour over 336 hours - Advantage: Guaranteed capacity during high-demand periods</p>"},{"location":"user-guide/capacity-reservations/#implementation-plan-future","title":"Implementation Plan (Future)","text":""},{"location":"user-guide/capacity-reservations/#phase-1-odcr-support","title":"Phase 1: ODCR Support","text":"<pre><code>// internal/aws/capacity.go\ntype CapacityReservation struct {\n    ID               string\n    InstanceType     string\n    AvailabilityZone string\n    TotalInstances   int\n    AvailableInstances int\n    State            string\n}\n\n// Check for available capacity in reservations\nfunc (c *Client) GetAvailableCapacityReservations(\n    ctx context.Context,\n    instanceType string,\n) ([]*CapacityReservation, error)\n</code></pre>"},{"location":"user-guide/capacity-reservations/#phase-2-pod-annotations","title":"Phase 2: Pod Annotations","text":"<pre><code>annotations:\n  # Target specific reservation\n  orca.research/capacity-reservation-id: \"cr-0123456789abcdef0\"\n\n  # Prefer reservations but allow on-demand if none available\n  orca.research/capacity-reservation-preference: \"open\"\n\n  # Require reservation, fail if none available\n  orca.research/capacity-reservation-preference: \"targeted\"\n\n  # Use Capacity Block\n  orca.research/capacity-block-id: \"cb-0123456789abcdef0\"\n</code></pre>"},{"location":"user-guide/capacity-reservations/#phase-3-automatic-discovery","title":"Phase 3: Automatic Discovery","text":"<p>ORCA will automatically discover and match pods to available capacity reservations:</p> <ol> <li>Pod requests p5.48xlarge</li> <li>ORCA queries for available ODCRs/Capacity Blocks</li> <li>If match found, use reservation</li> <li>If no match, fall back to on-demand/spot</li> </ol>"},{"location":"user-guide/capacity-reservations/#phase-4-reservation-management","title":"Phase 4: Reservation Management","text":"<pre><code># CLI tool for managing reservations\norca-capacity list\norca-capacity create p5.48xlarge --count 4 --duration 7d\norca-capacity delete cr-0123456789abcdef0\norca-capacity stats  # Show utilization\n</code></pre>"},{"location":"user-guide/capacity-reservations/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/capacity-reservations/#1-use-odcrs-for-critical-workloads","title":"1. Use ODCRs for Critical Workloads","text":"<p>Reserve capacity for: - \u274c Short experiments (&lt; 1 hour) - use spot - \u2705 Long training runs (&gt; 8 hours) - use ODCR - \u2705 Production inference endpoints - use ODCR - \u2705 Time-sensitive research deadlines - use ODCR</p>"},{"location":"user-guide/capacity-reservations/#2-combine-with-spot-instances","title":"2. Combine with Spot Instances","text":"<pre><code>annotations:\n  orca.research/instance-type: \"p5.48xlarge\"\n  orca.research/capacity-reservation-id: \"cr-xxx\"\n  orca.research/launch-type: \"spot\"\n</code></pre> <p>Strategy: - Reserve capacity to guarantee availability - Use spot pricing for 70% cost savings - Best of both worlds: availability + cost optimization</p>"},{"location":"user-guide/capacity-reservations/#3-monitor-utilization","title":"3. Monitor Utilization","text":"<p>Track reservation usage: - High utilization (&gt;80%): Good ROI, consider more reservations - Low utilization (&lt;30%): Wasting money, cancel or reduce - Peak usage patterns: Adjust reservation schedule</p>"},{"location":"user-guide/capacity-reservations/#4-plan-ahead-for-capacity-blocks","title":"4. Plan Ahead for Capacity Blocks","text":"<p>Capacity Blocks sell out during peak periods: - Plan 2-3 months ahead for major training runs - Book early for popular instances (P5.48xlarge) - Consider multiple AZs if primary is sold out</p>"},{"location":"user-guide/capacity-reservations/#aws-cli-examples","title":"AWS CLI Examples","text":""},{"location":"user-guide/capacity-reservations/#create-on-demand-capacity-reservation","title":"Create On-Demand Capacity Reservation","text":"<pre><code># Create ODCR for 4x p5.48xlarge\naws ec2 create-capacity-reservation \\\n  --instance-type p5.48xlarge \\\n  --instance-platform Linux/UNIX \\\n  --availability-zone us-east-1a \\\n  --instance-count 4 \\\n  --instance-match-criteria targeted \\\n  --end-date-type unlimited\n\n# List reservations\naws ec2 describe-capacity-reservations\n\n# Modify reservation (increase count)\naws ec2 modify-capacity-reservation \\\n  --capacity-reservation-id cr-xxx \\\n  --instance-count 8\n\n# Cancel reservation\naws ec2 cancel-capacity-reservation \\\n  --capacity-reservation-id cr-xxx\n</code></pre>"},{"location":"user-guide/capacity-reservations/#purchase-capacity-block","title":"Purchase Capacity Block","text":"<pre><code># Find available capacity blocks\naws ec2 describe-capacity-block-offerings \\\n  --instance-type p5.48xlarge \\\n  --instance-count 4 \\\n  --capacity-duration 336  # hours (2 weeks)\n\n# Purchase capacity block\naws ec2 purchase-capacity-block \\\n  --capacity-block-offering-id cbo-xxx \\\n  --instance-platform Linux/UNIX\n</code></pre>"},{"location":"user-guide/capacity-reservations/#cost-optimization-strategies","title":"Cost Optimization Strategies","text":""},{"location":"user-guide/capacity-reservations/#strategy-1-time-based-reservations","title":"Strategy 1: Time-Based Reservations","text":"<p>Scenario: Training jobs run 8am-8pm weekdays</p> <pre><code># Automation: Create ODCR weekdays 8am, cancel 8pm\n# Cost savings: Only pay 12 hours/day * 5 days = 60 hours/week\n# vs 168 hours/week for always-on reservation\n</code></pre>"},{"location":"user-guide/capacity-reservations/#strategy-2-burst-reserved","title":"Strategy 2: Burst + Reserved","text":"<p>Normal load: Use spot instances Peak demand: Fail over to reserved capacity</p> <pre><code>annotations:\n  orca.research/launch-type: \"spot\"\n  orca.research/capacity-reservation-preference: \"open\"\n</code></pre>"},{"location":"user-guide/capacity-reservations/#strategy-3-team-sharing","title":"Strategy 3: Team Sharing","text":"<p>Multiple teams sharing reservation pool: - Create organizational ODCR pool - Teams request from pool via ORCA - Track usage per team with budget-namespace annotation - Charge back based on utilization</p>"},{"location":"user-guide/capacity-reservations/#future-integration-with-orca","title":"Future: Integration with ORCA","text":""},{"location":"user-guide/capacity-reservations/#configuration","title":"Configuration","text":"<pre><code># config.yaml\naws:\n  capacityReservations:\n    enabled: true\n    autoDiscovery: true\n    preferenceDefault: \"open\"\n\n    # Specific reservations for workload types\n    reservations:\n      - id: \"cr-training-p5\"\n        instanceType: \"p5.48xlarge\"\n        workloadType: \"training\"\n\n      - id: \"cr-inference-g5\"\n        instanceType: \"g5.xlarge\"\n        workloadType: \"inference\"\n</code></pre>"},{"location":"user-guide/capacity-reservations/#metrics","title":"Metrics","text":"<p>ORCA will expose capacity reservation metrics:</p> <pre><code>orca_capacity_reservation_total\norca_capacity_reservation_available\norca_capacity_reservation_utilization_percent\norca_capacity_reservation_cost_per_hour\n</code></pre>"},{"location":"user-guide/capacity-reservations/#references","title":"References","text":"<ul> <li>AWS On-Demand Capacity Reservations</li> <li>AWS Capacity Blocks for ML</li> <li>Capacity Reservations Pricing</li> </ul>"},{"location":"user-guide/capacity-reservations/#timeline","title":"Timeline","text":"<p>REVISED PRIORITY: Given that Capacity Reservations are effectively required for modern GPU instances, this feature timeline is accelerated:</p> <ul> <li>Phase 1 (v0.1.0 - Current): Manual ODCR management outside ORCA</li> <li>Users create reservations manually</li> <li>Document workarounds and best practices</li> <li> <p>ORCA can launch into existing reservations if configured</p> </li> <li> <p>Phase 2 (v0.2.0 - CRITICAL PRIORITY): Basic ODCR support</p> </li> <li>Target specific capacity reservations via annotation</li> <li><code>orca.research/capacity-reservation-id</code> support</li> <li>Fail gracefully with clear error if reservation unavailable</li> <li> <p>Document ODCR setup for P5/P4d instances</p> </li> <li> <p>Phase 3 (v0.3.0 - HIGH PRIORITY): Automatic ODCR discovery</p> </li> <li>Query available capacity reservations for instance type</li> <li>Automatic matching and selection</li> <li>Prefer reserved capacity over on-demand</li> <li> <p>Metrics and monitoring for reservation utilization</p> </li> <li> <p>Phase 4 (v0.4.0): Capacity Blocks support</p> </li> <li>Support Capacity Block targeting</li> <li>Plan ahead for scheduled workloads</li> <li> <p>Integration with workload scheduling</p> </li> <li> <p>Phase 5 (v0.5.0): Advanced capacity management</p> </li> <li>ORCA capacity management CLI</li> <li>Automated reservation lifecycle</li> <li>Team-based reservation pools</li> <li>Cost allocation and chargeback</li> </ul> <p>Status: \ud83d\udea8 CRITICAL FEATURE - Phase 2 (v0.2.0) is essential for GPU workloads</p> <p>Current Workaround: Users must manually create ODCRs and configure ORCA to use them. Without this, modern GPU instances (P5, P4d) are effectively unavailable.</p>"},{"location":"user-guide/cost-management/","title":"Cost Management","text":"<p>Managing costs and budgets for bursted workloads.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"user-guide/cost-management/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"user-guide/cost-management/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"user-guide/custom-silicon/","title":"AWS Custom Silicon and FPGA Support","text":"<p>ORCA supports AWS custom silicon accelerators and FPGAs for specialized AI/ML and compute workloads.</p>"},{"location":"user-guide/custom-silicon/#aws-trainium-ai-training","title":"AWS Trainium (AI Training)","text":"<p>AWS Trainium is purpose-built for deep learning training, offering cost-effective training for large language models and other AI workloads.</p>"},{"location":"user-guide/custom-silicon/#trainium-instance-types-2025","title":"Trainium Instance Types (2025)","text":"<ul> <li>Trn2.48xlarge: 16x Trainium2 chips, 192 vCPUs, 2TB RAM</li> <li>~50% cost reduction vs P5 for training</li> <li>Optimized for LLM training</li> <li> <p>NeuronLink interconnect for distributed training</p> </li> <li> <p>Trn2.24xlarge: 8x Trainium2 chips, 96 vCPUs, 1TB RAM</p> </li> <li> <p>Trn1.32xlarge: 16x Trainium1 chips, 128 vCPUs, 512GB RAM (previous generation)</p> </li> <li> <p>Trn1n.32xlarge: 16x Trainium1 chips with enhanced networking</p> </li> </ul>"},{"location":"user-guide/custom-silicon/#example-llm-training-on-trainium","title":"Example: LLM Training on Trainium","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: llm-training-trainium\n  annotations:\n    orca.research/instance-type: \"trn2.48xlarge\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: trainer\n      image: your-trainium-image:latest\n      resources:\n        requests:\n          aws.amazon.com/neuron: \"16\"  # Request Trainium cores\n        limits:\n          aws.amazon.com/neuron: \"16\"\n</code></pre>"},{"location":"user-guide/custom-silicon/#trainium-benefits","title":"Trainium Benefits","text":"<ul> <li>Cost Optimization: ~50% lower cost per training compared to GPU instances</li> <li>Purpose-Built: Optimized for transformer models and LLMs</li> <li>Scale: NeuronLink provides high-bandwidth interconnect</li> <li>PyTorch Support: AWS Neuron SDK with PyTorch integration</li> <li>JAX Support: Native JAX/Flax support for research</li> </ul>"},{"location":"user-guide/custom-silicon/#when-to-use-trainium","title":"When to Use Trainium","text":"<p>\u2705 Good for: - Large language model training (BERT, GPT, LLaMA, etc.) - Transformer-based models - Cost-sensitive training workloads - Long-running training jobs</p> <p>\u274c Not ideal for: - Models requiring CUDA-specific code - Workloads requiring NVIDIA-specific libraries - Inference (use Inferentia instead) - Short exploratory experiments</p>"},{"location":"user-guide/custom-silicon/#aws-inferentia-ai-inference","title":"AWS Inferentia (AI Inference)","text":"<p>AWS Inferentia is optimized for high-performance, cost-effective ML inference.</p>"},{"location":"user-guide/custom-silicon/#inferentia-instance-types-2025","title":"Inferentia Instance Types (2025)","text":"<ul> <li>Inf2.48xlarge: 12x Inferentia2 chips, 192 vCPUs, 384GB RAM</li> <li>Best price/performance for inference</li> <li> <p>Up to 4x throughput vs Inf1</p> </li> <li> <p>Inf2.24xlarge: 6x Inferentia2 chips, 96 vCPUs, 192GB RAM</p> </li> <li> <p>Inf2.8xlarge: 2x Inferentia2 chips, 32 vCPUs, 64GB RAM</p> </li> <li> <p>Inf1.24xlarge: 16x Inferentia1 chips (previous generation, still supported)</p> </li> </ul>"},{"location":"user-guide/custom-silicon/#example-model-inference-on-inferentia","title":"Example: Model Inference on Inferentia","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: llm-inference\n  annotations:\n    orca.research/instance-type: \"inf2.24xlarge\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: inference\n      image: your-inferentia-image:latest\n      resources:\n        requests:\n          aws.amazon.com/neuron: \"6\"  # Request Inferentia cores\n        limits:\n          aws.amazon.com/neuron: \"6\"\n</code></pre>"},{"location":"user-guide/custom-silicon/#inferentia-benefits","title":"Inferentia Benefits","text":"<ul> <li>Cost Effective: Up to 70% lower cost per inference vs GPU</li> <li>High Throughput: Optimized for batched inference</li> <li>Low Latency: Purpose-built for production inference</li> <li>Model Support: Broad framework support (PyTorch, TensorFlow, ONNX)</li> </ul>"},{"location":"user-guide/custom-silicon/#when-to-use-inferentia","title":"When to Use Inferentia","text":"<p>\u2705 Good for: - Production inference endpoints - High-throughput batch inference - Cost-sensitive deployments - Latency-critical applications - LLM serving (LLaMA, BERT, T5, etc.)</p> <p>\u274c Not ideal for: - Training workloads (use Trainium or GPUs) - Interactive model development - Models requiring CUDA</p>"},{"location":"user-guide/custom-silicon/#aws-fpgas-custom-acceleration","title":"AWS FPGAs (Custom Acceleration)","text":"<p>FPGAs provide customizable hardware acceleration for specialized compute workloads.</p>"},{"location":"user-guide/custom-silicon/#fpga-instance-types-2025","title":"FPGA Instance Types (2025)","text":"<ul> <li>F2.48xlarge: 8x Xilinx Alveo U250 FPGAs, 192 vCPUs, 2TB RAM</li> <li>Latest generation (F1 retired in 2025)</li> <li>PCIe Gen 4 support</li> <li> <p>Higher memory bandwidth</p> </li> <li> <p>F2.16xlarge: 4x Xilinx Alveo U250 FPGAs, 64 vCPUs, 1TB RAM</p> </li> <li> <p>F2.4xlarge: 1x Xilinx Alveo U250 FPGA, 16 vCPUs, 122GB RAM</p> </li> <li> <p>F2.2xlarge: 1x Xilinx Alveo U250 FPGA, 8 vCPUs, 61GB RAM</p> </li> </ul>"},{"location":"user-guide/custom-silicon/#example-fpga-workload","title":"Example: FPGA Workload","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: fpga-acceleration\n  annotations:\n    orca.research/instance-type: \"f2.16xlarge\"\n    orca.research/launch-type: \"on-demand\"\nspec:\n  nodeSelector:\n    orca.research/provider: \"aws\"\n  tolerations:\n    - key: orca.research/burst-node\n      operator: Equal\n      value: \"true\"\n      effect: NoSchedule\n  containers:\n    - name: fpga-app\n      image: your-fpga-image:latest\n      resources:\n        requests:\n          aws.amazon.com/fpga: \"4\"  # Request FPGAs\n        limits:\n          aws.amazon.com/fpga: \"4\"\n</code></pre>"},{"location":"user-guide/custom-silicon/#fpga-use-cases","title":"FPGA Use Cases","text":"<p>\u2705 Good for: - Custom hardware acceleration - Financial modeling and risk analysis - Genomics and bioinformatics - Video transcoding and processing - Network security and cryptography - Custom ML accelerators - High-frequency trading</p> <p>\u274c Not ideal for: - General-purpose computing - Workloads without FPGA expertise - Short-lived jobs (FPGA programming overhead)</p>"},{"location":"user-guide/custom-silicon/#fpga-development","title":"FPGA Development","text":"<p>FPGAs require specialized development:</p> <ol> <li>AWS FPGA Developer AMI: Pre-configured development environment</li> <li>Xilinx Vitis: FPGA development tools</li> <li>AFI (Amazon FPGA Image): Pre-built or custom FPGA images</li> <li>OpenCL Support: Higher-level FPGA programming</li> </ol>"},{"location":"user-guide/custom-silicon/#comparison-matrix","title":"Comparison Matrix","text":"Feature Trainium Inferentia NVIDIA GPU FPGA Primary Use Training Inference Training/Inference Custom Acceleration Cost Low Very Low High Medium Performance High (Training) High (Inference) Highest Customizable Flexibility Medium Medium High Highest Development PyTorch/JAX PyTorch/TF CUDA/PyTorch Xilinx/OpenCL Time to Deploy Fast Fast Fast Slow (FPGA dev) Availability Good Good Limited Good"},{"location":"user-guide/custom-silicon/#orca-configuration","title":"ORCA Configuration","text":""},{"location":"user-guide/custom-silicon/#instance-selection-examples","title":"Instance Selection Examples","text":"<pre><code>instances:\n  templates:\n    # Training templates\n    llm-training-gpu:\n      instanceType: p6.48xlarge      # NVIDIA B200\n      launchType: spot\n\n    llm-training-trainium:\n      instanceType: trn2.48xlarge    # AWS Trainium2\n      launchType: on-demand\n\n    # Inference templates\n    inference-gpu:\n      instanceType: g6.xlarge        # NVIDIA L4\n      launchType: on-demand\n\n    inference-inferentia:\n      instanceType: inf2.24xlarge    # AWS Inferentia2\n      launchType: on-demand\n\n    # FPGA templates\n    fpga-acceleration:\n      instanceType: f2.16xlarge      # 4x FPGAs\n      launchType: on-demand\n\n  # Allowed instance types\n  allowedInstanceTypes:\n    # Trainium\n    - trn2.48xlarge\n    - trn2.24xlarge\n    - trn1.32xlarge\n    - trn1n.32xlarge\n\n    # Inferentia\n    - inf2.48xlarge\n    - inf2.24xlarge\n    - inf2.8xlarge\n    - inf1.24xlarge\n\n    # FPGA\n    - f2.48xlarge\n    - f2.16xlarge\n    - f2.4xlarge\n    - f2.2xlarge\n</code></pre>"},{"location":"user-guide/custom-silicon/#cost-comparison-approximate-2025-pricing","title":"Cost Comparison (Approximate 2025 Pricing)","text":""},{"location":"user-guide/custom-silicon/#training-workloads","title":"Training Workloads","text":"<ul> <li>P6.48xlarge (8x B200): ~$115/hour</li> <li>P5.48xlarge (8x H100): ~$98/hour</li> <li>Trn2.48xlarge (16x Trainium2): ~$50/hour \u2705 50% savings</li> </ul>"},{"location":"user-guide/custom-silicon/#inference-workloads","title":"Inference Workloads","text":"<ul> <li>G6.xlarge (1x L4): ~$1.20/hour</li> <li>Inf2.24xlarge (6x Inferentia2): ~$8/hour \u2705 Better throughput/cost</li> </ul>"},{"location":"user-guide/custom-silicon/#fpga-workloads","title":"FPGA Workloads","text":"<ul> <li>F2.16xlarge (4x FPGAs): ~$22/hour</li> </ul>"},{"location":"user-guide/custom-silicon/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/custom-silicon/#trainium","title":"Trainium","text":"<ol> <li>Use for Large Models: Best ROI for models &gt;1B parameters</li> <li>Batch Training: Optimize batch sizes for Trainium</li> <li>Distributed Training: Use NeuronLink for multi-node</li> <li>Model Compilation: Pre-compile models with Neuron compiler</li> </ol>"},{"location":"user-guide/custom-silicon/#inferentia","title":"Inferentia","text":"<ol> <li>Batch Inference: Optimize for throughput over latency</li> <li>Model Optimization: Use Neuron compiler optimizations</li> <li>Right-Sizing: Choose instance size based on throughput needs</li> <li>Model Caching: Pre-compile and cache models</li> </ol>"},{"location":"user-guide/custom-silicon/#fpga","title":"FPGA","text":"<ol> <li>Long-Running Jobs: Amortize FPGA programming time</li> <li>Reuse AFIs: Use pre-built Amazon FPGA Images</li> <li>Custom Acceleration: Only when general compute insufficient</li> <li>Development Time: Budget for FPGA development expertise</li> </ol>"},{"location":"user-guide/custom-silicon/#aws-neuron-sdk","title":"AWS Neuron SDK","text":"<p>Both Trainium and Inferentia require the AWS Neuron SDK:</p> <pre><code># Example Dockerfile for Neuron workloads\nFROM public.ecr.aws/neuron/pytorch-training-neuronx:2.1.0-neuronx-py310\n\n# Install dependencies\nRUN pip install transformers datasets\n\n# Copy training code\nCOPY train.py /app/\n\n# Run with Neuron\nCMD [\"neuron-train\", \"train.py\"]\n</code></pre>"},{"location":"user-guide/custom-silicon/#resource-requests","title":"Resource Requests","text":""},{"location":"user-guide/custom-silicon/#trainiuminferentia","title":"Trainium/Inferentia","text":"<pre><code>resources:\n  requests:\n    aws.amazon.com/neuron: \"16\"  # Number of Neuron cores\n  limits:\n    aws.amazon.com/neuron: \"16\"\n</code></pre>"},{"location":"user-guide/custom-silicon/#fpga_1","title":"FPGA","text":"<pre><code>resources:\n  requests:\n    aws.amazon.com/fpga: \"4\"  # Number of FPGAs\n  limits:\n    aws.amazon.com/fpga: \"4\"\n</code></pre>"},{"location":"user-guide/custom-silicon/#future-support","title":"Future Support","text":"<p>ORCA will continue to support AWS custom silicon as new generations are released: - Trainium3 (expected 2026) - Inferentia3 (expected 2026) - Next-gen FPGAs</p>"},{"location":"user-guide/custom-silicon/#references","title":"References","text":"<ul> <li>AWS Trainium</li> <li>AWS Inferentia</li> <li>AWS FPGA Instances</li> <li>AWS Neuron SDK</li> <li>FPGA Developer AMI</li> </ul> <p>Last updated: October 2025</p>"},{"location":"user-guide/gpu-workloads/","title":"GPU Workloads","text":"<p>Running GPU-accelerated AI/ML workloads on AWS.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"user-guide/gpu-workloads/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"user-guide/gpu-workloads/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"user-guide/instance-selection/","title":"Instance Selection","text":"<p>How to select the right EC2 instance type for your workload.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"user-guide/instance-selection/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"user-guide/instance-selection/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"user-guide/spot-instances/","title":"Spot Instances","text":"<p>Using AWS Spot instances for cost-optimized computing.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"user-guide/spot-instances/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"user-guide/spot-instances/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and how to resolve them.</p> <p>Documentation In Progress</p> <p>This page is under construction. Check back soon for detailed content!</p>"},{"location":"user-guide/troubleshooting/#coming-soon","title":"Coming Soon","text":"<p>This section will cover:</p> <ul> <li>Key concepts and features</li> <li>Step-by-step instructions</li> <li>Examples and best practices</li> <li>Troubleshooting tips</li> </ul>"},{"location":"user-guide/troubleshooting/#need-help-now","title":"Need Help Now?","text":"<ul> <li>Check our GitHub Issues</li> <li>Join the Discussions</li> <li>Read the README</li> </ul>"}]}